// generated by genController.go
package controllers

import (
	"net/http"

	"github.com/thomaspeugeot/metabaron/libs/animah/go/models"
	"github.com/thomaspeugeot/metabaron/libs/animah/go/orm"

	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"
)

// ActionSingloton is the type of the singloton of the controllers package
// this singloton allows for the attachment of callbacks to controllers function
type ActionSingloton struct {
	Callback ActionCallbackInterface
}

// ActionCallbackInterface is the interface that must be supported 
// by the Struct that is attached to the singloton
type ActionCallbackInterface interface {
	PostAction(action *models.Action)
}

// ActionSinglotonID is the singloton variable
var ActionSinglotonID ActionSingloton

// An ActionID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getAction updateAction deleteAction
type ActionID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// ActionInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postAction updateAction
type ActionInput struct {
	// The Action to submit or modify
	// in: body
	Action *orm.ActionAPI
}

// GetActions
//
// swagger:route GET /actions actions getActions
// 
// Get all actions
//
// Responses:
//    default: genericError
//        200: actionDBsResponse
func GetActions(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	var actions []orm.ActionDB
	query := db.Find(&actions)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	c.JSON(http.StatusOK, actions)
}

// PostAction
//
// swagger:route POST /actions actions postAction
// 
// Creates a action
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: actionDBResponse
func PostAction(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Validate input
	var input orm.ActionAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create action
	actionDB := orm.ActionDB{}
	actionDB.ActionAPI = input

	query := db.Create(&actionDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	if ActionSinglotonID.Callback != nil {
		ActionSinglotonID.Callback.PostAction(&(actionDB.Action))
	}

	c.JSON(http.StatusOK, actionDB)
}

// GetAction
//
// swagger:route GET /actions/{ID} actions getAction
//
// Gets the details for a action.
//
// Responses:
//    default: genericError
//        200: actionDBResponse
func GetAction(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get action in DB
	var action orm.ActionDB
	if err := db.First(&action, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	c.JSON(http.StatusOK, action)
}

// UpdateAction
// 
// swagger:route PATCH /actions/{ID} actions updateAction
//
// Update a action
//
// Responses:
//    default: genericError
//        200: actionDBResponse
func UpdateAction(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var actionDB orm.ActionDB

	// fetch the action
	query := db.First(&actionDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.ActionAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update 
	query = db.Model(&actionDB).Updates(input)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}	

	// return status OK with the marshalling of the the actionDB
	c.JSON(http.StatusOK, actionDB)
}

// DeleteAction
//
// swagger:route DELETE /actions/{ID} actions deleteAction
//
// Delete a action
//
// Responses:
//    default: genericError
func DeleteAction(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var actionDB orm.ActionDB
	if err := db.First(&actionDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&actionDB)

	c.JSON(http.StatusOK, gin.H{"data": true})
}


