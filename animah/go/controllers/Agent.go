// generated by genController.go
package controllers

import (
	"net/http"

	"github.com/thomaspeugeot/sandbox02/animah/go/models"
	"github.com/thomaspeugeot/sandbox02/animah/go/orm"

	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"
)

// AgentSingloton is the type of the singloton of the controllers package
// this singloton allows for the attachment of callbacks to controllers function
type AgentSingloton struct {
	Callback AgentCallbackInterface
}

// AgentCallbackInterface is the interface that must be supported
// by the Struct that is attached to the singloton
type AgentCallbackInterface interface {
	PostAgent(agent *models.Agent)
}

// AgentSinglotonID is the singloton variable
var AgentSinglotonID AgentSingloton

// An AgentID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getAgent updateAgent deleteAgent getAgentEngine
type AgentID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// AgentInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postAgent updateAgent
type AgentInput struct {
	// The Agent to submit or modify
	// in: body
	Agent *orm.AgentAPI
}

// GetAgents
//
// swagger:route GET /agents agents getAgents
//
// Get all agents
//
// Responses:
//    default: genericError
//        200: agentDBsResponse
func GetAgents(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	var agents []orm.AgentDB
	query := db.Find(&agents)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	c.JSON(http.StatusOK, agents)
}

// PostAgent
//
// swagger:route POST /agents agents postAgent
//
// Creates a agent
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: agentDBResponse
func PostAgent(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Validate input
	var input orm.AgentAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create agent
	agentDB := orm.AgentDB{}
	agentDB.AgentAPI = input

	query := db.Create(&agentDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	if AgentSinglotonID.Callback != nil {
		AgentSinglotonID.Callback.PostAgent(&(agentDB.Agent))
	}

	c.JSON(http.StatusOK, agentDB)
}

// GetAgent
//
// swagger:route GET /agents/{ID} agents getAgent
//
// Gets the details for a agent.
//
// Responses:
//    default: genericError
//        200: agentDBResponse
func GetAgent(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get agent in DB
	var agent orm.AgentDB
	if err := db.First(&agent, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	c.JSON(http.StatusOK, agent)
}

// UpdateAgent
//
// swagger:route PATCH /agents/{ID} agents updateAgent
//
// Update a agent
//
// Responses:
//    default: genericError
//        200: agentDBResponse
func UpdateAgent(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var agentDB orm.AgentDB

	// fetch the agent
	query := db.First(&agentDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.AgentAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	query = db.Model(&agentDB).Updates(input)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// return status OK with the marshalling of the the agentDB
	c.JSON(http.StatusOK, agentDB)
}

// DeleteAgent
//
// swagger:route DELETE /agents/{ID} agents deleteAgent
//
// Delete a agent
//
// Responses:
//    default: genericError
func DeleteAgent(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var agentDB orm.AgentDB
	if err := db.First(&agentDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&agentDB)

	c.JSON(http.StatusOK, gin.H{"data": true})
}

// GetAgentEngine swagger:route GET /agents/{ID}/engine agents getAgentEngine
//
// Gets engine of a agent.
//
// Responses:
//    default: genericError
//        200: engineDBResponse
func GetAgentEngine(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get agent in DB
	var agent orm.AgentDB
	if err := db.First(&agent, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Get engine in DB
	var engineEngine orm.EngineDB
	if err := db.First(&engineEngine, *agent.EngineID).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	c.JSON(http.StatusOK, engineEngine)
}
