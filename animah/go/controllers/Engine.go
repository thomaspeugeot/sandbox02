// generated by genController.go
package controllers

import (
	"net/http"

	"github.com/thomaspeugeot/sandbox02/animah/go/models"
	"github.com/thomaspeugeot/sandbox02/animah/go/orm"

	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"
)

// EngineSingloton is the type of the singloton of the controllers package
// this singloton allows for the attachment of callbacks to controllers function
type EngineSingloton struct {
	Callback EngineCallbackInterface
}

// EngineCallbackInterface is the interface that must be supported
// by the Struct that is attached to the singloton
type EngineCallbackInterface interface {
	PostEngine(engine *models.Engine)
}

// EngineSinglotonID is the singloton variable
var EngineSinglotonID EngineSingloton

// An EngineID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getEngine updateEngine deleteEngine getEngineAgentsViaEngine
type EngineID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// EngineInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postEngine updateEngine
type EngineInput struct {
	// The Engine to submit or modify
	// in: body
	Engine *orm.EngineAPI
}

// GetEngines
//
// swagger:route GET /engines engines getEngines
//
// Get all engines
//
// Responses:
//    default: genericError
//        200: engineDBsResponse
func GetEngines(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	var engines []orm.EngineDB
	query := db.Find(&engines)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	c.JSON(http.StatusOK, engines)
}

// PostEngine
//
// swagger:route POST /engines engines postEngine
//
// Creates a engine
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: engineDBResponse
func PostEngine(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Validate input
	var input orm.EngineAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create engine
	engineDB := orm.EngineDB{}
	engineDB.EngineAPI = input

	query := db.Create(&engineDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	if EngineSinglotonID.Callback != nil {
		EngineSinglotonID.Callback.PostEngine(&(engineDB.Engine))
	}

	c.JSON(http.StatusOK, engineDB)
}

// GetEngine
//
// swagger:route GET /engines/{ID} engines getEngine
//
// Gets the details for a engine.
//
// Responses:
//    default: genericError
//        200: engineDBResponse
func GetEngine(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get engine in DB
	var engine orm.EngineDB
	if err := db.First(&engine, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	c.JSON(http.StatusOK, engine)
}

// UpdateEngine
//
// swagger:route PATCH /engines/{ID} engines updateEngine
//
// Update a engine
//
// Responses:
//    default: genericError
//        200: engineDBResponse
func UpdateEngine(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var engineDB orm.EngineDB

	// fetch the engine
	query := db.First(&engineDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.EngineAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	query = db.Model(&engineDB).Updates(input)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// return status OK with the marshalling of the the engineDB
	c.JSON(http.StatusOK, engineDB)
}

// DeleteEngine
//
// swagger:route DELETE /engines/{ID} engines deleteEngine
//
// Delete a engine
//
// Responses:
//    default: genericError
func DeleteEngine(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var engineDB orm.EngineDB
	if err := db.First(&engineDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&engineDB)

	c.JSON(http.StatusOK, gin.H{"data": true})
}

// GetEngineAgentsViaEngine swagger:route GET /engines/{ID}/agentsviaengine engines getEngineAgentsViaEngine
//
// Gets agents of engine via field Engine of Agent.
//
// Responses:
//    default: genericError
//        200: agentDBsResponse
func GetEngineAgentsViaEngine(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get engine
	var engine orm.EngineDB
	if err := db.First(&engine, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get agents
	var agentDBs orm.AgentDBs
	columnName := gorm.ToColumnName("EngineID")
	query := db.Where(genQuery(columnName), engine.ID).Find(&agentDBs)

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	c.JSON(http.StatusOK, agentDBs)
}
