// generated by genGOAllModelStruct.go
package models



// CreateORMAction enables dynamic registration of a Action instance
func CreateORMAction(Action *Action) {
	AllModelStore.Actions = append(AllModelStore.Actions, Action)
	if AllModelStore.AllModelsStructCreateCallback != nil {
		AllModelStore.AllModelsStructCreateCallback.CreateORMAction(Action)
	}
}


// DeleteORMAction enables dynamic registration of a Action instance
func DeleteORMAction(Action *Action) {
	for index, _Action := range AllModelStore.Actions {
		if _Action == Action {
			AllModelStore.Actions[index] = AllModelStore.Actions[len(AllModelStore.Actions)-1]
			AllModelStore.Actions = AllModelStore.Actions[:len(AllModelStore.Actions)-1]
		}
	}
	if AllModelStore.AllModelsStructDeleteCallback != nil {
		AllModelStore.AllModelsStructDeleteCallback.DeleteORMAction(Action)
	}
}

// CreateORMAgent enables dynamic registration of a Agent instance
func CreateORMAgent(Agent *Agent) {
	AllModelStore.Agents = append(AllModelStore.Agents, Agent)
	if AllModelStore.AllModelsStructCreateCallback != nil {
		AllModelStore.AllModelsStructCreateCallback.CreateORMAgent(Agent)
	}
}


// DeleteORMAgent enables dynamic registration of a Agent instance
func DeleteORMAgent(Agent *Agent) {
	for index, _Agent := range AllModelStore.Agents {
		if _Agent == Agent {
			AllModelStore.Agents[index] = AllModelStore.Agents[len(AllModelStore.Agents)-1]
			AllModelStore.Agents = AllModelStore.Agents[:len(AllModelStore.Agents)-1]
		}
	}
	if AllModelStore.AllModelsStructDeleteCallback != nil {
		AllModelStore.AllModelsStructDeleteCallback.DeleteORMAgent(Agent)
	}
}

// CreateORMEngine enables dynamic registration of a Engine instance
func CreateORMEngine(Engine *Engine) {
	AllModelStore.Engines = append(AllModelStore.Engines, Engine)
	if AllModelStore.AllModelsStructCreateCallback != nil {
		AllModelStore.AllModelsStructCreateCallback.CreateORMEngine(Engine)
	}
}


// DeleteORMEngine enables dynamic registration of a Engine instance
func DeleteORMEngine(Engine *Engine) {
	for index, _Engine := range AllModelStore.Engines {
		if _Engine == Engine {
			AllModelStore.Engines[index] = AllModelStore.Engines[len(AllModelStore.Engines)-1]
			AllModelStore.Engines = AllModelStore.Engines[:len(AllModelStore.Engines)-1]
		}
	}
	if AllModelStore.AllModelsStructDeleteCallback != nil {
		AllModelStore.AllModelsStructDeleteCallback.DeleteORMEngine(Engine)
	}
}

// swagger:ignore
type AllModelsStructCreateInterface interface {
	CreateORMAction(Action *Action)
	CreateORMAgent(Agent *Agent)
	CreateORMEngine(Engine *Engine)
}
	
type AllModelsStructDeleteInterface interface {
	DeleteORMAction(Action *Action)
	DeleteORMAgent(Agent *Agent)
	DeleteORMEngine(Engine *Engine)
}
		
// swagger:ignore
type AllModelStoreStruct struct {
	Actions  []*Action
	Agents  []*Agent
	Engines  []*Engine
	AllModelsStructCreateCallback AllModelsStructCreateInterface
	AllModelsStructDeleteCallback AllModelsStructDeleteInterface
}

// swagger:ignore
var AllModelStore AllModelStoreStruct = AllModelStoreStruct{
	Actions:	make([]*Action, 0),
	Agents:	make([]*Agent, 0),
	Engines:	make([]*Engine, 0),
}

func (allModelStoreStruct * AllModelStoreStruct) Reset() {
	allModelStoreStruct.Actions =	make([]*Action, 0)
	allModelStoreStruct.Agents =	make([]*Agent, 0)
	allModelStoreStruct.Engines =	make([]*Engine, 0)
}

func (allModelStoreStruct * AllModelStoreStruct) Nil() {
	allModelStoreStruct.Actions = nil
	allModelStoreStruct.Agents = nil
	allModelStoreStruct.Engines = nil
}
