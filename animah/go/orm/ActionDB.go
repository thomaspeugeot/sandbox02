// generated by genORMModelDB.go
package orm

import (
	
	"errors"
	"fmt"

	"github.com/jinzhu/gorm"
	"github.com/thomaspeugeot/metabaron/libs/animah/go/models"
)

// ActionAPI is the input in POST API
// 
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model actionAPI
type ActionAPI struct {

	models.Action

	// association fields
	
}

// ActionDB describes a action in the database
//
// It incorporates all fields : from the model, from the generated field for the API and the GORM ID
//
// swagger:model actionDB
type ActionDB struct {
	gorm.Model

	ActionAPI
}

// ActionDBs arrays actionDBs
// swagger:response actionDBsResponse
type ActionDBs []ActionDB

// ActionDBResponse provides response
// swagger:response actionDBResponse
type ActionDBResponse struct {
	ActionDB
}

// ModelToORMActionTranslate is a translation function from models object to ORM objects
func ModelToORMActionTranslate(
	translationImpact TranslationImpact,
	db *gorm.DB) (Error error) {

	if translationImpact == CreateMode {

		// check that actionStore is nil as well as actionDBs
		if map_ActionDBID_ActionPtr != nil {
			err := errors.New("In CreateMode translation, map_ActionDBID_ActionPtr should be nil")
			return err
		}

		if map_ActionDBID_ActionDB != nil {
			err := errors.New("In CreateMode translation, map_ActionDBID_ActionDB should be nil")
			return err
		}

		if map_ActionPtr_ActionDBID != nil {
			err := errors.New("In CreateMode translation, map_ActionPtr_ActionDBID should be nil")
			return err
		}

		tmp := make(map[uint]*models.Action, 0)
		map_ActionDBID_ActionPtr = &tmp

		tmpDB := make(map[uint]*ActionDB, 0)
		map_ActionDBID_ActionDB = &tmpDB

		tmpID := make(map[*models.Action]uint, 0)
		map_ActionPtr_ActionDBID = &tmpID

		for _, action := range models.AllModelStore.Actions {

			// initiate action
			var actionDB ActionDB
			actionDB.Action = *action

			query := db.Create(&actionDB)
			if query.Error != nil {
				return query.Error
			}

			// update stores
			(*map_ActionPtr_ActionDBID)[action] = actionDB.ID
			(*map_ActionDBID_ActionPtr)[actionDB.ID] = action
			(*map_ActionDBID_ActionDB)[actionDB.ID] = &actionDB
		}
	} else { // UpdateMode, update IDs of Pointer Fields of ORM object

		// check that actionStore is not nil
		if map_ActionDBID_ActionPtr == nil {
			err := errors.New("In UpdateMode translation, actionStore should not be nil")
			return err
		}

		if map_ActionDBID_ActionDB == nil {
			err := errors.New("In UpdateMode translation, actionStore should not be nil")
			return err
		}

		// update fields of actionDB with fields of action
		for _, action := range models.AllModelStore.Actions {
			actionDBID := (*map_ActionPtr_ActionDBID)[action]
			actionDB := (*map_ActionDBID_ActionDB)[actionDBID]

			actionDB.Action = *action
		}

		// parse model objects ot update associations
		for idx, action := range *map_ActionDBID_ActionPtr {

			// fetch matching actionDB
			if actionDB, ok := (*map_ActionDBID_ActionDB)[idx]; ok {
				// set {{Fieldname}}ID



				query := db.Save(&actionDB)
				if query.Error != nil {
					return query.Error
				}

			} else {
				err := errors.New(
					fmt.Sprintf("In UpdateMode translation, actionStore should not be nil %v %v",
						actionDB, action))
				return err
			}
		}
	}
	return nil
}

// stores ActionDB according to their gorm ID
var map_ActionDBID_ActionDB *map[uint]*ActionDB

// stores ActionDB ID according to Action address
var map_ActionPtr_ActionDBID *map[*models.Action]uint

// stores Action according to their gorm ID
var map_ActionDBID_ActionPtr *map[uint]*models.Action

// ORMToModelActionTranslate is a translation function from ORM object to models objects
// This function used the uint ID of the ORM object to create or update (according to translationImpact)
// maps of respectively ORM and models objects
//
// In create mode,
func ORMToModelActionTranslate(
	translationImpact TranslationImpact,
	db *gorm.DB) (Error error) {

	if translationImpact == CreateMode {

		// check that actionStores are nil

		if map_ActionDBID_ActionPtr != nil {
			err := errors.New("In CreateMode translation, Parameters actionStore should be nil")
			return err
		}

		if map_ActionDBID_ActionDB != nil {
			err := errors.New("In CreateMode translation, parameters ActionDBStore should be nil")
			return err
		}

		// init stores
		tmp := make(map[uint]*models.Action, 0)
		map_ActionDBID_ActionPtr = &tmp

		tmpDB := make(map[uint]*ActionDB, 0)
		map_ActionDBID_ActionDB = &tmpDB

		tmpID := make(map[*models.Action]uint, 0)
		map_ActionPtr_ActionDBID = &tmpID

		models.AllModelStore.Actions = make([]*models.Action, 0)

		actionDBArray := make([]ActionDB, 0)
		query := db.Find(&actionDBArray)
		if query.Error != nil {
			return query.Error
		}

		// copy orm objects to the two stores
		for _, actionDB := range actionDBArray {

			// create entries in the tree maps.
			action := actionDB.Action
			(*map_ActionDBID_ActionPtr)[actionDB.ID] = &action

			(*map_ActionPtr_ActionDBID)[&action] = actionDB.ID

			actionDBCopy := actionDB
			(*map_ActionDBID_ActionDB)[actionDB.ID] = &actionDBCopy

			// append model store with the new element
			models.AllModelStore.Actions = append(models.AllModelStore.Actions, &action)
		}
	} else { // UpdateMode
		// for later, update of the data field

		// check that actionStore is not nil
		if map_ActionDBID_ActionPtr == nil {
			err := errors.New("In UpdateMode translation, actionStore should not be nil")
			return err
		}

		if map_ActionDBID_ActionDB == nil {
			err := errors.New("In UpdateMode translation, actionStore should not be nil")
			return err
		}

		// update fields of actionDB with fields of action
		for _, action := range models.AllModelStore.Actions {
			actionDBID := (*map_ActionPtr_ActionDBID)[action]
			actionDB := (*map_ActionDBID_ActionDB)[actionDBID]

			*action = actionDB.Action
		}

		// parse all DB instance and update all pointer fields of the translated models instance
		for _, actionDB := range *map_ActionDBID_ActionDB {
			action := (*map_ActionDBID_ActionPtr)[actionDB.ID]
			if action == nil {
				err := errors.New("cannot find translated instance in models store")
				return err
			}




		}
	}

	return nil
}

func (allORMStoreStruct *AllORMStoreStruct) CreateORMAction(action *models.Action) {

	CreateORMAction(allORMStoreStruct.db, action)
}

// CreateORMAction creates ORM{{Strucname}} in DB from action
func CreateORMAction(
	db *gorm.DB,
	action *models.Action) (Error error) {

	// initiate action
	var actionDB ActionDB
	actionDB.Action = *action

	query := db.Create(&actionDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*map_ActionPtr_ActionDBID)[action] = actionDB.ID
	(*map_ActionDBID_ActionPtr)[actionDB.ID] = action
	(*map_ActionDBID_ActionDB)[actionDB.ID] = &actionDB

	return
}

func (allORMStoreStruct *AllORMStoreStruct) DeleteORMAction(action *models.Action) {

	DeleteORMAction(allORMStoreStruct.db, action)
}


func DeleteORMAction(
	db *gorm.DB,
	action *models.Action) (Error error) {

	actionDBID := (*map_ActionPtr_ActionDBID)[action]
	actionDB := (*map_ActionDBID_ActionDB)[actionDBID]

	query := db.Unscoped().Delete(&actionDB)
	if query.Error != nil {
		return query.Error
	}

	delete(*map_ActionPtr_ActionDBID, action)
	delete(*map_ActionDBID_ActionPtr, actionDB.ID)
	delete(*map_ActionDBID_ActionDB, actionDBID)

	return
}
