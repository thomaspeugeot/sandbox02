// generated by genORMModelDB.go
package orm

import (
	"errors"
	"fmt"

	"github.com/jinzhu/gorm"
	"github.com/thomaspeugeot/sandbox02/animah/go/models"
)

// EngineAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model engineAPI
type EngineAPI struct {
	models.Engine

	// association fields

}

// EngineDB describes a engine in the database
//
// It incorporates all fields : from the model, from the generated field for the API and the GORM ID
//
// swagger:model engineDB
type EngineDB struct {
	gorm.Model

	EngineAPI
}

// EngineDBs arrays engineDBs
// swagger:response engineDBsResponse
type EngineDBs []EngineDB

// EngineDBResponse provides response
// swagger:response engineDBResponse
type EngineDBResponse struct {
	EngineDB
}

// ModelToORMEngineTranslate is a translation function from models object to ORM objects
func ModelToORMEngineTranslate(
	translationImpact TranslationImpact,
	db *gorm.DB) (Error error) {

	if translationImpact == CreateMode {

		// check that engineStore is nil as well as engineDBs
		if map_EngineDBID_EnginePtr != nil {
			err := errors.New("In CreateMode translation, map_EngineDBID_EnginePtr should be nil")
			return err
		}

		if map_EngineDBID_EngineDB != nil {
			err := errors.New("In CreateMode translation, map_EngineDBID_EngineDB should be nil")
			return err
		}

		if map_EnginePtr_EngineDBID != nil {
			err := errors.New("In CreateMode translation, map_EnginePtr_EngineDBID should be nil")
			return err
		}

		tmp := make(map[uint]*models.Engine, 0)
		map_EngineDBID_EnginePtr = &tmp

		tmpDB := make(map[uint]*EngineDB, 0)
		map_EngineDBID_EngineDB = &tmpDB

		tmpID := make(map[*models.Engine]uint, 0)
		map_EnginePtr_EngineDBID = &tmpID

		for _, engine := range models.AllModelStore.Engines {

			// initiate engine
			var engineDB EngineDB
			engineDB.Engine = *engine

			query := db.Create(&engineDB)
			if query.Error != nil {
				return query.Error
			}

			// update stores
			(*map_EnginePtr_EngineDBID)[engine] = engineDB.ID
			(*map_EngineDBID_EnginePtr)[engineDB.ID] = engine
			(*map_EngineDBID_EngineDB)[engineDB.ID] = &engineDB
		}
	} else { // UpdateMode, update IDs of Pointer Fields of ORM object

		// check that engineStore is not nil
		if map_EngineDBID_EnginePtr == nil {
			err := errors.New("In UpdateMode translation, engineStore should not be nil")
			return err
		}

		if map_EngineDBID_EngineDB == nil {
			err := errors.New("In UpdateMode translation, engineStore should not be nil")
			return err
		}

		// update fields of engineDB with fields of engine
		for _, engine := range models.AllModelStore.Engines {
			engineDBID := (*map_EnginePtr_EngineDBID)[engine]
			engineDB := (*map_EngineDBID_EngineDB)[engineDBID]

			engineDB.Engine = *engine
		}

		// parse model objects ot update associations
		for idx, engine := range *map_EngineDBID_EnginePtr {

			// fetch matching engineDB
			if engineDB, ok := (*map_EngineDBID_EngineDB)[idx]; ok {
				// set {{Fieldname}}ID

				query := db.Save(&engineDB)
				if query.Error != nil {
					return query.Error
				}

			} else {
				err := errors.New(
					fmt.Sprintf("In UpdateMode translation, engineStore should not be nil %v %v",
						engineDB, engine))
				return err
			}
		}
	}
	return nil
}

// stores EngineDB according to their gorm ID
var map_EngineDBID_EngineDB *map[uint]*EngineDB

// stores EngineDB ID according to Engine address
var map_EnginePtr_EngineDBID *map[*models.Engine]uint

// stores Engine according to their gorm ID
var map_EngineDBID_EnginePtr *map[uint]*models.Engine

// ORMToModelEngineTranslate is a translation function from ORM object to models objects
// This function used the uint ID of the ORM object to create or update (according to translationImpact)
// maps of respectively ORM and models objects
//
// In create mode,
func ORMToModelEngineTranslate(
	translationImpact TranslationImpact,
	db *gorm.DB) (Error error) {

	if translationImpact == CreateMode {

		// check that engineStores are nil

		if map_EngineDBID_EnginePtr != nil {
			err := errors.New("In CreateMode translation, Parameters engineStore should be nil")
			return err
		}

		if map_EngineDBID_EngineDB != nil {
			err := errors.New("In CreateMode translation, parameters EngineDBStore should be nil")
			return err
		}

		// init stores
		tmp := make(map[uint]*models.Engine, 0)
		map_EngineDBID_EnginePtr = &tmp

		tmpDB := make(map[uint]*EngineDB, 0)
		map_EngineDBID_EngineDB = &tmpDB

		tmpID := make(map[*models.Engine]uint, 0)
		map_EnginePtr_EngineDBID = &tmpID

		models.AllModelStore.Engines = make([]*models.Engine, 0)

		engineDBArray := make([]EngineDB, 0)
		query := db.Find(&engineDBArray)
		if query.Error != nil {
			return query.Error
		}

		// copy orm objects to the two stores
		for _, engineDB := range engineDBArray {

			// create entries in the tree maps.
			engine := engineDB.Engine
			(*map_EngineDBID_EnginePtr)[engineDB.ID] = &engine

			(*map_EnginePtr_EngineDBID)[&engine] = engineDB.ID

			engineDBCopy := engineDB
			(*map_EngineDBID_EngineDB)[engineDB.ID] = &engineDBCopy

			// append model store with the new element
			models.AllModelStore.Engines = append(models.AllModelStore.Engines, &engine)
		}
	} else { // UpdateMode
		// for later, update of the data field

		// check that engineStore is not nil
		if map_EngineDBID_EnginePtr == nil {
			err := errors.New("In UpdateMode translation, engineStore should not be nil")
			return err
		}

		if map_EngineDBID_EngineDB == nil {
			err := errors.New("In UpdateMode translation, engineStore should not be nil")
			return err
		}

		// update fields of engineDB with fields of engine
		for _, engine := range models.AllModelStore.Engines {
			engineDBID := (*map_EnginePtr_EngineDBID)[engine]
			engineDB := (*map_EngineDBID_EngineDB)[engineDBID]

			*engine = engineDB.Engine
		}

		// parse all DB instance and update all pointer fields of the translated models instance
		for _, engineDB := range *map_EngineDBID_EngineDB {
			engine := (*map_EngineDBID_EnginePtr)[engineDB.ID]
			if engine == nil {
				err := errors.New("cannot find translated instance in models store")
				return err
			}

		}
	}

	return nil
}

func (allORMStoreStruct *AllORMStoreStruct) CreateORMEngine(engine *models.Engine) {

	CreateORMEngine(allORMStoreStruct.db, engine)
}

// CreateORMEngine creates ORM{{Strucname}} in DB from engine
func CreateORMEngine(
	db *gorm.DB,
	engine *models.Engine) (Error error) {

	// initiate engine
	var engineDB EngineDB
	engineDB.Engine = *engine

	query := db.Create(&engineDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*map_EnginePtr_EngineDBID)[engine] = engineDB.ID
	(*map_EngineDBID_EnginePtr)[engineDB.ID] = engine
	(*map_EngineDBID_EngineDB)[engineDB.ID] = &engineDB

	return
}

func (allORMStoreStruct *AllORMStoreStruct) DeleteORMEngine(engine *models.Engine) {

	DeleteORMEngine(allORMStoreStruct.db, engine)
}

func DeleteORMEngine(
	db *gorm.DB,
	engine *models.Engine) (Error error) {

	engineDBID := (*map_EnginePtr_EngineDBID)[engine]
	engineDB := (*map_EngineDBID_EngineDB)[engineDBID]

	query := db.Unscoped().Delete(&engineDB)
	if query.Error != nil {
		return query.Error
	}

	delete(*map_EnginePtr_EngineDBID, engine)
	delete(*map_EngineDBID_EnginePtr, engineDB.ID)
	delete(*map_EngineDBID_EngineDB, engineDBID)

	return
}
