// generated by genNgTable.go
import { Component, OnInit, OnChanges, Input, Output, EventEmitter } from '@angular/core';
import { MatTableDataSource } from '@angular/material/table';
import { MatButton } from '@angular/material/button'

import { Router, RouterState } from '@angular/router';
import { ActionSinglotonDB } from '../actionsingloton-db'
import { ActionSinglotonService } from '../actionsingloton.service'


// generated table component
@Component({
  selector: 'app-actionsinglotons-table',
  templateUrl: './actionsinglotons-table.component.html',
  styleUrls: ['./actionsinglotons-table.component.css']
})
export class ActionSinglotonsTableComponent implements OnInit {

  // the data source for the table
  actionsinglotons: ActionSinglotonDB[];

  @Input() ID : number; // ID of the caller when component called from struct in reverse relation
  @Input() struct : string; // struct with pointer to ActionSingloton
  @Input() field : string; // field to display

  displayedColumns: string[] = ['ID', 'Edit', 'Delete'];

  constructor(
    private actionsinglotonService: ActionSinglotonService,

    private router: Router,
  ) {
    // observable for changes in structs
    this.actionsinglotonService.ActionSinglotonServiceChanged.subscribe(
      message => {
        if (message == "post" || message == "update" || message == "delete") {
          this.getActionSinglotons()
        }
      }
    )
  }

  ngOnInit(): void {
    this.getActionSinglotons()
  }

  getActionSinglotons(): void {
    if (this.ID == null) {
      this.actionsinglotonService.getActionSinglotons().subscribe(
        ActionSinglotons => {
          this.actionsinglotons = ActionSinglotons;
        }
      )
    }
  
  }

  // newActionSingloton initiate a new actionsingloton
  // create a new ActionSingloton objet
  newActionSingloton() {
  }

  deleteActionSingloton(actionsinglotonID: number, actionsingloton: ActionSinglotonDB) {
    // la liste des actionsinglotons est amputée du actionsingloton avant le delete afin
    // de mettre à jour l'IHM
    this.actionsinglotons = this.actionsinglotons.filter(h => h !== actionsingloton);

    this.actionsinglotonService.deleteActionSingloton(actionsinglotonID).subscribe();
  }

  editActionSingloton(actionsinglotonID: number, actionsingloton: ActionSinglotonDB) {

  }

  // display actionsingloton in router
  displayActionSinglotonInRouter(actionsinglotonID: number) {
    this.router.navigate( ["actionsingloton-display", actionsinglotonID])
  }

  // set editor outlet
  setEditorRouterOutlet(actionsinglotonID: number) {
    this.router.navigate([{
      outlets: {
        editor: ["actionsingloton-detail", actionsinglotonID]
      }
    }]);
  }

  // set presentation outlet
  setPresentationRouterOutlet(actionsinglotonID: number) {
    this.router.navigate([{
      outlets: {
        presentation: ["actionsingloton-presentation", actionsinglotonID]
      }
    }]);
  }
}
