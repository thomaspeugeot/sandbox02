 // generated by GenNgService.go
import { Injectable } from '@angular/core';
import { HttpClientModule } from '@angular/common/http';
import { HttpClient, HttpHeaders } from '@angular/common/http';

/*
 * Kamar : Ajout d'un moyen pour communiquer entre les composants qui partagent de l'information
 * afin qu'ils soient notifiés d'un changement.
 */
import { BehaviorSubject } from 'rxjs';
import { Observable, of } from 'rxjs';
import { catchError, map, tap } from 'rxjs/operators';

import { AgentAPI } from './agent-api';
import { AgentDB } from './agent-db';



@Injectable({
  providedIn: 'root'
})
export class AgentService {

  httpOptions = {
    headers: new HttpHeaders({ 'Content-Type': 'application/json' })
  };

  // Kamar Raïmo: Adding a way to communicate between components that share information
  // so that they are notified of a change.
  AgentServiceChanged: BehaviorSubject<string> = new BehaviorSubject("");

  private agentsUrl = 'http://localhost:8080/agents';

  constructor(
    private http: HttpClient
  ) { }

  /** GET agents from the server */
  getAgents(): Observable<AgentDB[]> {
    return this.http.get<AgentDB[]>(this.agentsUrl)
      .pipe(
        tap(_ => this.log('fetched agents')),
        catchError(this.handleError<AgentDB[]>('getAgents', []))
      );
  }

  /** GET agent by id. Will 404 if id not found */
  getAgent(id: number): Observable<AgentDB> {
    const url = `${this.agentsUrl}/${id}`;
    return this.http.get<AgentDB>(url).pipe(
      tap(_ => this.log(`fetched agent id=${id}`)),
      catchError(this.handleError<AgentDB>(`getAgent id=${id}`))
    );
  }

  //////// Save methods //////////

  /** POST: add a new agent to the server */
  postAgent(agentAPI: AgentAPI): Observable<AgentDB> {
    return this.http.post<AgentDB>(this.agentsUrl, agentAPI, this.httpOptions).pipe(
      tap((newAgent: AgentDB) => this.log(`added agent w/ id=${newAgent.ID}`)),
      catchError(this.handleError<AgentDB>('addAgent'))
    );
  }

  /** DELETE: delete the agentdb from the server */
  deleteAgent(agentdb: AgentDB | number): Observable<AgentDB> {
    const id = typeof agentdb === 'number' ? agentdb : agentdb.ID;
    const url = `${this.agentsUrl}/${id}`;

    return this.http.delete<AgentDB>(url, this.httpOptions).pipe(
      tap(_ => this.log(`deleted agentdb id=${id}`)),
      catchError(this.handleError<AgentDB>('deleteAgent'))
    );
  }

  /** PUT: update the agentdb on the server */
  updateAgent(agentdb: AgentDB): Observable<AgentDB> {
    const id = typeof agentdb === 'number' ? agentdb : agentdb.ID;
    const url = `${this.agentsUrl}/${id}`;

    return this.http.put(url, agentdb, this.httpOptions).pipe(
      tap(_ => this.log(`updated agentdb id=${agentdb.ID}`)),
      catchError(this.handleError<AgentDB>('updateAgent'))
    );
  }



  /**
   * Handle Http operation that failed.
   * Let the app continue.
   * @param operation - name of the operation that failed
   * @param result - optional value to return as the observable result
   */
  private handleError<T>(operation = 'operation', result?: T) {
    return (error: any): Observable<T> => {

      // TODO: send the error to remote logging infrastructure
      console.error(error); // log to console instead

      // TODO: better job of transforming error for user consumption
      this.log(`${operation} failed: ${error.message}`);

      // Let the app keep running by returning an empty result.
      return of(result as T);
    };
  }

  private log(message: string) {

  }
}
