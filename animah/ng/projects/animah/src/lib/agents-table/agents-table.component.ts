// generated by genNgTable.go
import { Component, OnInit, OnChanges, Input, Output, EventEmitter } from '@angular/core';
import { MatTableDataSource } from '@angular/material/table';
import { MatButton } from '@angular/material/button'

import { Router, RouterState } from '@angular/router';
import { AgentDB } from '../agent-db'
import { AgentService } from '../agent.service'

import { EngineAPI} from '../engine-api'
import { EngineDB} from '../engine-db'
import { EngineService} from '../engine.service'


// generated table component
@Component({
  selector: 'app-agents-table',
  templateUrl: './agents-table.component.html',
  styleUrls: ['./agents-table.component.css']
})
export class AgentsTableComponent implements OnInit {

  // the data source for the table
  agents: AgentDB[];

  @Input() ID : number; // ID of the caller when component called from struct in reverse relation
  @Input() struct : string; // struct with pointer to Agent
  @Input() field : string; // field to display

  displayedColumns: string[] = ['ID', 'Engine', 'TechName', 'Edit', 'Delete'];

  constructor(
    private agentService: AgentService,

		private engineService: EngineService,
    private router: Router,
  ) {
    // observable for changes in structs
    this.agentService.AgentServiceChanged.subscribe(
      message => {
        if (message == "post" || message == "update" || message == "delete") {
          this.getAgents()
        }
      }
    )
  }

  ngOnInit(): void {
    this.getAgents()
  }

  getAgents(): void {
    if (this.ID == null) {
      this.agentService.getAgents().subscribe(
        Agents => {
          this.agents = Agents;
        }
      )
    }
  
		if (this.ID != 0 && this.field == "Engine" && this.struct == "Engine") {
			this.engineService.getEngineAgentsViaEngine(this.ID).subscribe(
				agents => {
					this.agents = agents;
				}
			)
		}
  }

  // newAgent initiate a new agent
  // create a new Agent objet
  newAgent() {
  }

  deleteAgent(agentID: number, agent: AgentDB) {
    // la liste des agents est amputée du agent avant le delete afin
    // de mettre à jour l'IHM
    this.agents = this.agents.filter(h => h !== agent);

    this.agentService.deleteAgent(agentID).subscribe();
  }

  editAgent(agentID: number, agent: AgentDB) {

  }

  // display agent in router
  displayAgentInRouter(agentID: number) {
    this.router.navigate( ["agent-display", agentID])
  }

  // set editor outlet
  setEditorRouterOutlet(agentID: number) {
    this.router.navigate([{
      outlets: {
        editor: ["agent-detail", agentID]
      }
    }]);
  }

  // set presentation outlet
  setPresentationRouterOutlet(agentID: number) {
    this.router.navigate([{
      outlets: {
        presentation: ["agent-presentation", agentID]
      }
    }]);
  }
}
