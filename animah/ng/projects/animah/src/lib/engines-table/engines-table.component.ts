// generated by genNgTable.go
import { Component, OnInit, OnChanges, Input, Output, EventEmitter } from '@angular/core';
import { MatTableDataSource } from '@angular/material/table';
import { MatButton } from '@angular/material/button'

import { Router, RouterState } from '@angular/router';
import { EngineDB } from '../engine-db'
import { EngineService } from '../engine.service'


// generated table component
@Component({
  selector: 'app-engines-table',
  templateUrl: './engines-table.component.html',
  styleUrls: ['./engines-table.component.css']
})
export class EnginesTableComponent implements OnInit {

  // the data source for the table
  engines: EngineDB[];

  @Input() ID : number; // ID of the caller when component called from struct in reverse relation
  @Input() struct : string; // struct with pointer to Engine
  @Input() field : string; // field to display

  displayedColumns: string[] = ['ID', 'ControlMode', 'Fired', 'Name', 'Speed', 'State', 'Edit', 'Delete'];

  constructor(
    private engineService: EngineService,

    private router: Router,
  ) {
    // observable for changes in structs
    this.engineService.EngineServiceChanged.subscribe(
      message => {
        if (message == "post" || message == "update" || message == "delete") {
          this.getEngines()
        }
      }
    )
  }

  ngOnInit(): void {
    this.getEngines()
  }

  getEngines(): void {
    if (this.ID == null) {
      this.engineService.getEngines().subscribe(
        Engines => {
          this.engines = Engines;
        }
      )
    }
  
  }

  // newEngine initiate a new engine
  // create a new Engine objet
  newEngine() {
  }

  deleteEngine(engineID: number, engine: EngineDB) {
    // la liste des engines est amputée du engine avant le delete afin
    // de mettre à jour l'IHM
    this.engines = this.engines.filter(h => h !== engine);

    this.engineService.deleteEngine(engineID).subscribe();
  }

  editEngine(engineID: number, engine: EngineDB) {

  }

  // display engine in router
  displayEngineInRouter(engineID: number) {
    this.router.navigate( ["engine-display", engineID])
  }

  // set editor outlet
  setEditorRouterOutlet(engineID: number) {
    this.router.navigate([{
      outlets: {
        editor: ["engine-detail", engineID]
      }
    }]);
  }

  // set presentation outlet
  setPresentationRouterOutlet(engineID: number) {
    this.router.navigate([{
      outlets: {
        presentation: ["engine-presentation", engineID]
      }
    }]);
  }
}
