// generated by genNgTable.go
import { Component, OnInit, OnChanges, Input, Output, EventEmitter } from '@angular/core';
import { MatTableDataSource } from '@angular/material/table';
import { MatButton } from '@angular/material/button'

import { Router, RouterState } from '@angular/router';
import { MarshallerDB } from '../marshaller-db'
import { MarshallerService } from '../marshaller.service'


// generated table component
@Component({
  selector: 'app-marshallers-table',
  templateUrl: './marshallers-table.component.html',
  styleUrls: ['./marshallers-table.component.css']
})
export class MarshallersTableComponent implements OnInit {

  // the data source for the table
  marshallers: MarshallerDB[];

  @Input() ID : number; // ID of the caller when component called from struct in reverse relation
  @Input() struct : string; // struct with pointer to Marshaller
  @Input() field : string; // field to display

  displayedColumns: string[] = ['ID', 'Edit', 'Delete'];

  constructor(
    private marshallerService: MarshallerService,

    private router: Router,
  ) {
    // observable for changes in structs
    this.marshallerService.MarshallerServiceChanged.subscribe(
      message => {
        if (message == "post" || message == "update" || message == "delete") {
          this.getMarshallers()
        }
      }
    )
  }

  ngOnInit(): void {
    this.getMarshallers()
  }

  getMarshallers(): void {
    if (this.ID == null) {
      this.marshallerService.getMarshallers().subscribe(
        Marshallers => {
          this.marshallers = Marshallers;
        }
      )
    }
  
  }

  // newMarshaller initiate a new marshaller
  // create a new Marshaller objet
  newMarshaller() {
  }

  deleteMarshaller(marshallerID: number, marshaller: MarshallerDB) {
    // la liste des marshallers est amputée du marshaller avant le delete afin
    // de mettre à jour l'IHM
    this.marshallers = this.marshallers.filter(h => h !== marshaller);

    this.marshallerService.deleteMarshaller(marshallerID).subscribe();
  }

  editMarshaller(marshallerID: number, marshaller: MarshallerDB) {

  }

  // display marshaller in router
  displayMarshallerInRouter(marshallerID: number) {
    this.router.navigate( ["marshaller-display", marshallerID])
  }

  // set editor outlet
  setEditorRouterOutlet(marshallerID: number) {
    this.router.navigate([{
      outlets: {
        editor: ["marshaller-detail", marshallerID]
      }
    }]);
  }

  // set presentation outlet
  setPresentationRouterOutlet(marshallerID: number) {
    this.router.navigate([{
      outlets: {
        presentation: ["marshaller-presentation", marshallerID]
      }
    }]);
  }
}
