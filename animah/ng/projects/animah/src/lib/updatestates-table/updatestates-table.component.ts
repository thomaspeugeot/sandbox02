// generated by genNgTable.go
import { Component, OnInit, OnChanges, Input, Output, EventEmitter } from '@angular/core';
import { MatTableDataSource } from '@angular/material/table';
import { MatButton } from '@angular/material/button'

import { Router, RouterState } from '@angular/router';
import { UpdateStateDB } from '../updatestate-db'
import { UpdateStateService } from '../updatestate.service'


// generated table component
@Component({
  selector: 'app-updatestates-table',
  templateUrl: './updatestates-table.component.html',
  styleUrls: ['./updatestates-table.component.css']
})
export class UpdateStatesTableComponent implements OnInit {

  // the data source for the table
  updatestates: UpdateStateDB[];

  @Input() ID : number; // ID of the caller when component called from struct in reverse relation
  @Input() struct : string; // struct with pointer to UpdateState
  @Input() field : string; // field to display

  displayedColumns: string[] = ['ID', 'Event', 'Period', 'Edit', 'Delete'];

  constructor(
    private updatestateService: UpdateStateService,

    private router: Router,
  ) {
    // observable for changes in structs
    this.updatestateService.UpdateStateServiceChanged.subscribe(
      message => {
        if (message == "post" || message == "update" || message == "delete") {
          this.getUpdateStates()
        }
      }
    )
  }

  ngOnInit(): void {
    this.getUpdateStates()
  }

  getUpdateStates(): void {
    if (this.ID == null) {
      this.updatestateService.getUpdateStates().subscribe(
        UpdateStates => {
          this.updatestates = UpdateStates;
        }
      )
    }
  
  }

  // newUpdateState initiate a new updatestate
  // create a new UpdateState objet
  newUpdateState() {
  }

  deleteUpdateState(updatestateID: number, updatestate: UpdateStateDB) {
    // la liste des updatestates est amputée du updatestate avant le delete afin
    // de mettre à jour l'IHM
    this.updatestates = this.updatestates.filter(h => h !== updatestate);

    this.updatestateService.deleteUpdateState(updatestateID).subscribe();
  }

  editUpdateState(updatestateID: number, updatestate: UpdateStateDB) {

  }

  // display updatestate in router
  displayUpdateStateInRouter(updatestateID: number) {
    this.router.navigate( ["updatestate-display", updatestateID])
  }

  // set editor outlet
  setEditorRouterOutlet(updatestateID: number) {
    this.router.navigate([{
      outlets: {
        editor: ["updatestate-detail", updatestateID]
      }
    }]);
  }

  // set presentation outlet
  setPresentationRouterOutlet(updatestateID: number) {
    this.router.navigate([{
      outlets: {
        presentation: ["updatestate-presentation", updatestateID]
      }
    }]);
  }
}
