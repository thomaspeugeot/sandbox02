package walk

import (
	"fmt"
	"log"
	"os"
	"path/filepath"
	"strings"

	"github.com/jinzhu/gorm"
	"github.com/thomaspeugeot/sandbox02/gongc/go/models"
)

const allModelStructFileTemplate = `// generated by genGOAllModelStruct.go
package models

{{InsertionPointForStructCreateAndDeleteFunctions}}

// swagger:ignore
type AllModelsStructCreateInterface interface {
{{InsertionPointForORMCreateCallback}}}
	
type AllModelsStructDeleteInterface interface {
{{InsertionPointForORMDeleteCallback}}}
		
// swagger:ignore
type AllModelStoreStruct struct {
{{InsertionPointForStructArrayDefinition}}	AllModelsStructCreateCallback AllModelsStructCreateInterface
	AllModelsStructDeleteCallback AllModelsStructDeleteInterface
}

// swagger:ignore
var AllModelStore AllModelStoreStruct = AllModelStoreStruct{
{{InsertionPointForStructArrayInitialisation}}}

func (allModelStoreStruct * AllModelStoreStruct) Reset() {
{{InsertionPointForStructArrayReset}}}

func (allModelStoreStruct * AllModelStoreStruct) Nil() {
{{InsertionPointForStructArrayNil}}}
`

const oneModelStructCreateAndDeleteFunction = `

// CreateORM{{Structname}} enables dynamic registration of a {{Structname}} instance
func CreateORM{{Structname}}({{Structname}} *{{Structname}}) {
	AllModelStore.{{Structname}}s = append(AllModelStore.{{Structname}}s, {{Structname}})
	if AllModelStore.AllModelsStructCreateCallback != nil {
		AllModelStore.AllModelsStructCreateCallback.CreateORM{{Structname}}({{Structname}})
	}
}


// DeleteORM{{Structname}} enables dynamic registration of a {{Structname}} instance
func DeleteORM{{Structname}}({{Structname}} *{{Structname}}) {
	for index, _{{Structname}} := range AllModelStore.{{Structname}}s {
		if _{{Structname}} == {{Structname}} {
			AllModelStore.{{Structname}}s[index] = AllModelStore.{{Structname}}s[len(AllModelStore.{{Structname}}s)-1]
			AllModelStore.{{Structname}}s = AllModelStore.{{Structname}}s[:len(AllModelStore.{{Structname}}s)-1]
		}
	}
	if AllModelStore.AllModelsStructDeleteCallback != nil {
		AllModelStore.AllModelsStructDeleteCallback.DeleteORM{{Structname}}({{Structname}})
	}
}`

const oneModelStructAppendCallback = `	CreateORM{{Structname}}({{Structname}} *{{Structname}})
`

const oneModelStructDeleteCallback = `	DeleteORM{{Structname}}({{Structname}} *{{Structname}})
`

const oneModelStructArrayDefintion = `	{{Structname}}s  []*{{Structname}}
`

const oneModelStructArrayInitialisation = `	{{Structname}}s:	make([]*{{Structname}}, 0),
`

const oneModelStructArrayReset = `	allModelStoreStruct.{{Structname}}s =	make([]*{{Structname}}, 0)
`

const oneModelStructArrayNil = `	allModelStoreStruct.{{Structname}}s = nil
`

// RemoveGoAllModelStruct generates the setup file for the gorm
func RemoveGoAllModelStruct(db *gorm.DB) {

	// relative to the models package, swith to ./controlers package
	filename := filepath.Join(RelativePkgPath, "allmodelstructs.go")

	// we should use go generate
	log.Println("removing all models struct file : " + filename)

	if err := os.Remove(filename); err != nil {
		if os.IsExist(err) {
			log.Fatalf("Unable to remove %s", filename)
		}
	}
}

// GenGoAllModelStruct generates the setup file for the gorm
func GenGoAllModelStruct(db *gorm.DB) {

	// relative to the models package, swith to ./controlers package
	filename := filepath.Join(RelativePkgPath, "allmodelstructs.go")

	// we should use go generate
	log.Println("generating all models struct file : " + filename)

	f, err := os.Create(filename)
	if err != nil {
		log.Panic(err)
	}

	// create the list of structs
	var structs []models.Struct
	db.Find(&structs)

	var insertions, res string
	res = allModelStructFileTemplate

	insertions = ""
	for _, _struct := range structs {
		insertions += strings.ReplaceAll(oneModelStructCreateAndDeleteFunction, "{{Structname}}", _struct.Name)
	}
	res = strings.ReplaceAll(res, "{{InsertionPointForStructCreateAndDeleteFunctions}}", insertions)

	insertions = ""
	for _, _struct := range structs {
		insertions += strings.ReplaceAll(oneModelStructAppendCallback, "{{Structname}}", _struct.Name)
	}
	res = strings.ReplaceAll(res, "{{InsertionPointForORMCreateCallback}}", insertions)

	insertions = ""
	for _, _struct := range structs {
		insertions += strings.ReplaceAll(oneModelStructDeleteCallback, "{{Structname}}", _struct.Name)
	}
	res = strings.ReplaceAll(res, "{{InsertionPointForORMDeleteCallback}}", insertions)

	insertions = ""
	for _, _struct := range structs {
		insertions += strings.ReplaceAll(oneModelStructArrayDefintion, "{{Structname}}", _struct.Name)
	}
	res = strings.ReplaceAll(res, "{{InsertionPointForStructArrayDefinition}}", insertions)

	insertions = ""
	for _, _struct := range structs {
		insertions += strings.ReplaceAll(oneModelStructArrayInitialisation, "{{Structname}}", _struct.Name)
	}
	res = strings.ReplaceAll(res, "{{InsertionPointForStructArrayInitialisation}}", insertions)

	insertions = ""
	for _, _struct := range structs {
		insertions += strings.ReplaceAll(oneModelStructArrayReset, "{{Structname}}", _struct.Name)
	}
	res = strings.ReplaceAll(res, "{{InsertionPointForStructArrayReset}}", insertions)

	insertions = ""
	for _, _struct := range structs {
		insertions += strings.ReplaceAll(oneModelStructArrayNil, "{{Structname}}", _struct.Name)
	}
	res = strings.ReplaceAll(res, "{{InsertionPointForStructArrayNil}}", insertions)

	res = strings.ReplaceAll(res, "{{PkgPathRoot}}", strings.ReplaceAll(PkgGoPath, "/models", ""))

	fmt.Fprintf(f, "%s", res)

	defer f.Close()
}
