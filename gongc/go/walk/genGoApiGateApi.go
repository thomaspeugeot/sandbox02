package walk

import (
	"fmt"
	"log"
	"os"
	"path/filepath"
	"strings"

	"github.com/jinzhu/gorm"
	"github.com/thomaspeugeot/sandbox02/gongc/go/models"
)

const apiGateApiTemplate = `// generated by genGoApiGateApi.go
package api

import (
	"{{PkgPathRoot}}/models"
)

// APIGateStruct is the implementation of the APIGateImplCallback interface
type APIGateStruct struct {{{InsertionPoint_MapsAndIDAP_Declation}}}

// APIGate is the singloton gate in the "api" namespace
var APIGate APIGateStruct = APIGateStruct{{{InsertionPoint_Maps_Initialisation}}}
`

const MapsAndIDAPI_Declation_Template = `
	Map{{Structname}}IDAPI    map[*models.{{Structname}}]uint // map of pointers of models instances to ID in the "api" namespace
	MapIDAPI{{Structname}}    map[uint]*models.{{Structname}} // map of ID in the "api" namespace to ID in the "models" namespace
	Map{{Structname}}APIIDAPI map[*{{Structname}}API]uint     // map of pointers of models instances to ID in the "api" namespace
	MapIDAPI{{Structname}}API map[uint]*{{Structname}}API     // map of ID in the "api" namespace to ID in the "models" namespace

	// last{{Structname}}APIID is the last unique identier that has been used.
	// It is initialized at 0, therefore IDAPI starts at 1
	last{{Structname}}APIID uint
`

const Maps_Initialisation_Template = `
	Map{{Structname}}IDAPI:    make(map[*models.{{Structname}}]uint, 0),
	MapIDAPI{{Structname}}:    make(map[uint]*models.{{Structname}}, 0),
	Map{{Structname}}APIIDAPI: make(map[*{{Structname}}API]uint, 0),
	MapIDAPI{{Structname}}API: make(map[uint]*{{Structname}}API, 0),
`

// GenGoApiGateApi generates the setup file for the ApiGateStruct in the "api" namespace
func GenGoApiGateApi(db *gorm.DB) {

	// relative to the models package, swith to ./api package
	filename := filepath.Join(ApiPkgGenPath, "apigate.go")

	f, err := os.Create(filename)
	if err != nil {
		log.Panic(err)
	}

	// create the list of structs
	var structs []models.Struct
	db.Find(&structs)

	var insertions, res string
	res = apiGateApiTemplate

	insertions = ""
	for _, _struct := range structs {
		insertions += replace2(MapsAndIDAPI_Declation_Template,
			"{{Structname}}", _struct.Name,
			"{{structname}}", strings.ToLower(_struct.Name))
	}
	res = strings.ReplaceAll(res, "{{InsertionPoint_MapsAndIDAP_Declation}}", insertions)

	insertions = ""
	for _, _struct := range structs {
		insertions += replace2(Maps_Initialisation_Template,
			"{{Structname}}", _struct.Name,
			"{{structname}}", strings.ToLower(_struct.Name))
	}
	res = strings.ReplaceAll(res, "{{InsertionPoint_Maps_Initialisation}}", insertions)

	res = strings.ReplaceAll(res, "{{PkgPathRoot}}", strings.ReplaceAll(PkgGoPath, "/models", ""))
	fmt.Fprintf(f, "%s", res)

	defer f.Close()
}
