package walk

import (
	"fmt"
	"log"
	"sort"
	"strings"

	"github.com/jinzhu/gorm"
	"github.com/thomaspeugeot/sandbox02/gongc/go/models"
)

// NgDetailTemplateTS ...
const NgDetailTemplateTS = `// generated by genNgDetail.go
import { Component, OnInit } from '@angular/core';
import {FormBuilder, FormControl, FormGroup} from '@angular/forms';

import { {{Structname}}DB } from '../{{structname}}-db'
import { {{Structname}}Service } from '../{{structname}}.service'

{{AssociationStructImportsTS}}

import { Router, RouterState, ActivatedRoute } from '@angular/router';

@Component({
  selector: 'app-{{structname}}-detail',
  templateUrl: './{{structname}}-detail.component.html',
  styleUrls: ['./{{structname}}-detail.component.css']
})
export class {{Structname}}DetailComponent implements OnInit {

	// the {{Structname}}DB of interest
	{{structname}}: {{Structname}}DB;
{{DeclsForFieldPointerToAssStructTS}}{{AssociationStructDeclarationSlicesTS}}{{BooleanFieldFormControlDeclarations}}
	constructor(
		private {{structname}}Service: {{Structname}}Service,
{{AssociationStructDeclarationServicesTS}}
		private route: ActivatedRoute,
		private router: Router,
	) {
		// https://stackoverflow.com/questions/54627478/angular-7-routing-to-same-component-but-different-param-not-working
		// this is for routerLink on same component when only queryParameter changes
		this.router.routeReuseStrategy.shouldReuseRoute = function () {
		return false;
		};
  }

  ngOnInit(): void {
	this.get{{Structname}}();
{{AssociationStructGetCallsTS}}
  }

  get{{Structname}}(): void {
		const id = +this.route.snapshot.paramMap.get('id');
		this.{{structname}}Service.get{{Structname}}(id)
		.subscribe( 
			{{structname}} => 
			{ 
					this.{{structname}} = {{structname}}
{{BooleanFieldFormControlInitialisations}}
        }
  	);
  }
{{AssociationStructGetDefinitionsTS}}

  save(): void {
	const id = +this.route.snapshot.paramMap.get('id');
{{BooleanFieldFormRecoveries}}
{{NamesUpdatesOfAssociatedStructTS}}
{{UpdatesForFieldPointerToAssStructTS}}

	this.{{structname}}Service.update{{Structname}}( this.{{structname}} )
    .subscribe({{structname}} => {
		this.{{structname}}Service.{{Structname}}ServiceChanged.next("update")

    	console.log("{{structname}} saved")
    });
  }
}
`

// NgDetailTemplateHTML is used for the generation
const NgDetailTemplateHTML = `<div *ngIf="{{structname}}">
	<h3>{{Structname}} details</h3>
{{NgEditableBasicInputFormHTML}}
{{BooleanFieldFormsHTML}}
{{AssociationStructFormsHTML}}
	<button mat-raised-button 
	(click)="save()">
	Save
	</button>
</div>
`

// NgDetailTemplateCSS ...
const NgDetailTemplateCSS = `
.mat-form {
  min-width: 150px;
  max-width: 500px;
  width: 100%;
}

.mat-full-width {
  width: 100%;
}
`

// GenNgDetail generates the ngdetail on the front
func GenNgDetail(db *gorm.DB) {

	// create the list of structs
	var structs []models.Struct
	db.Find(&structs)

	// generates one detail compenent per struct
	for _, _struct := range structs {

		structName := strings.ToLower(_struct.Name)
		stringTS := NgDetailTemplateTS
		stringHTML := NgDetailTemplateHTML

		// get fields
		var fields models.Fields
		query := db.Model(&_struct).Related(&fields)
		if query.Error != nil {
			log.Fatal(query.Error.Error())
		}
		sort.Slice(fields[:], func(i, j int) bool {
			return fields[i].Name < fields[j].Name
		})

		genEditableBasic(db, fields, _struct, &stringTS, &stringHTML)
		// genEditableTime(db, fields, _struct, &stringTS, &stringHTML)
		genEditablePointerToBool(db, fields, _struct, &stringTS, &stringHTML)
		genEditableReadablePointerToStruct(db, fields, _struct, &stringTS, &stringHTML, Editable)

		stringTS = strings.ReplaceAll(stringTS, "{{Structname}}", _struct.Name)
		stringTS = strings.ReplaceAll(stringTS, "{{structname}}", structName)
		stringTS = strings.ReplaceAll(stringTS, "{{PkgName}}", PkgName)

		fileTS, fileHTML, fileCSS := createDirAndTreeFilesInNgTargetPath(_struct.Name, "-detail")
		defer fileTS.Close()
		defer fileHTML.Close()
		defer fileCSS.Close()

		fmt.Fprintf(fileTS, "%s", stringTS)

		stringHTML = strings.ReplaceAll(stringHTML, "{{Structname}}", _struct.Name)
		stringHTML = strings.ReplaceAll(stringHTML, "{{structname}}", structName)

		fmt.Fprintf(fileHTML, "%s", stringHTML)

		stringCSS := strings.ReplaceAll(NgDetailTemplateCSS, "{{Structname}}", _struct.Name)
		stringCSS = strings.ReplaceAll(stringCSS, "{{structname}}", structName)

		fmt.Fprintf(fileCSS, "%s", stringCSS)

	}
}
