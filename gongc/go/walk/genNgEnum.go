package walk

import (
	"fmt"
	"log"
	"sort"
	"strings"

	"github.com/jinzhu/gorm"
	"github.com/thomaspeugeot/sandbox02/gongc/go/models"
)

const templateNgEnum = `// generated by GenNgEnum.go
export enum {{Enumname}} {
{{insertionForConsts}}}`

const templateNgEnumConst = `	{{ConstName}} = {{ConstValue}},
`

// GenNgEnum generates the Ng Enum
func GenNgEnum(db *gorm.DB) {

	// create the list of enums
	var enums []models.EnumDB
	if q := db.Find(&enums); q.Error != nil {
		log.Printf("No enums found " + q.Error.Error())
	}

	// generates one detail compenent per enum
	for _, _enum := range enums {

		// get consts
		var consts models.Consts
		var targetConst models.Const
		targetConst.EnumID = _enum.ID
		if query := db.Where(&targetConst).Find(&consts); query.Error != nil {
			log.Fatal(query.Error.Error())
		}
		sort.Slice(consts[:], func(i, j int) bool {
			return consts[i].Name < consts[j].Name
		})

		res := ""

		for _, _const := range consts {
			res += replace2(templateNgEnumConst,
				"{{ConstName}}", _const.Name,
				"{{ConstValue}}", _const.Value)
		}

		stringTS := templateNgEnum
		stringTS = strings.ReplaceAll(stringTS, "{{insertionForConsts}}", res)
		stringTS = strings.ReplaceAll(stringTS, "{{Enumname}}", _enum.Name)
		file := createSingleFileInNgTargetPath(fmt.Sprintf("%s.ts", _enum.Name))
		defer file.Close()
		fmt.Fprint(file, stringTS)
	}
}
