package walk

import (
	"fmt"
	"log"
	"os"
	"path/filepath"
	"strings"

	"github.com/jinzhu/gorm"
	"github.com/thomaspeugeot/sandbox02/gongc/go/models"
)

const template = `// generated by genORMSetup.go
package orm

import (
	"fmt"

	"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/sqlite" // justificiation for blank import : initialisaion of the sqlite driver
)

// genQuery return the name of the column
func genQuery( columnName string) string {
	return fmt.Sprintf("%s = ?", columnName)
}

// SetupModels connects to the sqlite database
func SetupModels(logMode bool, filepath string) *gorm.DB {
	db, err := gorm.Open("sqlite3", filepath)

	if err != nil {
		panic("Failed to connect to database!")
	}

	db.LogMode(logMode)

	AutoMigrate(db)

	return db
}

// AutoMigrate migrates db with with orm Struct
func AutoMigrate(db *gorm.DB) {
	db.AutoMigrate( {{LISTOFSTRUCT}})
}

func ResetDB(db *gorm.DB) {
{{Deletes}}}
`

// GenORMSetup generates the setup file for the gorm
func GenORMSetup(db *gorm.DB) {

	// relative to the models package, swith to ../controlers package
	filename := filepath.Join(OrmPkgGenPath, "setup.go")

	// we should use go generate
	log.Println("generating orm setup file : " + filename)

	f, err := os.Create(filename)
	if err != nil {
		log.Panic(err)
	}

	// create the list of structs
	var structs []models.Struct
	db.Find(&structs)

	LISTOFSTRUCT := "\n"

	deleteCalls := ""

	for idx, _struct := range structs {
		if idx != 0 {
			LISTOFSTRUCT += ",\n"
		}
		LISTOFSTRUCT += fmt.Sprintf("\t\t&%sDB{}", _struct.Name)

		deleteCalls += fmt.Sprintf("\tdb.Delete(&%sDB{})\n", _struct.Name)

		fmt.Printf("		orm.LoadDB%s(%ss, db)\n", _struct.Name, _struct.Name)
	}
	res := strings.ReplaceAll(template, "{{LISTOFSTRUCT}}", LISTOFSTRUCT)

	res = strings.ReplaceAll(res, "{{Deletes}}", deleteCalls)

	fmt.Fprintf(f, "%s", res)

	defer f.Close()
}
