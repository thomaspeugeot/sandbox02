// generated by genController.go
package controllers

import (
	"net/http"

	"github.com/thomaspeugeot/metabaron/libs/gorgo/go/models"
	"github.com/thomaspeugeot/metabaron/libs/gorgo/go/orm"

	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"
)

// FieldSingloton is the type of the singloton of the controllers package
// this singloton allows for the attachment of callbacks to controllers function
type FieldSingloton struct {
	Callback FieldCallbackInterface
}

// FieldCallbackInterface is the interface that must be supported 
// by the Struct that is attached to the singloton
type FieldCallbackInterface interface {
	PostField(field *models.Field)
}

// FieldSinglotonID is the singloton variable
var FieldSinglotonID FieldSingloton

// An FieldID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getField updateField deleteField getFieldClassshapesViaFields
type FieldID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// FieldInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postField updateField
type FieldInput struct {
	// The Field to submit or modify
	// in: body
	Field *orm.FieldAPI
}

// GetFields
//
// swagger:route GET /fields fields getFields
// 
// Get all fields
//
// Responses:
//    default: genericError
//        200: fieldDBsResponse
func GetFields(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	var fields []orm.FieldDB
	query := db.Find(&fields)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	c.JSON(http.StatusOK, fields)
}

// PostField
//
// swagger:route POST /fields fields postField
// 
// Creates a field
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: fieldDBResponse
func PostField(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Validate input
	var input orm.FieldAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create field
	fieldDB := orm.FieldDB{}
	fieldDB.FieldAPI = input

	query := db.Create(&fieldDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	if FieldSinglotonID.Callback != nil {
		FieldSinglotonID.Callback.PostField(&(fieldDB.Field))
	}

	c.JSON(http.StatusOK, fieldDB)
}

// GetField
//
// swagger:route GET /fields/{ID} fields getField
//
// Gets the details for a field.
//
// Responses:
//    default: genericError
//        200: fieldDBResponse
func GetField(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get field in DB
	var field orm.FieldDB
	if err := db.First(&field, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	c.JSON(http.StatusOK, field)
}

// UpdateField
// 
// swagger:route PATCH /fields/{ID} fields updateField
//
// Update a field
//
// Responses:
//    default: genericError
//        200: fieldDBResponse
func UpdateField(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var fieldDB orm.FieldDB

	// fetch the field
	query := db.First(&fieldDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.FieldAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update 
	query = db.Model(&fieldDB).Updates(input)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}	

	// return status OK with the marshalling of the the fieldDB
	c.JSON(http.StatusOK, fieldDB)
}

// DeleteField
//
// swagger:route DELETE /fields/{ID} fields deleteField
//
// Delete a field
//
// Responses:
//    default: genericError
func DeleteField(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var fieldDB orm.FieldDB
	if err := db.First(&fieldDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&fieldDB)

	c.JSON(http.StatusOK, gin.H{"data": true})
}


// GetFieldClassshapesViaFields swagger:route GET /fields/{ID}/classshapesviafields fields getFieldClassshapesViaFields
//
// Gets classshapes of field via field Fields of Classshape.
//
// Responses:
//    default: genericError
//        200: classshapeDBsResponse
func GetFieldClassshapesViaFields(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get field
	var field orm.FieldDB
	if err := db.First(&field, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get classshapes
	var classshapeDBs orm.ClassshapeDBs
	columnName := gorm.ToColumnName("FieldsID")
	query := db.Where( genQuery(columnName), field.ID).Find(&classshapeDBs)

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	c.JSON(http.StatusOK, classshapeDBs)
}

