// generated by genController.go
package controllers

import (
	"net/http"

	"github.com/thomaspeugeot/sandbox02/gorgo/go/models"
	"github.com/thomaspeugeot/sandbox02/gorgo/go/orm"

	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"
)

// LinkSingloton is the type of the singloton of the controllers package
// this singloton allows for the attachment of callbacks to controllers function
type LinkSingloton struct {
	Callback LinkCallbackInterface
}

// LinkCallbackInterface is the interface that must be supported
// by the Struct that is attached to the singloton
type LinkCallbackInterface interface {
	PostLink(link *models.Link)
}

// LinkSinglotonID is the singloton variable
var LinkSinglotonID LinkSingloton

// An LinkID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getLink updateLink deleteLink getLinkMiddlevertice getLinkClassshapesViaLinks
type LinkID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// LinkInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postLink updateLink
type LinkInput struct {
	// The Link to submit or modify
	// in: body
	Link *orm.LinkAPI
}

// GetLinks
//
// swagger:route GET /links links getLinks
//
// Get all links
//
// Responses:
//    default: genericError
//        200: linkDBsResponse
func GetLinks(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	var links []orm.LinkDB
	query := db.Find(&links)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	c.JSON(http.StatusOK, links)
}

// PostLink
//
// swagger:route POST /links links postLink
//
// Creates a link
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: linkDBResponse
func PostLink(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Validate input
	var input orm.LinkAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create link
	linkDB := orm.LinkDB{}
	linkDB.LinkAPI = input

	query := db.Create(&linkDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	if LinkSinglotonID.Callback != nil {
		LinkSinglotonID.Callback.PostLink(&(linkDB.Link))
	}

	c.JSON(http.StatusOK, linkDB)
}

// GetLink
//
// swagger:route GET /links/{ID} links getLink
//
// Gets the details for a link.
//
// Responses:
//    default: genericError
//        200: linkDBResponse
func GetLink(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get link in DB
	var link orm.LinkDB
	if err := db.First(&link, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	c.JSON(http.StatusOK, link)
}

// UpdateLink
//
// swagger:route PATCH /links/{ID} links updateLink
//
// Update a link
//
// Responses:
//    default: genericError
//        200: linkDBResponse
func UpdateLink(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var linkDB orm.LinkDB

	// fetch the link
	query := db.First(&linkDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.LinkAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	query = db.Model(&linkDB).Updates(input)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// return status OK with the marshalling of the the linkDB
	c.JSON(http.StatusOK, linkDB)
}

// DeleteLink
//
// swagger:route DELETE /links/{ID} links deleteLink
//
// Delete a link
//
// Responses:
//    default: genericError
func DeleteLink(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var linkDB orm.LinkDB
	if err := db.First(&linkDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&linkDB)

	c.JSON(http.StatusOK, gin.H{"data": true})
}

// GetLinkMiddlevertice swagger:route GET /links/{ID}/middlevertice links getLinkMiddlevertice
//
// Gets middlevertice of a link.
//
// Responses:
//    default: genericError
//        200: verticeDBResponse
func GetLinkMiddlevertice(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get link in DB
	var link orm.LinkDB
	if err := db.First(&link, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Get vertice in DB
	var verticeMiddlevertice orm.VerticeDB
	if err := db.First(&verticeMiddlevertice, *link.MiddleverticeID).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	c.JSON(http.StatusOK, verticeMiddlevertice)
}

// GetLinkClassshapesViaLinks swagger:route GET /links/{ID}/classshapesvialinks links getLinkClassshapesViaLinks
//
// Gets classshapes of link via field Links of Classshape.
//
// Responses:
//    default: genericError
//        200: classshapeDBsResponse
func GetLinkClassshapesViaLinks(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get link
	var link orm.LinkDB
	if err := db.First(&link, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get classshapes
	var classshapeDBs orm.ClassshapeDBs
	columnName := gorm.ToColumnName("LinksID")
	query := db.Where(genQuery(columnName), link.ID).Find(&classshapeDBs)

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	c.JSON(http.StatusOK, classshapeDBs)
}
