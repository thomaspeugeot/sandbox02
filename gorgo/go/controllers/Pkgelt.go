// generated by genController.go
package controllers

import (
	"net/http"

	"github.com/thomaspeugeot/metabaron/libs/gorgo/go/models"
	"github.com/thomaspeugeot/metabaron/libs/gorgo/go/orm"

	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"
)

// PkgeltSingloton is the type of the singloton of the controllers package
// this singloton allows for the attachment of callbacks to controllers function
type PkgeltSingloton struct {
	Callback PkgeltCallbackInterface
}

// PkgeltCallbackInterface is the interface that must be supported 
// by the Struct that is attached to the singloton
type PkgeltCallbackInterface interface {
	PostPkgelt(pkgelt *models.Pkgelt)
}

// PkgeltSinglotonID is the singloton variable
var PkgeltSinglotonID PkgeltSingloton

// An PkgeltID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getPkgelt updatePkgelt deletePkgelt
type PkgeltID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// PkgeltInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postPkgelt updatePkgelt
type PkgeltInput struct {
	// The Pkgelt to submit or modify
	// in: body
	Pkgelt *orm.PkgeltAPI
}

// GetPkgelts
//
// swagger:route GET /pkgelts pkgelts getPkgelts
// 
// Get all pkgelts
//
// Responses:
//    default: genericError
//        200: pkgeltDBsResponse
func GetPkgelts(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	var pkgelts []orm.PkgeltDB
	query := db.Find(&pkgelts)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	c.JSON(http.StatusOK, pkgelts)
}

// PostPkgelt
//
// swagger:route POST /pkgelts pkgelts postPkgelt
// 
// Creates a pkgelt
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: pkgeltDBResponse
func PostPkgelt(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Validate input
	var input orm.PkgeltAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create pkgelt
	pkgeltDB := orm.PkgeltDB{}
	pkgeltDB.PkgeltAPI = input

	query := db.Create(&pkgeltDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	if PkgeltSinglotonID.Callback != nil {
		PkgeltSinglotonID.Callback.PostPkgelt(&(pkgeltDB.Pkgelt))
	}

	c.JSON(http.StatusOK, pkgeltDB)
}

// GetPkgelt
//
// swagger:route GET /pkgelts/{ID} pkgelts getPkgelt
//
// Gets the details for a pkgelt.
//
// Responses:
//    default: genericError
//        200: pkgeltDBResponse
func GetPkgelt(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get pkgelt in DB
	var pkgelt orm.PkgeltDB
	if err := db.First(&pkgelt, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	c.JSON(http.StatusOK, pkgelt)
}

// UpdatePkgelt
// 
// swagger:route PATCH /pkgelts/{ID} pkgelts updatePkgelt
//
// Update a pkgelt
//
// Responses:
//    default: genericError
//        200: pkgeltDBResponse
func UpdatePkgelt(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var pkgeltDB orm.PkgeltDB

	// fetch the pkgelt
	query := db.First(&pkgeltDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.PkgeltAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update 
	query = db.Model(&pkgeltDB).Updates(input)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}	

	// return status OK with the marshalling of the the pkgeltDB
	c.JSON(http.StatusOK, pkgeltDB)
}

// DeletePkgelt
//
// swagger:route DELETE /pkgelts/{ID} pkgelts deletePkgelt
//
// Delete a pkgelt
//
// Responses:
//    default: genericError
func DeletePkgelt(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var pkgeltDB orm.PkgeltDB
	if err := db.First(&pkgeltDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&pkgeltDB)

	c.JSON(http.StatusOK, gin.H{"data": true})
}


