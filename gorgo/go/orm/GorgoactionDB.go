// generated by genORMModelDB.go
package orm

import (
	"errors"
	"fmt"

	"github.com/jinzhu/gorm"
	"github.com/thomaspeugeot/sandbox02/gorgo/go/models"
)

// GorgoactionAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model gorgoactionAPI
type GorgoactionAPI struct {
	models.Gorgoaction

	// association fields

}

// GorgoactionDB describes a gorgoaction in the database
//
// It incorporates all fields : from the model, from the generated field for the API and the GORM ID
//
// swagger:model gorgoactionDB
type GorgoactionDB struct {
	gorm.Model

	GorgoactionAPI
}

// GorgoactionDBs arrays gorgoactionDBs
// swagger:response gorgoactionDBsResponse
type GorgoactionDBs []GorgoactionDB

// GorgoactionDBResponse provides response
// swagger:response gorgoactionDBResponse
type GorgoactionDBResponse struct {
	GorgoactionDB
}

// ModelToORMGorgoactionTranslate is a translation function from models object to ORM objects
func ModelToORMGorgoactionTranslate(
	translationImpact TranslationImpact,
	db *gorm.DB) (Error error) {

	if translationImpact == CreateMode {

		// check that gorgoactionStore is nil as well as gorgoactionDBs
		if map_GorgoactionDBID_GorgoactionPtr != nil {
			err := errors.New("In CreateMode translation, map_GorgoactionDBID_GorgoactionPtr should be nil")
			return err
		}

		if map_GorgoactionDBID_GorgoactionDB != nil {
			err := errors.New("In CreateMode translation, map_GorgoactionDBID_GorgoactionDB should be nil")
			return err
		}

		if map_GorgoactionPtr_GorgoactionDBID != nil {
			err := errors.New("In CreateMode translation, map_GorgoactionPtr_GorgoactionDBID should be nil")
			return err
		}

		tmp := make(map[uint]*models.Gorgoaction, 0)
		map_GorgoactionDBID_GorgoactionPtr = &tmp

		tmpDB := make(map[uint]*GorgoactionDB, 0)
		map_GorgoactionDBID_GorgoactionDB = &tmpDB

		tmpID := make(map[*models.Gorgoaction]uint, 0)
		map_GorgoactionPtr_GorgoactionDBID = &tmpID

		for _, gorgoaction := range models.AllModelStore.Gorgoactions {

			// initiate gorgoaction
			var gorgoactionDB GorgoactionDB
			gorgoactionDB.Gorgoaction = *gorgoaction

			query := db.Create(&gorgoactionDB)
			if query.Error != nil {
				return query.Error
			}

			// update stores
			(*map_GorgoactionPtr_GorgoactionDBID)[gorgoaction] = gorgoactionDB.ID
			(*map_GorgoactionDBID_GorgoactionPtr)[gorgoactionDB.ID] = gorgoaction
			(*map_GorgoactionDBID_GorgoactionDB)[gorgoactionDB.ID] = &gorgoactionDB
		}
	} else { // UpdateMode, update IDs of Pointer Fields of ORM object

		// check that gorgoactionStore is not nil
		if map_GorgoactionDBID_GorgoactionPtr == nil {
			err := errors.New("In UpdateMode translation, gorgoactionStore should not be nil")
			return err
		}

		if map_GorgoactionDBID_GorgoactionDB == nil {
			err := errors.New("In UpdateMode translation, gorgoactionStore should not be nil")
			return err
		}

		// update fields of gorgoactionDB with fields of gorgoaction
		for _, gorgoaction := range models.AllModelStore.Gorgoactions {
			gorgoactionDBID := (*map_GorgoactionPtr_GorgoactionDBID)[gorgoaction]
			gorgoactionDB := (*map_GorgoactionDBID_GorgoactionDB)[gorgoactionDBID]

			gorgoactionDB.Gorgoaction = *gorgoaction
		}

		// parse model objects ot update associations
		for idx, gorgoaction := range *map_GorgoactionDBID_GorgoactionPtr {

			// fetch matching gorgoactionDB
			if gorgoactionDB, ok := (*map_GorgoactionDBID_GorgoactionDB)[idx]; ok {
				// set {{Fieldname}}ID

				query := db.Save(&gorgoactionDB)
				if query.Error != nil {
					return query.Error
				}

			} else {
				err := errors.New(
					fmt.Sprintf("In UpdateMode translation, gorgoactionStore should not be nil %v %v",
						gorgoactionDB, gorgoaction))
				return err
			}
		}
	}
	return nil
}

// stores GorgoactionDB according to their gorm ID
var map_GorgoactionDBID_GorgoactionDB *map[uint]*GorgoactionDB

// stores GorgoactionDB ID according to Gorgoaction address
var map_GorgoactionPtr_GorgoactionDBID *map[*models.Gorgoaction]uint

// stores Gorgoaction according to their gorm ID
var map_GorgoactionDBID_GorgoactionPtr *map[uint]*models.Gorgoaction

// ORMToModelGorgoactionTranslate is a translation function from ORM object to models objects
// This function used the uint ID of the ORM object to create or update (according to translationImpact)
// maps of respectively ORM and models objects
//
// In create mode,
func ORMToModelGorgoactionTranslate(
	translationImpact TranslationImpact,
	db *gorm.DB) (Error error) {

	if translationImpact == CreateMode {

		// check that gorgoactionStores are nil

		if map_GorgoactionDBID_GorgoactionPtr != nil {
			err := errors.New("In CreateMode translation, Parameters gorgoactionStore should be nil")
			return err
		}

		if map_GorgoactionDBID_GorgoactionDB != nil {
			err := errors.New("In CreateMode translation, parameters GorgoactionDBStore should be nil")
			return err
		}

		// init stores
		tmp := make(map[uint]*models.Gorgoaction, 0)
		map_GorgoactionDBID_GorgoactionPtr = &tmp

		tmpDB := make(map[uint]*GorgoactionDB, 0)
		map_GorgoactionDBID_GorgoactionDB = &tmpDB

		tmpID := make(map[*models.Gorgoaction]uint, 0)
		map_GorgoactionPtr_GorgoactionDBID = &tmpID

		models.AllModelStore.Gorgoactions = make([]*models.Gorgoaction, 0)

		gorgoactionDBArray := make([]GorgoactionDB, 0)
		query := db.Find(&gorgoactionDBArray)
		if query.Error != nil {
			return query.Error
		}

		// copy orm objects to the two stores
		for _, gorgoactionDB := range gorgoactionDBArray {

			// create entries in the tree maps.
			gorgoaction := gorgoactionDB.Gorgoaction
			(*map_GorgoactionDBID_GorgoactionPtr)[gorgoactionDB.ID] = &gorgoaction

			(*map_GorgoactionPtr_GorgoactionDBID)[&gorgoaction] = gorgoactionDB.ID

			gorgoactionDBCopy := gorgoactionDB
			(*map_GorgoactionDBID_GorgoactionDB)[gorgoactionDB.ID] = &gorgoactionDBCopy

			// append model store with the new element
			models.AllModelStore.Gorgoactions = append(models.AllModelStore.Gorgoactions, &gorgoaction)
		}
	} else { // UpdateMode
		// for later, update of the data field

		// check that gorgoactionStore is not nil
		if map_GorgoactionDBID_GorgoactionPtr == nil {
			err := errors.New("In UpdateMode translation, gorgoactionStore should not be nil")
			return err
		}

		if map_GorgoactionDBID_GorgoactionDB == nil {
			err := errors.New("In UpdateMode translation, gorgoactionStore should not be nil")
			return err
		}

		// update fields of gorgoactionDB with fields of gorgoaction
		for _, gorgoaction := range models.AllModelStore.Gorgoactions {
			gorgoactionDBID := (*map_GorgoactionPtr_GorgoactionDBID)[gorgoaction]
			gorgoactionDB := (*map_GorgoactionDBID_GorgoactionDB)[gorgoactionDBID]

			*gorgoaction = gorgoactionDB.Gorgoaction
		}

		// parse all DB instance and update all pointer fields of the translated models instance
		for _, gorgoactionDB := range *map_GorgoactionDBID_GorgoactionDB {
			gorgoaction := (*map_GorgoactionDBID_GorgoactionPtr)[gorgoactionDB.ID]
			if gorgoaction == nil {
				err := errors.New("cannot find translated instance in models store")
				return err
			}

		}
	}

	return nil
}

func (allORMStoreStruct *AllORMStoreStruct) CreateORMGorgoaction(gorgoaction *models.Gorgoaction) {

	CreateORMGorgoaction(allORMStoreStruct.db, gorgoaction)
}

// CreateORMGorgoaction creates ORM{{Strucname}} in DB from gorgoaction
func CreateORMGorgoaction(
	db *gorm.DB,
	gorgoaction *models.Gorgoaction) (Error error) {

	// initiate gorgoaction
	var gorgoactionDB GorgoactionDB
	gorgoactionDB.Gorgoaction = *gorgoaction

	query := db.Create(&gorgoactionDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*map_GorgoactionPtr_GorgoactionDBID)[gorgoaction] = gorgoactionDB.ID
	(*map_GorgoactionDBID_GorgoactionPtr)[gorgoactionDB.ID] = gorgoaction
	(*map_GorgoactionDBID_GorgoactionDB)[gorgoactionDB.ID] = &gorgoactionDB

	return
}

func (allORMStoreStruct *AllORMStoreStruct) DeleteORMGorgoaction(gorgoaction *models.Gorgoaction) {

	DeleteORMGorgoaction(allORMStoreStruct.db, gorgoaction)
}

func DeleteORMGorgoaction(
	db *gorm.DB,
	gorgoaction *models.Gorgoaction) (Error error) {

	gorgoactionDBID := (*map_GorgoactionPtr_GorgoactionDBID)[gorgoaction]
	gorgoactionDB := (*map_GorgoactionDBID_GorgoactionDB)[gorgoactionDBID]

	query := db.Unscoped().Delete(&gorgoactionDB)
	if query.Error != nil {
		return query.Error
	}

	delete(*map_GorgoactionPtr_GorgoactionDBID, gorgoaction)
	delete(*map_GorgoactionDBID_GorgoactionPtr, gorgoactionDB.ID)
	delete(*map_GorgoactionDBID_GorgoactionDB, gorgoactionDBID)

	return
}
