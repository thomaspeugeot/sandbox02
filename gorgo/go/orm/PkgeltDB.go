// generated by genORMModelDB.go
package orm

import (
	
	"errors"
	"fmt"

	"github.com/jinzhu/gorm"
	"github.com/thomaspeugeot/metabaron/libs/gorgo/go/models"
)

// PkgeltAPI is the input in POST API
// 
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model pkgeltAPI
type PkgeltAPI struct {

	models.Pkgelt

	// association fields
	
}

// PkgeltDB describes a pkgelt in the database
//
// It incorporates all fields : from the model, from the generated field for the API and the GORM ID
//
// swagger:model pkgeltDB
type PkgeltDB struct {
	gorm.Model

	PkgeltAPI
}

// PkgeltDBs arrays pkgeltDBs
// swagger:response pkgeltDBsResponse
type PkgeltDBs []PkgeltDB

// PkgeltDBResponse provides response
// swagger:response pkgeltDBResponse
type PkgeltDBResponse struct {
	PkgeltDB
}

// ModelToORMPkgeltTranslate is a translation function from models object to ORM objects
func ModelToORMPkgeltTranslate(
	translationImpact TranslationImpact,
	db *gorm.DB) (Error error) {

	if translationImpact == CreateMode {

		// check that pkgeltStore is nil as well as pkgeltDBs
		if map_PkgeltDBID_PkgeltPtr != nil {
			err := errors.New("In CreateMode translation, map_PkgeltDBID_PkgeltPtr should be nil")
			return err
		}

		if map_PkgeltDBID_PkgeltDB != nil {
			err := errors.New("In CreateMode translation, map_PkgeltDBID_PkgeltDB should be nil")
			return err
		}

		if map_PkgeltPtr_PkgeltDBID != nil {
			err := errors.New("In CreateMode translation, map_PkgeltPtr_PkgeltDBID should be nil")
			return err
		}

		tmp := make(map[uint]*models.Pkgelt, 0)
		map_PkgeltDBID_PkgeltPtr = &tmp

		tmpDB := make(map[uint]*PkgeltDB, 0)
		map_PkgeltDBID_PkgeltDB = &tmpDB

		tmpID := make(map[*models.Pkgelt]uint, 0)
		map_PkgeltPtr_PkgeltDBID = &tmpID

		for _, pkgelt := range models.AllModelStore.Pkgelts {

			// initiate pkgelt
			var pkgeltDB PkgeltDB
			pkgeltDB.Pkgelt = *pkgelt

			query := db.Create(&pkgeltDB)
			if query.Error != nil {
				return query.Error
			}

			// update stores
			(*map_PkgeltPtr_PkgeltDBID)[pkgelt] = pkgeltDB.ID
			(*map_PkgeltDBID_PkgeltPtr)[pkgeltDB.ID] = pkgelt
			(*map_PkgeltDBID_PkgeltDB)[pkgeltDB.ID] = &pkgeltDB
		}
	} else { // UpdateMode, update IDs of Pointer Fields of ORM object

		// check that pkgeltStore is not nil
		if map_PkgeltDBID_PkgeltPtr == nil {
			err := errors.New("In UpdateMode translation, pkgeltStore should not be nil")
			return err
		}

		if map_PkgeltDBID_PkgeltDB == nil {
			err := errors.New("In UpdateMode translation, pkgeltStore should not be nil")
			return err
		}

		// update fields of pkgeltDB with fields of pkgelt
		for _, pkgelt := range models.AllModelStore.Pkgelts {
			pkgeltDBID := (*map_PkgeltPtr_PkgeltDBID)[pkgelt]
			pkgeltDB := (*map_PkgeltDBID_PkgeltDB)[pkgeltDBID]

			pkgeltDB.Pkgelt = *pkgelt
		}

		// parse model objects ot update associations
		for idx, pkgelt := range *map_PkgeltDBID_PkgeltPtr {

			// fetch matching pkgeltDB
			if pkgeltDB, ok := (*map_PkgeltDBID_PkgeltDB)[idx]; ok {
				// set {{Fieldname}}ID


				// set ClassdiagramsIDs reverse pointer to Classdiagram
				for _, Classdiagram := range pkgelt.Classdiagrams {
					if ClassdiagramDBID, ok := (*map_ClassdiagramPtr_ClassdiagramDBID)[Classdiagram]; ok {
						if ClassdiagramDB, ok := (*map_ClassdiagramDBID_ClassdiagramDB)[ClassdiagramDBID]; ok {
							ClassdiagramDB.Pkgelt_ClassdiagramsDBID = pkgeltDB.ID
							if q := db.Save(&ClassdiagramDB); q.Error != nil {
								return q.Error
							}
						}
					}
				}

				// set UmlscsIDs reverse pointer to Umlsc
				for _, Umlsc := range pkgelt.Umlscs {
					if UmlscDBID, ok := (*map_UmlscPtr_UmlscDBID)[Umlsc]; ok {
						if UmlscDB, ok := (*map_UmlscDBID_UmlscDB)[UmlscDBID]; ok {
							UmlscDB.Pkgelt_UmlscsDBID = pkgeltDB.ID
							if q := db.Save(&UmlscDB); q.Error != nil {
								return q.Error
							}
						}
					}
				}


				query := db.Save(&pkgeltDB)
				if query.Error != nil {
					return query.Error
				}

			} else {
				err := errors.New(
					fmt.Sprintf("In UpdateMode translation, pkgeltStore should not be nil %v %v",
						pkgeltDB, pkgelt))
				return err
			}
		}
	}
	return nil
}

// stores PkgeltDB according to their gorm ID
var map_PkgeltDBID_PkgeltDB *map[uint]*PkgeltDB

// stores PkgeltDB ID according to Pkgelt address
var map_PkgeltPtr_PkgeltDBID *map[*models.Pkgelt]uint

// stores Pkgelt according to their gorm ID
var map_PkgeltDBID_PkgeltPtr *map[uint]*models.Pkgelt

// ORMToModelPkgeltTranslate is a translation function from ORM object to models objects
// This function used the uint ID of the ORM object to create or update (according to translationImpact)
// maps of respectively ORM and models objects
//
// In create mode,
func ORMToModelPkgeltTranslate(
	translationImpact TranslationImpact,
	db *gorm.DB) (Error error) {

	if translationImpact == CreateMode {

		// check that pkgeltStores are nil

		if map_PkgeltDBID_PkgeltPtr != nil {
			err := errors.New("In CreateMode translation, Parameters pkgeltStore should be nil")
			return err
		}

		if map_PkgeltDBID_PkgeltDB != nil {
			err := errors.New("In CreateMode translation, parameters PkgeltDBStore should be nil")
			return err
		}

		// init stores
		tmp := make(map[uint]*models.Pkgelt, 0)
		map_PkgeltDBID_PkgeltPtr = &tmp

		tmpDB := make(map[uint]*PkgeltDB, 0)
		map_PkgeltDBID_PkgeltDB = &tmpDB

		tmpID := make(map[*models.Pkgelt]uint, 0)
		map_PkgeltPtr_PkgeltDBID = &tmpID

		models.AllModelStore.Pkgelts = make([]*models.Pkgelt, 0)

		pkgeltDBArray := make([]PkgeltDB, 0)
		query := db.Find(&pkgeltDBArray)
		if query.Error != nil {
			return query.Error
		}

		// copy orm objects to the two stores
		for _, pkgeltDB := range pkgeltDBArray {

			// create entries in the tree maps.
			pkgelt := pkgeltDB.Pkgelt
			(*map_PkgeltDBID_PkgeltPtr)[pkgeltDB.ID] = &pkgelt

			(*map_PkgeltPtr_PkgeltDBID)[&pkgelt] = pkgeltDB.ID

			pkgeltDBCopy := pkgeltDB
			(*map_PkgeltDBID_PkgeltDB)[pkgeltDB.ID] = &pkgeltDBCopy

			// append model store with the new element
			models.AllModelStore.Pkgelts = append(models.AllModelStore.Pkgelts, &pkgelt)
		}
	} else { // UpdateMode
		// for later, update of the data field

		// check that pkgeltStore is not nil
		if map_PkgeltDBID_PkgeltPtr == nil {
			err := errors.New("In UpdateMode translation, pkgeltStore should not be nil")
			return err
		}

		if map_PkgeltDBID_PkgeltDB == nil {
			err := errors.New("In UpdateMode translation, pkgeltStore should not be nil")
			return err
		}

		// update fields of pkgeltDB with fields of pkgelt
		for _, pkgelt := range models.AllModelStore.Pkgelts {
			pkgeltDBID := (*map_PkgeltPtr_PkgeltDBID)[pkgelt]
			pkgeltDB := (*map_PkgeltDBID_PkgeltDB)[pkgeltDBID]

			*pkgelt = pkgeltDB.Pkgelt
		}

		// parse all DB instance and update all pointer fields of the translated models instance
		for _, pkgeltDB := range *map_PkgeltDBID_PkgeltDB {
			pkgelt := (*map_PkgeltDBID_PkgeltPtr)[pkgeltDB.ID]
			if pkgelt == nil {
				err := errors.New("cannot find translated instance in models store")
				return err
			}



				// parse all ClassdiagramDB and redeem the array of poiners to Pkgelt
				for _, ClassdiagramDB := range *map_ClassdiagramDBID_ClassdiagramDB {
					if ClassdiagramDB.Pkgelt_ClassdiagramsDBID == pkgeltDB.ID {
						Classdiagram := (*map_ClassdiagramDBID_ClassdiagramPtr)[ClassdiagramDB.ID]
						pkgelt.Classdiagrams = append(pkgelt.Classdiagrams, Classdiagram)
					}
				}

				// parse all UmlscDB and redeem the array of poiners to Pkgelt
				for _, UmlscDB := range *map_UmlscDBID_UmlscDB {
					if UmlscDB.Pkgelt_UmlscsDBID == pkgeltDB.ID {
						Umlsc := (*map_UmlscDBID_UmlscPtr)[UmlscDB.ID]
						pkgelt.Umlscs = append(pkgelt.Umlscs, Umlsc)
					}
				}


		}
	}

	return nil
}

func (allORMStoreStruct *AllORMStoreStruct) CreateORMPkgelt(pkgelt *models.Pkgelt) {

	CreateORMPkgelt(allORMStoreStruct.db, pkgelt)
}

// CreateORMPkgelt creates ORM{{Strucname}} in DB from pkgelt
func CreateORMPkgelt(
	db *gorm.DB,
	pkgelt *models.Pkgelt) (Error error) {

	// initiate pkgelt
	var pkgeltDB PkgeltDB
	pkgeltDB.Pkgelt = *pkgelt

	query := db.Create(&pkgeltDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*map_PkgeltPtr_PkgeltDBID)[pkgelt] = pkgeltDB.ID
	(*map_PkgeltDBID_PkgeltPtr)[pkgeltDB.ID] = pkgelt
	(*map_PkgeltDBID_PkgeltDB)[pkgeltDB.ID] = &pkgeltDB

	return
}

func (allORMStoreStruct *AllORMStoreStruct) DeleteORMPkgelt(pkgelt *models.Pkgelt) {

	DeleteORMPkgelt(allORMStoreStruct.db, pkgelt)
}


func DeleteORMPkgelt(
	db *gorm.DB,
	pkgelt *models.Pkgelt) (Error error) {

	pkgeltDBID := (*map_PkgeltPtr_PkgeltDBID)[pkgelt]
	pkgeltDB := (*map_PkgeltDBID_PkgeltDB)[pkgeltDBID]

	query := db.Unscoped().Delete(&pkgeltDB)
	if query.Error != nil {
		return query.Error
	}

	delete(*map_PkgeltPtr_PkgeltDBID, pkgelt)
	delete(*map_PkgeltDBID_PkgeltPtr, pkgeltDB.ID)
	delete(*map_PkgeltDBID_PkgeltDB, pkgeltDBID)

	return
}
