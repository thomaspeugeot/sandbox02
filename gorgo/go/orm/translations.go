// generated by genORMTranslation.go
package orm

import (
	"errors"

	"github.com/jinzhu/gorm"
)

// TranslationImpact distinguish CREATE or UPDATE mode when translating
type TranslationImpact int

const (
	CreateMode TranslationImpact = iota // target objects are not initialized yet
	UpdateMode                          // target objects already exists and are only updated
)

// AllORMStoreStruct supports callback functions
type AllORMStoreStruct struct {
	db *gorm.DB
}

var AllORMStore AllORMStoreStruct

func (allORMStore *AllORMStoreStruct) SetDB(db *gorm.DB) {
	allORMStore.db = db
}

// AllORMToModels init reset all stores of models and orm instances
func AllModelsToORM(db *gorm.DB) (Error error) {


	map_ClassdiagramDBID_ClassdiagramDB = nil
	map_ClassdiagramPtr_ClassdiagramDBID = nil
	map_ClassdiagramDBID_ClassdiagramPtr = nil
	if err := ModelToORMClassdiagramTranslate(
		CreateMode,
		db); err != nil {
		return err
	}

	map_ClassshapeDBID_ClassshapeDB = nil
	map_ClassshapePtr_ClassshapeDBID = nil
	map_ClassshapeDBID_ClassshapePtr = nil
	if err := ModelToORMClassshapeTranslate(
		CreateMode,
		db); err != nil {
		return err
	}

	map_FieldDBID_FieldDB = nil
	map_FieldPtr_FieldDBID = nil
	map_FieldDBID_FieldPtr = nil
	if err := ModelToORMFieldTranslate(
		CreateMode,
		db); err != nil {
		return err
	}

	map_GorgoactionDBID_GorgoactionDB = nil
	map_GorgoactionPtr_GorgoactionDBID = nil
	map_GorgoactionDBID_GorgoactionPtr = nil
	if err := ModelToORMGorgoactionTranslate(
		CreateMode,
		db); err != nil {
		return err
	}

	map_LinkDBID_LinkDB = nil
	map_LinkPtr_LinkDBID = nil
	map_LinkDBID_LinkPtr = nil
	if err := ModelToORMLinkTranslate(
		CreateMode,
		db); err != nil {
		return err
	}

	map_PkgeltDBID_PkgeltDB = nil
	map_PkgeltPtr_PkgeltDBID = nil
	map_PkgeltDBID_PkgeltPtr = nil
	if err := ModelToORMPkgeltTranslate(
		CreateMode,
		db); err != nil {
		return err
	}

	map_PositionDBID_PositionDB = nil
	map_PositionPtr_PositionDBID = nil
	map_PositionDBID_PositionPtr = nil
	if err := ModelToORMPositionTranslate(
		CreateMode,
		db); err != nil {
		return err
	}

	map_StateDBID_StateDB = nil
	map_StatePtr_StateDBID = nil
	map_StateDBID_StatePtr = nil
	if err := ModelToORMStateTranslate(
		CreateMode,
		db); err != nil {
		return err
	}

	map_UmlscDBID_UmlscDB = nil
	map_UmlscPtr_UmlscDBID = nil
	map_UmlscDBID_UmlscPtr = nil
	if err := ModelToORMUmlscTranslate(
		CreateMode,
		db); err != nil {
		return err
	}

	map_VerticeDBID_VerticeDB = nil
	map_VerticePtr_VerticeDBID = nil
	map_VerticeDBID_VerticePtr = nil
	if err := ModelToORMVerticeTranslate(
		CreateMode,
		db); err != nil {
		return err
	}


	// and now update of the pointer fields
	// now the pointers
	if err := ModelToORMClassdiagramTranslate(
		UpdateMode,
		db); err != nil {
		return err
	}
	// now the pointers
	if err := ModelToORMClassshapeTranslate(
		UpdateMode,
		db); err != nil {
		return err
	}
	// now the pointers
	if err := ModelToORMFieldTranslate(
		UpdateMode,
		db); err != nil {
		return err
	}
	// now the pointers
	if err := ModelToORMGorgoactionTranslate(
		UpdateMode,
		db); err != nil {
		return err
	}
	// now the pointers
	if err := ModelToORMLinkTranslate(
		UpdateMode,
		db); err != nil {
		return err
	}
	// now the pointers
	if err := ModelToORMPkgeltTranslate(
		UpdateMode,
		db); err != nil {
		return err
	}
	// now the pointers
	if err := ModelToORMPositionTranslate(
		UpdateMode,
		db); err != nil {
		return err
	}
	// now the pointers
	if err := ModelToORMStateTranslate(
		UpdateMode,
		db); err != nil {
		return err
	}
	// now the pointers
	if err := ModelToORMUmlscTranslate(
		UpdateMode,
		db); err != nil {
		return err
	}
	// now the pointers
	if err := ModelToORMVerticeTranslate(
		UpdateMode,
		db); err != nil {
		return err
	}


	return nil
}

// AllORMToModels update all stores of models to orm instances
func AllModelsUpdateToORM(db *gorm.DB) (Error error) {


	// and now update of the pointer fields
	// now the pointers
	if err := ModelToORMClassdiagramTranslate(
		UpdateMode,
		db); err != nil {
		return err
	}
	// now the pointers
	if err := ModelToORMClassshapeTranslate(
		UpdateMode,
		db); err != nil {
		return err
	}
	// now the pointers
	if err := ModelToORMFieldTranslate(
		UpdateMode,
		db); err != nil {
		return err
	}
	// now the pointers
	if err := ModelToORMGorgoactionTranslate(
		UpdateMode,
		db); err != nil {
		return err
	}
	// now the pointers
	if err := ModelToORMLinkTranslate(
		UpdateMode,
		db); err != nil {
		return err
	}
	// now the pointers
	if err := ModelToORMPkgeltTranslate(
		UpdateMode,
		db); err != nil {
		return err
	}
	// now the pointers
	if err := ModelToORMPositionTranslate(
		UpdateMode,
		db); err != nil {
		return err
	}
	// now the pointers
	if err := ModelToORMStateTranslate(
		UpdateMode,
		db); err != nil {
		return err
	}
	// now the pointers
	if err := ModelToORMUmlscTranslate(
		UpdateMode,
		db); err != nil {
		return err
	}
	// now the pointers
	if err := ModelToORMVerticeTranslate(
		UpdateMode,
		db); err != nil {
		return err
	}


	return nil
}


// AllORMToModels init reset all stores of models and orm instances
func AllORMToModels(db *gorm.DB) (Error error) {

	// Init all instances of in the model store

	map_ClassdiagramDBID_ClassdiagramDB = nil
	map_ClassdiagramPtr_ClassdiagramDBID = nil
	map_ClassdiagramDBID_ClassdiagramPtr = nil
	if err := ORMToModelClassdiagramTranslate(
		CreateMode, 
		db); err != nil {
		err := errors.New("AllORMToModels, CreateMode Translation of Classdiagram failed")
		return err
	}


	map_ClassshapeDBID_ClassshapeDB = nil
	map_ClassshapePtr_ClassshapeDBID = nil
	map_ClassshapeDBID_ClassshapePtr = nil
	if err := ORMToModelClassshapeTranslate(
		CreateMode, 
		db); err != nil {
		err := errors.New("AllORMToModels, CreateMode Translation of Classshape failed")
		return err
	}


	map_FieldDBID_FieldDB = nil
	map_FieldPtr_FieldDBID = nil
	map_FieldDBID_FieldPtr = nil
	if err := ORMToModelFieldTranslate(
		CreateMode, 
		db); err != nil {
		err := errors.New("AllORMToModels, CreateMode Translation of Field failed")
		return err
	}


	map_GorgoactionDBID_GorgoactionDB = nil
	map_GorgoactionPtr_GorgoactionDBID = nil
	map_GorgoactionDBID_GorgoactionPtr = nil
	if err := ORMToModelGorgoactionTranslate(
		CreateMode, 
		db); err != nil {
		err := errors.New("AllORMToModels, CreateMode Translation of Gorgoaction failed")
		return err
	}


	map_LinkDBID_LinkDB = nil
	map_LinkPtr_LinkDBID = nil
	map_LinkDBID_LinkPtr = nil
	if err := ORMToModelLinkTranslate(
		CreateMode, 
		db); err != nil {
		err := errors.New("AllORMToModels, CreateMode Translation of Link failed")
		return err
	}


	map_PkgeltDBID_PkgeltDB = nil
	map_PkgeltPtr_PkgeltDBID = nil
	map_PkgeltDBID_PkgeltPtr = nil
	if err := ORMToModelPkgeltTranslate(
		CreateMode, 
		db); err != nil {
		err := errors.New("AllORMToModels, CreateMode Translation of Pkgelt failed")
		return err
	}


	map_PositionDBID_PositionDB = nil
	map_PositionPtr_PositionDBID = nil
	map_PositionDBID_PositionPtr = nil
	if err := ORMToModelPositionTranslate(
		CreateMode, 
		db); err != nil {
		err := errors.New("AllORMToModels, CreateMode Translation of Position failed")
		return err
	}


	map_StateDBID_StateDB = nil
	map_StatePtr_StateDBID = nil
	map_StateDBID_StatePtr = nil
	if err := ORMToModelStateTranslate(
		CreateMode, 
		db); err != nil {
		err := errors.New("AllORMToModels, CreateMode Translation of State failed")
		return err
	}


	map_UmlscDBID_UmlscDB = nil
	map_UmlscPtr_UmlscDBID = nil
	map_UmlscDBID_UmlscPtr = nil
	if err := ORMToModelUmlscTranslate(
		CreateMode, 
		db); err != nil {
		err := errors.New("AllORMToModels, CreateMode Translation of Umlsc failed")
		return err
	}


	map_VerticeDBID_VerticeDB = nil
	map_VerticePtr_VerticeDBID = nil
	map_VerticeDBID_VerticePtr = nil
	if err := ORMToModelVerticeTranslate(
		CreateMode, 
		db); err != nil {
		err := errors.New("AllORMToModels, CreateMode Translation of Vertice failed")
		return err
	}



	if err := ORMToModelClassdiagramTranslate(
			UpdateMode, 
			db); err != nil {
		err := errors.New("AllORMToModels, UpdateMode Translation of Classdiagram failed")
		return err
	}
	if err := ORMToModelClassshapeTranslate(
			UpdateMode, 
			db); err != nil {
		err := errors.New("AllORMToModels, UpdateMode Translation of Classshape failed")
		return err
	}
	if err := ORMToModelFieldTranslate(
			UpdateMode, 
			db); err != nil {
		err := errors.New("AllORMToModels, UpdateMode Translation of Field failed")
		return err
	}
	if err := ORMToModelGorgoactionTranslate(
			UpdateMode, 
			db); err != nil {
		err := errors.New("AllORMToModels, UpdateMode Translation of Gorgoaction failed")
		return err
	}
	if err := ORMToModelLinkTranslate(
			UpdateMode, 
			db); err != nil {
		err := errors.New("AllORMToModels, UpdateMode Translation of Link failed")
		return err
	}
	if err := ORMToModelPkgeltTranslate(
			UpdateMode, 
			db); err != nil {
		err := errors.New("AllORMToModels, UpdateMode Translation of Pkgelt failed")
		return err
	}
	if err := ORMToModelPositionTranslate(
			UpdateMode, 
			db); err != nil {
		err := errors.New("AllORMToModels, UpdateMode Translation of Position failed")
		return err
	}
	if err := ORMToModelStateTranslate(
			UpdateMode, 
			db); err != nil {
		err := errors.New("AllORMToModels, UpdateMode Translation of State failed")
		return err
	}
	if err := ORMToModelUmlscTranslate(
			UpdateMode, 
			db); err != nil {
		err := errors.New("AllORMToModels, UpdateMode Translation of Umlsc failed")
		return err
	}
	if err := ORMToModelVerticeTranslate(
			UpdateMode, 
			db); err != nil {
		err := errors.New("AllORMToModels, UpdateMode Translation of Vertice failed")
		return err
	}

	return nil
}

// AllORMUpdateToModels init reset all stores of models and orm instances
func AllORMUpdateToModels(db *gorm.DB) (Error error) {

	// Init all instances of in the model store

	if err := ORMToModelClassdiagramTranslate(
			UpdateMode, 
			db); err != nil {
		err := errors.New("AllORMToModels, UpdateMode Translation of Classdiagram failed")
		return err
	}
	if err := ORMToModelClassshapeTranslate(
			UpdateMode, 
			db); err != nil {
		err := errors.New("AllORMToModels, UpdateMode Translation of Classshape failed")
		return err
	}
	if err := ORMToModelFieldTranslate(
			UpdateMode, 
			db); err != nil {
		err := errors.New("AllORMToModels, UpdateMode Translation of Field failed")
		return err
	}
	if err := ORMToModelGorgoactionTranslate(
			UpdateMode, 
			db); err != nil {
		err := errors.New("AllORMToModels, UpdateMode Translation of Gorgoaction failed")
		return err
	}
	if err := ORMToModelLinkTranslate(
			UpdateMode, 
			db); err != nil {
		err := errors.New("AllORMToModels, UpdateMode Translation of Link failed")
		return err
	}
	if err := ORMToModelPkgeltTranslate(
			UpdateMode, 
			db); err != nil {
		err := errors.New("AllORMToModels, UpdateMode Translation of Pkgelt failed")
		return err
	}
	if err := ORMToModelPositionTranslate(
			UpdateMode, 
			db); err != nil {
		err := errors.New("AllORMToModels, UpdateMode Translation of Position failed")
		return err
	}
	if err := ORMToModelStateTranslate(
			UpdateMode, 
			db); err != nil {
		err := errors.New("AllORMToModels, UpdateMode Translation of State failed")
		return err
	}
	if err := ORMToModelUmlscTranslate(
			UpdateMode, 
			db); err != nil {
		err := errors.New("AllORMToModels, UpdateMode Translation of Umlsc failed")
		return err
	}
	if err := ORMToModelVerticeTranslate(
			UpdateMode, 
			db); err != nil {
		err := errors.New("AllORMToModels, UpdateMode Translation of Vertice failed")
		return err
	}

	return nil
}
