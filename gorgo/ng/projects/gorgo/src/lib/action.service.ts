 // generated by GenNgService.go
import { Injectable } from '@angular/core';
import { HttpClientModule } from '@angular/common/http';
import { HttpClient, HttpHeaders } from '@angular/common/http';

/*
 * Kamar : Ajout d'un moyen pour communiquer entre les composants qui partagent de l'information
 * afin qu'ils soient notifiés d'un changement.
 */
import { BehaviorSubject } from 'rxjs';
import { Observable, of } from 'rxjs';
import { catchError, map, tap } from 'rxjs/operators';

import { ActionAPI } from './action-api';
import { ActionDB } from './action-db';



@Injectable({
  providedIn: 'root'
})
export class ActionService {

  httpOptions = {
    headers: new HttpHeaders({ 'Content-Type': 'application/json' })
  };

  // Kamar Raïmo: Adding a way to communicate between components that share information
  // so that they are notified of a change.
  ActionServiceChanged: BehaviorSubject<string> = new BehaviorSubject("");

  private actionsUrl = 'http://localhost:8080/actions';

  constructor(
    private http: HttpClient
  ) { }

  /** GET actions from the server */
  getActions(): Observable<ActionDB[]> {
    return this.http.get<ActionDB[]>(this.actionsUrl)
      .pipe(
        tap(_ => this.log('fetched actions')),
        catchError(this.handleError<ActionDB[]>('getActions', []))
      );
  }

  /** GET action by id. Will 404 if id not found */
  getAction(id: number): Observable<ActionDB> {
    const url = `${this.actionsUrl}/${id}`;
    return this.http.get<ActionDB>(url).pipe(
      tap(_ => this.log(`fetched action id=${id}`)),
      catchError(this.handleError<ActionDB>(`getAction id=${id}`))
    );
  }

  //////// Save methods //////////

  /** POST: add a new action to the server */
  postAction(actionAPI: ActionAPI): Observable<ActionDB> {
    return this.http.post<ActionDB>(this.actionsUrl, actionAPI, this.httpOptions).pipe(
      tap((newAction: ActionDB) => this.log(`added action w/ id=${newAction.ID}`)),
      catchError(this.handleError<ActionDB>('addAction'))
    );
  }

  /** DELETE: delete the actiondb from the server */
  deleteAction(actiondb: ActionDB | number): Observable<ActionDB> {
    const id = typeof actiondb === 'number' ? actiondb : actiondb.ID;
    const url = `${this.actionsUrl}/${id}`;

    return this.http.delete<ActionDB>(url, this.httpOptions).pipe(
      tap(_ => this.log(`deleted actiondb id=${id}`)),
      catchError(this.handleError<ActionDB>('deleteAction'))
    );
  }

  /** PUT: update the actiondb on the server */
  updateAction(actiondb: ActionDB): Observable<ActionDB> {
    const id = typeof actiondb === 'number' ? actiondb : actiondb.ID;
    const url = `${this.actionsUrl}/${id}`;

    return this.http.put(url, actiondb, this.httpOptions).pipe(
      tap(_ => this.log(`updated actiondb id=${actiondb.ID}`)),
      catchError(this.handleError<ActionDB>('updateAction'))
    );
  }



  /**
   * Handle Http operation that failed.
   * Let the app continue.
   * @param operation - name of the operation that failed
   * @param result - optional value to return as the observable result
   */
  private handleError<T>(operation = 'operation', result?: T) {
    return (error: any): Observable<T> => {

      // TODO: send the error to remote logging infrastructure
      console.error(error); // log to console instead

      // TODO: better job of transforming error for user consumption
      this.log(`${operation} failed: ${error.message}`);

      // Let the app keep running by returning an empty result.
      return of(result as T);
    };
  }

  private log(message: string) {

  }
}
