// generated by genNgTable.go
import { Component, OnInit, OnChanges, Input, Output, EventEmitter } from '@angular/core';
import { MatTableDataSource } from '@angular/material/table';
import { MatButton } from '@angular/material/button'

import { Router, RouterState } from '@angular/router';
import { ActionDB } from '../action-db'
import { ActionService } from '../action.service'


// generated table component
@Component({
  selector: 'app-actions-table',
  templateUrl: './actions-table.component.html',
  styleUrls: ['./actions-table.component.css']
})
export class ActionsTableComponent implements OnInit {

  // the data source for the table
  actions: ActionDB[];

  @Input() ID : number; // ID of the caller when component called from struct in reverse relation
  @Input() struct : string; // struct with pointer to Action
  @Input() field : string; // field to display

  displayedColumns: string[] = ['ID', 'Name', 'Type', 'Edit', 'Delete'];

  constructor(
    private actionService: ActionService,

    private router: Router,
  ) {
    // observable for changes in structs
    this.actionService.ActionServiceChanged.subscribe(
      message => {
        if (message == "post" || message == "update" || message == "delete") {
          this.getActions()
        }
      }
    )
  }

  ngOnInit(): void {
    this.getActions()
  }

  getActions(): void {
    if (this.ID == null) {
      this.actionService.getActions().subscribe(
        Actions => {
          this.actions = Actions;
        }
      )
    }
  
  }

  // newAction initiate a new action
  // create a new Action objet
  newAction() {
  }

  deleteAction(actionID: number, action: ActionDB) {
    // la liste des actions est amputée du action avant le delete afin
    // de mettre à jour l'IHM
    this.actions = this.actions.filter(h => h !== action);

    this.actionService.deleteAction(actionID).subscribe();
  }

  editAction(actionID: number, action: ActionDB) {

  }

  // display action in router
  displayActionInRouter(actionID: number) {
    this.router.navigate( ["action-display", actionID])
  }

  // set editor outlet
  setEditorRouterOutlet(actionID: number) {
    this.router.navigate([{
      outlets: {
        editor: ["action-detail", actionID]
      }
    }]);
  }

  // set presentation outlet
  setPresentationRouterOutlet(actionID: number) {
    this.router.navigate([{
      outlets: {
        presentation: ["action-presentation", actionID]
      }
    }]);
  }
}
