import { Component, OnInit } from '@angular/core';
import {FormBuilder, FormControl, FormGroup} from '@angular/forms';

import { ClassshapeDB } from '../classshape-db'
import { ClassshapeService } from '../classshape.service'

import { PositionAPI} from '../position-api'
import { PositionDB} from '../position-db'
import { PositionService} from '../position.service'


import { Router, RouterState, ActivatedRoute } from '@angular/router';

@Component({
	selector: 'app-classshape-presentation',
	templateUrl: './classshape-presentation.component.html',
	styleUrls: ['./classshape-presentation.component.css']
})
export class ClassshapePresentationComponent implements OnInit {

	classshape: ClassshapeDB;

	Position = {} as PositionDB; // storing values of the field Position of type Position


	// generated by genEditableReadablePointerToStruct.go
	positions: PositionDB[];

	ClassdiagramsViaClassshapesFieldName = "Classshapes"; // Label used to generates the table of Classdiagram that points to Classshape via Classshapes
	ClassdiagramsViaClassshapesStructName = "Classshape"; // Label used to generates the table of Classdiagram that points to Classshape via Classshapes

	constructor(
		private classshapeService: ClassshapeService,

		private positionService: PositionService,
		private route: ActivatedRoute,
		private router: Router,
	) {
			this.router.routeReuseStrategy.shouldReuseRoute = function () {
				return false;
			};
	}

	ngOnInit(): void {
		this.getClassshape();

    	this.getPositions();


		// observable for changes in 
		this.classshapeService.ClassshapeServiceChanged.subscribe(
			message => {
				if (message == "update") {
					this.getClassshape()
					
    	this.getPositions();

				}
			}
		)
	}

  getClassshape(): void {
		const id = +this.route.snapshot.paramMap.get('id');
		this.classshapeService.getClassshape(id)
		.subscribe( 
			classshape => 
			{ 
					this.classshape = classshape
        	}
  	);
  }


	// generated by genEditableReadablePointerToStruct.go
	getPositions(): void {
		this.positionService.getPositions().subscribe(
			positions => {
				this.positions = positions;

				// init variable for each pointer
				this.positions.forEach(position => {
					if (position.ID == this.classshape.PositionID) {
						this.Position = position
					}
				});
      		}
    	)
	}

	// set presentation outlet
	setPresentationRouterOutlet(structName :string, ID: number) {
		this.router.navigate([{
	  	outlets: {
			presentation: [structName + "-presentation", ID]
	  	}
		}]);
	}

	// set editor outlet
	setEditorRouterOutlet(ID: number) {
		this.router.navigate([{
	 		outlets: {
	   			editor: ["classshape-detail", ID]
	 	}
   	}]);
 }

}
