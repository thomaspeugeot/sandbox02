 // generated by GenNgService.go
import { Injectable } from '@angular/core';
import { HttpClientModule } from '@angular/common/http';
import { HttpClient, HttpHeaders } from '@angular/common/http';

/*
 * Kamar : Ajout d'un moyen pour communiquer entre les composants qui partagent de l'information
 * afin qu'ils soient notifiés d'un changement.
 */
import { BehaviorSubject } from 'rxjs';
import { Observable, of } from 'rxjs';
import { catchError, map, tap } from 'rxjs/operators';

import { DocumentAPI } from './document-api';
import { DocumentDB } from './document-db';



@Injectable({
  providedIn: 'root'
})
export class DocumentService {

  httpOptions = {
    headers: new HttpHeaders({ 'Content-Type': 'application/json' })
  };

  // Kamar Raïmo: Adding a way to communicate between components that share information
  // so that they are notified of a change.
  DocumentServiceChanged: BehaviorSubject<string> = new BehaviorSubject("");

  private documentsUrl = 'http://localhost:8080/documents';

  constructor(
    private http: HttpClient
  ) { }

  /** GET documents from the server */
  getDocuments(): Observable<DocumentDB[]> {
    return this.http.get<DocumentDB[]>(this.documentsUrl)
      .pipe(
        tap(_ => this.log('fetched documents')),
        catchError(this.handleError<DocumentDB[]>('getDocuments', []))
      );
  }

  /** GET document by id. Will 404 if id not found */
  getDocument(id: number): Observable<DocumentDB> {
    const url = `${this.documentsUrl}/${id}`;
    return this.http.get<DocumentDB>(url).pipe(
      tap(_ => this.log(`fetched document id=${id}`)),
      catchError(this.handleError<DocumentDB>(`getDocument id=${id}`))
    );
  }

  //////// Save methods //////////

  /** POST: add a new document to the server */
  postDocument(documentAPI: DocumentAPI): Observable<DocumentDB> {
    return this.http.post<DocumentDB>(this.documentsUrl, documentAPI, this.httpOptions).pipe(
      tap((newDocument: DocumentDB) => this.log(`added document w/ id=${newDocument.ID}`)),
      catchError(this.handleError<DocumentDB>('addDocument'))
    );
  }

  /** DELETE: delete the documentdb from the server */
  deleteDocument(documentdb: DocumentDB | number): Observable<DocumentDB> {
    const id = typeof documentdb === 'number' ? documentdb : documentdb.ID;
    const url = `${this.documentsUrl}/${id}`;

    return this.http.delete<DocumentDB>(url, this.httpOptions).pipe(
      tap(_ => this.log(`deleted documentdb id=${id}`)),
      catchError(this.handleError<DocumentDB>('deleteDocument'))
    );
  }

  /** PUT: update the documentdb on the server */
  updateDocument(documentdb: DocumentDB): Observable<DocumentDB> {
    const id = typeof documentdb === 'number' ? documentdb : documentdb.ID;
    const url = `${this.documentsUrl}/${id}`;

    return this.http.put(url, documentdb, this.httpOptions).pipe(
      tap(_ => this.log(`updated documentdb id=${documentdb.ID}`)),
      catchError(this.handleError<DocumentDB>('updateDocument'))
    );
  }



  /**
   * Handle Http operation that failed.
   * Let the app continue.
   * @param operation - name of the operation that failed
   * @param result - optional value to return as the observable result
   */
  private handleError<T>(operation = 'operation', result?: T) {
    return (error: any): Observable<T> => {

      // TODO: send the error to remote logging infrastructure
      console.error(error); // log to console instead

      // TODO: better job of transforming error for user consumption
      this.log(`${operation} failed: ${error.message}`);

      // Let the app keep running by returning an empty result.
      return of(result as T);
    };
  }

  private log(message: string) {

  }
}
