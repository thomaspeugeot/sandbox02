// generated by genNgTable.go
import { Component, OnInit, OnChanges, Input, Output, EventEmitter } from '@angular/core';
import { MatTableDataSource } from '@angular/material/table';
import { MatButton } from '@angular/material/button'

import { Router, RouterState } from '@angular/router';
import { FieldDB } from '../field-db'
import { FieldService } from '../field.service'


// generated table component
@Component({
  selector: 'app-fields-table',
  templateUrl: './fields-table.component.html',
  styleUrls: ['./fields-table.component.css']
})
export class FieldsTableComponent implements OnInit {

  // the data source for the table
  fields: FieldDB[];

  @Input() ID : number; // ID of the caller when component called from struct in reverse relation
  @Input() struct : string; // struct with pointer to Field
  @Input() field : string; // field to display

  displayedColumns: string[] = ['ID', 'Fieldname', 'Fieldtypename', 'Name', 'Structname', 'Edit', 'Delete'];

  constructor(
    private fieldService: FieldService,

    private router: Router,
  ) {
    // observable for changes in structs
    this.fieldService.FieldServiceChanged.subscribe(
      message => {
        if (message == "post" || message == "update" || message == "delete") {
          this.getFields()
        }
      }
    )
  }

  ngOnInit(): void {
    this.getFields()
  }

  getFields(): void {
    if (this.ID == null) {
      this.fieldService.getFields().subscribe(
        Fields => {
          this.fields = Fields;
        }
      )
    }
  
  }

  // newField initiate a new field
  // create a new Field objet
  newField() {
  }

  deleteField(fieldID: number, field: FieldDB) {
    // la liste des fields est amputée du field avant le delete afin
    // de mettre à jour l'IHM
    this.fields = this.fields.filter(h => h !== field);

    this.fieldService.deleteField(fieldID).subscribe();
  }

  editField(fieldID: number, field: FieldDB) {

  }

  // display field in router
  displayFieldInRouter(fieldID: number) {
    this.router.navigate( ["field-display", fieldID])
  }

  // set editor outlet
  setEditorRouterOutlet(fieldID: number) {
    this.router.navigate([{
      outlets: {
        editor: ["field-detail", fieldID]
      }
    }]);
  }

  // set presentation outlet
  setPresentationRouterOutlet(fieldID: number) {
    this.router.navigate([{
      outlets: {
        presentation: ["field-presentation", fieldID]
      }
    }]);
  }
}
