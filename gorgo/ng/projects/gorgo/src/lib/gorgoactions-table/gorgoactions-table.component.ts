// generated by genNgTable.go
import { Component, OnInit, OnChanges, Input, Output, EventEmitter } from '@angular/core';
import { MatTableDataSource } from '@angular/material/table';
import { MatButton } from '@angular/material/button'

import { Router, RouterState } from '@angular/router';
import { GorgoactionDB } from '../gorgoaction-db'
import { GorgoactionService } from '../gorgoaction.service'


// generated table component
@Component({
  selector: 'app-gorgoactions-table',
  templateUrl: './gorgoactions-table.component.html',
  styleUrls: ['./gorgoactions-table.component.css']
})
export class GorgoactionsTableComponent implements OnInit {

  // the data source for the table
  gorgoactions: GorgoactionDB[];

  @Input() ID : number; // ID of the caller when component called from struct in reverse relation
  @Input() struct : string; // struct with pointer to Gorgoaction
  @Input() field : string; // field to display

  displayedColumns: string[] = ['ID', 'Name', 'Type', 'Edit', 'Delete'];

  constructor(
    private gorgoactionService: GorgoactionService,

    private router: Router,
  ) {
    // observable for changes in structs
    this.gorgoactionService.GorgoactionServiceChanged.subscribe(
      message => {
        if (message == "post" || message == "update" || message == "delete") {
          this.getGorgoactions()
        }
      }
    )
  }

  ngOnInit(): void {
    this.getGorgoactions()
  }

  getGorgoactions(): void {
    if (this.ID == null) {
      this.gorgoactionService.getGorgoactions().subscribe(
        Gorgoactions => {
          this.gorgoactions = Gorgoactions;
        }
      )
    }
  
  }

  // newGorgoaction initiate a new gorgoaction
  // create a new Gorgoaction objet
  newGorgoaction() {
  }

  deleteGorgoaction(gorgoactionID: number, gorgoaction: GorgoactionDB) {
    // la liste des gorgoactions est amputée du gorgoaction avant le delete afin
    // de mettre à jour l'IHM
    this.gorgoactions = this.gorgoactions.filter(h => h !== gorgoaction);

    this.gorgoactionService.deleteGorgoaction(gorgoactionID).subscribe();
  }

  editGorgoaction(gorgoactionID: number, gorgoaction: GorgoactionDB) {

  }

  // display gorgoaction in router
  displayGorgoactionInRouter(gorgoactionID: number) {
    this.router.navigate( ["gorgoaction-display", gorgoactionID])
  }

  // set editor outlet
  setEditorRouterOutlet(gorgoactionID: number) {
    this.router.navigate([{
      outlets: {
        editor: ["gorgoaction-detail", gorgoactionID]
      }
    }]);
  }

  // set presentation outlet
  setPresentationRouterOutlet(gorgoactionID: number) {
    this.router.navigate([{
      outlets: {
        presentation: ["gorgoaction-presentation", gorgoactionID]
      }
    }]);
  }
}
