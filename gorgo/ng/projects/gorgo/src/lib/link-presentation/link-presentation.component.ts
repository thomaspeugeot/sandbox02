import { Component, OnInit } from '@angular/core';
import {FormBuilder, FormControl, FormGroup} from '@angular/forms';

import { LinkDB } from '../link-db'
import { LinkService } from '../link.service'

import { VerticeAPI} from '../vertice-api'
import { VerticeDB} from '../vertice-db'
import { VerticeService} from '../vertice.service'


import { Router, RouterState, ActivatedRoute } from '@angular/router';

@Component({
	selector: 'app-link-presentation',
	templateUrl: './link-presentation.component.html',
	styleUrls: ['./link-presentation.component.css']
})
export class LinkPresentationComponent implements OnInit {

	link: LinkDB;

	Middlevertice = {} as VerticeDB; // storing values of the field Middlevertice of type Vertice


	// generated by genEditableReadablePointerToStruct.go
	vertices: VerticeDB[];

	ClassshapesViaLinksFieldName = "Links"; // Label used to generates the table of Classshape that points to Link via Links
	ClassshapesViaLinksStructName = "Link"; // Label used to generates the table of Classshape that points to Link via Links

	constructor(
		private linkService: LinkService,

		private verticeService: VerticeService,
		private route: ActivatedRoute,
		private router: Router,
	) {
			this.router.routeReuseStrategy.shouldReuseRoute = function () {
				return false;
			};
	}

	ngOnInit(): void {
		this.getLink();

    	this.getVertices();


		// observable for changes in 
		this.linkService.LinkServiceChanged.subscribe(
			message => {
				if (message == "update") {
					this.getLink()
					
    	this.getVertices();

				}
			}
		)
	}

  getLink(): void {
		const id = +this.route.snapshot.paramMap.get('id');
		this.linkService.getLink(id)
		.subscribe( 
			link => 
			{ 
					this.link = link
        	}
  	);
  }


	// generated by genEditableReadablePointerToStruct.go
	getVertices(): void {
		this.verticeService.getVertices().subscribe(
			vertices => {
				this.vertices = vertices;

				// init variable for each pointer
				this.vertices.forEach(vertice => {
					if (vertice.ID == this.link.MiddleverticeID) {
						this.Middlevertice = vertice
					}
				});
      		}
    	)
	}

	// set presentation outlet
	setPresentationRouterOutlet(structName :string, ID: number) {
		this.router.navigate([{
	  	outlets: {
			presentation: [structName + "-presentation", ID]
	  	}
		}]);
	}

	// set editor outlet
	setEditorRouterOutlet(ID: number) {
		this.router.navigate([{
	 		outlets: {
	   			editor: ["link-detail", ID]
	 	}
   	}]);
 }

}
