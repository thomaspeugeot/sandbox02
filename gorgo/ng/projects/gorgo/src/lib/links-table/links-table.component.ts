// generated by genNgTable.go
import { Component, OnInit, OnChanges, Input, Output, EventEmitter } from '@angular/core';
import { MatTableDataSource } from '@angular/material/table';
import { MatButton } from '@angular/material/button'

import { Router, RouterState } from '@angular/router';
import { LinkDB } from '../link-db'
import { LinkService } from '../link.service'

import { VerticeAPI} from '../vertice-api'
import { VerticeDB} from '../vertice-db'
import { VerticeService} from '../vertice.service'


// generated table component
@Component({
  selector: 'app-links-table',
  templateUrl: './links-table.component.html',
  styleUrls: ['./links-table.component.css']
})
export class LinksTableComponent implements OnInit {

  // the data source for the table
  links: LinkDB[];

  @Input() ID : number; // ID of the caller when component called from struct in reverse relation
  @Input() struct : string; // struct with pointer to Link
  @Input() field : string; // field to display

  displayedColumns: string[] = ['ID', 'Fieldname', 'Fieldtypename', 'Middlevertice', 'Name', 'Structname', 'Edit', 'Delete'];

  constructor(
    private linkService: LinkService,

		private verticeService: VerticeService,
    private router: Router,
  ) {
    // observable for changes in structs
    this.linkService.LinkServiceChanged.subscribe(
      message => {
        if (message == "post" || message == "update" || message == "delete") {
          this.getLinks()
        }
      }
    )
  }

  ngOnInit(): void {
    this.getLinks()
  }

  getLinks(): void {
    if (this.ID == null) {
      this.linkService.getLinks().subscribe(
        Links => {
          this.links = Links;
        }
      )
    }
  
		if (this.ID != 0 && this.field == "Middlevertice" && this.struct == "Vertice") {
			this.verticeService.getVerticeLinksViaMiddlevertice(this.ID).subscribe(
				links => {
					this.links = links;
				}
			)
		}
  }

  // newLink initiate a new link
  // create a new Link objet
  newLink() {
  }

  deleteLink(linkID: number, link: LinkDB) {
    // la liste des links est amputée du link avant le delete afin
    // de mettre à jour l'IHM
    this.links = this.links.filter(h => h !== link);

    this.linkService.deleteLink(linkID).subscribe();
  }

  editLink(linkID: number, link: LinkDB) {

  }

  // display link in router
  displayLinkInRouter(linkID: number) {
    this.router.navigate( ["link-display", linkID])
  }

  // set editor outlet
  setEditorRouterOutlet(linkID: number) {
    this.router.navigate([{
      outlets: {
        editor: ["link-detail", linkID]
      }
    }]);
  }

  // set presentation outlet
  setPresentationRouterOutlet(linkID: number) {
    this.router.navigate([{
      outlets: {
        presentation: ["link-presentation", linkID]
      }
    }]);
  }
}
