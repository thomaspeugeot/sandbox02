// generated by genNgTable.go
import { Component, OnInit, OnChanges, Input, Output, EventEmitter } from '@angular/core';
import { MatTableDataSource } from '@angular/material/table';
import { MatButton } from '@angular/material/button'

import { Router, RouterState } from '@angular/router';
import { PkgeltDB } from '../pkgelt-db'
import { PkgeltService } from '../pkgelt.service'


// generated table component
@Component({
  selector: 'app-pkgelts-table',
  templateUrl: './pkgelts-table.component.html',
  styleUrls: ['./pkgelts-table.component.css']
})
export class PkgeltsTableComponent implements OnInit {

  // the data source for the table
  pkgelts: PkgeltDB[];

  @Input() ID : number; // ID of the caller when component called from struct in reverse relation
  @Input() struct : string; // struct with pointer to Pkgelt
  @Input() field : string; // field to display

  displayedColumns: string[] = ['ID', 'Name', 'Edit', 'Delete'];

  constructor(
    private pkgeltService: PkgeltService,

    private router: Router,
  ) {
    // observable for changes in structs
    this.pkgeltService.PkgeltServiceChanged.subscribe(
      message => {
        if (message == "post" || message == "update" || message == "delete") {
          this.getPkgelts()
        }
      }
    )
  }

  ngOnInit(): void {
    this.getPkgelts()
  }

  getPkgelts(): void {
    if (this.ID == null) {
      this.pkgeltService.getPkgelts().subscribe(
        Pkgelts => {
          this.pkgelts = Pkgelts;
        }
      )
    }
  
  }

  // newPkgelt initiate a new pkgelt
  // create a new Pkgelt objet
  newPkgelt() {
  }

  deletePkgelt(pkgeltID: number, pkgelt: PkgeltDB) {
    // la liste des pkgelts est amputée du pkgelt avant le delete afin
    // de mettre à jour l'IHM
    this.pkgelts = this.pkgelts.filter(h => h !== pkgelt);

    this.pkgeltService.deletePkgelt(pkgeltID).subscribe();
  }

  editPkgelt(pkgeltID: number, pkgelt: PkgeltDB) {

  }

  // display pkgelt in router
  displayPkgeltInRouter(pkgeltID: number) {
    this.router.navigate( ["pkgelt-display", pkgeltID])
  }

  // set editor outlet
  setEditorRouterOutlet(pkgeltID: number) {
    this.router.navigate([{
      outlets: {
        editor: ["pkgelt-detail", pkgeltID]
      }
    }]);
  }

  // set presentation outlet
  setPresentationRouterOutlet(pkgeltID: number) {
    this.router.navigate([{
      outlets: {
        presentation: ["pkgelt-presentation", pkgeltID]
      }
    }]);
  }
}
