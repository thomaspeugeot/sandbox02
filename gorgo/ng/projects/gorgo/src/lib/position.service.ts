 // generated by GenNgService.go
import { Injectable } from '@angular/core';
import { HttpClientModule } from '@angular/common/http';
import { HttpClient, HttpHeaders } from '@angular/common/http';

/*
 * Kamar : Ajout d'un moyen pour communiquer entre les composants qui partagent de l'information
 * afin qu'ils soient notifiés d'un changement.
 */
import { BehaviorSubject } from 'rxjs';
import { Observable, of } from 'rxjs';
import { catchError, map, tap } from 'rxjs/operators';

import { PositionAPI } from './position-api';
import { PositionDB } from './position-db';


// import of struct with pointer field to current struct
import { ClassshapeDB} from './classshape-db'

@Injectable({
  providedIn: 'root'
})
export class PositionService {

  httpOptions = {
    headers: new HttpHeaders({ 'Content-Type': 'application/json' })
  };

  // Kamar Raïmo: Adding a way to communicate between components that share information
  // so that they are notified of a change.
  PositionServiceChanged: BehaviorSubject<string> = new BehaviorSubject("");

  private positionsUrl = 'http://localhost:8080/positions';

  constructor(
    private http: HttpClient
  ) { }

  /** GET positions from the server */
  getPositions(): Observable<PositionDB[]> {
    return this.http.get<PositionDB[]>(this.positionsUrl)
      .pipe(
        tap(_ => this.log('fetched positions')),
        catchError(this.handleError<PositionDB[]>('getPositions', []))
      );
  }

  /** GET position by id. Will 404 if id not found */
  getPosition(id: number): Observable<PositionDB> {
    const url = `${this.positionsUrl}/${id}`;
    return this.http.get<PositionDB>(url).pipe(
      tap(_ => this.log(`fetched position id=${id}`)),
      catchError(this.handleError<PositionDB>(`getPosition id=${id}`))
    );
  }

  //////// Save methods //////////

  /** POST: add a new position to the server */
  postPosition(positionAPI: PositionAPI): Observable<PositionDB> {
    return this.http.post<PositionDB>(this.positionsUrl, positionAPI, this.httpOptions).pipe(
      tap((newPosition: PositionDB) => this.log(`added position w/ id=${newPosition.ID}`)),
      catchError(this.handleError<PositionDB>('addPosition'))
    );
  }

  /** DELETE: delete the positiondb from the server */
  deletePosition(positiondb: PositionDB | number): Observable<PositionDB> {
    const id = typeof positiondb === 'number' ? positiondb : positiondb.ID;
    const url = `${this.positionsUrl}/${id}`;

    return this.http.delete<PositionDB>(url, this.httpOptions).pipe(
      tap(_ => this.log(`deleted positiondb id=${id}`)),
      catchError(this.handleError<PositionDB>('deletePosition'))
    );
  }

  /** PUT: update the positiondb on the server */
  updatePosition(positiondb: PositionDB): Observable<PositionDB> {
    const id = typeof positiondb === 'number' ? positiondb : positiondb.ID;
    const url = `${this.positionsUrl}/${id}`;

    return this.http.put(url, positiondb, this.httpOptions).pipe(
      tap(_ => this.log(`updated positiondb id=${positiondb.ID}`)),
      catchError(this.handleError<PositionDB>('updatePosition'))
    );
  }


    // getter of struct with pointer to current struct
    getPositionClassshapesViaPosition(id: number): Observable<Array<ClassshapeDB>> {
      const url = `${this.positionsUrl}/${id}/classshapesviaposition`;
      return this.http.get<Array<ClassshapeDB>>(url).pipe(
        tap(_ => this.log(`fetched position id=${id}`)),
        catchError(this.handleError<Array<ClassshapeDB>>(`getPosition id=${id}`))
      );
    }


  /**
   * Handle Http operation that failed.
   * Let the app continue.
   * @param operation - name of the operation that failed
   * @param result - optional value to return as the observable result
   */
  private handleError<T>(operation = 'operation', result?: T) {
    return (error: any): Observable<T> => {

      // TODO: send the error to remote logging infrastructure
      console.error(error); // log to console instead

      // TODO: better job of transforming error for user consumption
      this.log(`${operation} failed: ${error.message}`);

      // Let the app keep running by returning an empty result.
      return of(result as T);
    };
  }

  private log(message: string) {

  }
}
