// generated by genNgTable.go
import { Component, OnInit, OnChanges, Input, Output, EventEmitter } from '@angular/core';
import { MatTableDataSource } from '@angular/material/table';
import { MatButton } from '@angular/material/button'

import { Router, RouterState } from '@angular/router';
import { PositionDB } from '../position-db'
import { PositionService } from '../position.service'


// generated table component
@Component({
  selector: 'app-positions-table',
  templateUrl: './positions-table.component.html',
  styleUrls: ['./positions-table.component.css']
})
export class PositionsTableComponent implements OnInit {

  // the data source for the table
  positions: PositionDB[];

  @Input() ID : number; // ID of the caller when component called from struct in reverse relation
  @Input() struct : string; // struct with pointer to Position
  @Input() field : string; // field to display

  displayedColumns: string[] = ['ID', 'Name', 'X', 'Y', 'Edit', 'Delete'];

  constructor(
    private positionService: PositionService,

    private router: Router,
  ) {
    // observable for changes in structs
    this.positionService.PositionServiceChanged.subscribe(
      message => {
        if (message == "post" || message == "update" || message == "delete") {
          this.getPositions()
        }
      }
    )
  }

  ngOnInit(): void {
    this.getPositions()
  }

  getPositions(): void {
    if (this.ID == null) {
      this.positionService.getPositions().subscribe(
        Positions => {
          this.positions = Positions;
        }
      )
    }
  
  }

  // newPosition initiate a new position
  // create a new Position objet
  newPosition() {
  }

  deletePosition(positionID: number, position: PositionDB) {
    // la liste des positions est amputée du position avant le delete afin
    // de mettre à jour l'IHM
    this.positions = this.positions.filter(h => h !== position);

    this.positionService.deletePosition(positionID).subscribe();
  }

  editPosition(positionID: number, position: PositionDB) {

  }

  // display position in router
  displayPositionInRouter(positionID: number) {
    this.router.navigate( ["position-display", positionID])
  }

  // set editor outlet
  setEditorRouterOutlet(positionID: number) {
    this.router.navigate([{
      outlets: {
        editor: ["position-detail", positionID]
      }
    }]);
  }

  // set presentation outlet
  setPresentationRouterOutlet(positionID: number) {
    this.router.navigate([{
      outlets: {
        presentation: ["position-presentation", positionID]
      }
    }]);
  }
}
