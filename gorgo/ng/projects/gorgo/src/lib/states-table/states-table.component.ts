// generated by genNgTable.go
import { Component, OnInit, OnChanges, Input, Output, EventEmitter } from '@angular/core';
import { MatTableDataSource } from '@angular/material/table';
import { MatButton } from '@angular/material/button'

import { Router, RouterState } from '@angular/router';
import { StateDB } from '../state-db'
import { StateService } from '../state.service'


// generated table component
@Component({
  selector: 'app-states-table',
  templateUrl: './states-table.component.html',
  styleUrls: ['./states-table.component.css']
})
export class StatesTableComponent implements OnInit {

  // the data source for the table
  states: StateDB[];

  @Input() ID : number; // ID of the caller when component called from struct in reverse relation
  @Input() struct : string; // struct with pointer to State
  @Input() field : string; // field to display

  displayedColumns: string[] = ['ID', 'Name', 'X', 'Y', 'Edit', 'Delete'];

  constructor(
    private stateService: StateService,

    private router: Router,
  ) {
    // observable for changes in structs
    this.stateService.StateServiceChanged.subscribe(
      message => {
        if (message == "post" || message == "update" || message == "delete") {
          this.getStates()
        }
      }
    )
  }

  ngOnInit(): void {
    this.getStates()
  }

  getStates(): void {
    if (this.ID == null) {
      this.stateService.getStates().subscribe(
        States => {
          this.states = States;
        }
      )
    }
  
  }

  // newState initiate a new state
  // create a new State objet
  newState() {
  }

  deleteState(stateID: number, state: StateDB) {
    // la liste des states est amputée du state avant le delete afin
    // de mettre à jour l'IHM
    this.states = this.states.filter(h => h !== state);

    this.stateService.deleteState(stateID).subscribe();
  }

  editState(stateID: number, state: StateDB) {

  }

  // display state in router
  displayStateInRouter(stateID: number) {
    this.router.navigate( ["state-display", stateID])
  }

  // set editor outlet
  setEditorRouterOutlet(stateID: number) {
    this.router.navigate([{
      outlets: {
        editor: ["state-detail", stateID]
      }
    }]);
  }

  // set presentation outlet
  setPresentationRouterOutlet(stateID: number) {
    this.router.navigate([{
      outlets: {
        presentation: ["state-presentation", stateID]
      }
    }]);
  }
}
