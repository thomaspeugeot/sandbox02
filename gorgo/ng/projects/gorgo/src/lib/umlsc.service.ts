 // generated by GenNgService.go
import { Injectable } from '@angular/core';
import { HttpClientModule } from '@angular/common/http';
import { HttpClient, HttpHeaders } from '@angular/common/http';

/*
 * Kamar : Ajout d'un moyen pour communiquer entre les composants qui partagent de l'information
 * afin qu'ils soient notifiés d'un changement.
 */
import { BehaviorSubject } from 'rxjs';
import { Observable, of } from 'rxjs';
import { catchError, map, tap } from 'rxjs/operators';

import { UmlscAPI } from './umlsc-api';
import { UmlscDB } from './umlsc-db';



@Injectable({
  providedIn: 'root'
})
export class UmlscService {

  httpOptions = {
    headers: new HttpHeaders({ 'Content-Type': 'application/json' })
  };

  // Kamar Raïmo: Adding a way to communicate between components that share information
  // so that they are notified of a change.
  UmlscServiceChanged: BehaviorSubject<string> = new BehaviorSubject("");

  private umlscsUrl = 'http://localhost:8080/umlscs';

  constructor(
    private http: HttpClient
  ) { }

  /** GET umlscs from the server */
  getUmlscs(): Observable<UmlscDB[]> {
    return this.http.get<UmlscDB[]>(this.umlscsUrl)
      .pipe(
        tap(_ => this.log('fetched umlscs')),
        catchError(this.handleError<UmlscDB[]>('getUmlscs', []))
      );
  }

  /** GET umlsc by id. Will 404 if id not found */
  getUmlsc(id: number): Observable<UmlscDB> {
    const url = `${this.umlscsUrl}/${id}`;
    return this.http.get<UmlscDB>(url).pipe(
      tap(_ => this.log(`fetched umlsc id=${id}`)),
      catchError(this.handleError<UmlscDB>(`getUmlsc id=${id}`))
    );
  }

  //////// Save methods //////////

  /** POST: add a new umlsc to the server */
  postUmlsc(umlscAPI: UmlscAPI): Observable<UmlscDB> {
    return this.http.post<UmlscDB>(this.umlscsUrl, umlscAPI, this.httpOptions).pipe(
      tap((newUmlsc: UmlscDB) => this.log(`added umlsc w/ id=${newUmlsc.ID}`)),
      catchError(this.handleError<UmlscDB>('addUmlsc'))
    );
  }

  /** DELETE: delete the umlscdb from the server */
  deleteUmlsc(umlscdb: UmlscDB | number): Observable<UmlscDB> {
    const id = typeof umlscdb === 'number' ? umlscdb : umlscdb.ID;
    const url = `${this.umlscsUrl}/${id}`;

    return this.http.delete<UmlscDB>(url, this.httpOptions).pipe(
      tap(_ => this.log(`deleted umlscdb id=${id}`)),
      catchError(this.handleError<UmlscDB>('deleteUmlsc'))
    );
  }

  /** PUT: update the umlscdb on the server */
  updateUmlsc(umlscdb: UmlscDB): Observable<UmlscDB> {
    const id = typeof umlscdb === 'number' ? umlscdb : umlscdb.ID;
    const url = `${this.umlscsUrl}/${id}`;

    return this.http.put(url, umlscdb, this.httpOptions).pipe(
      tap(_ => this.log(`updated umlscdb id=${umlscdb.ID}`)),
      catchError(this.handleError<UmlscDB>('updateUmlsc'))
    );
  }



  /**
   * Handle Http operation that failed.
   * Let the app continue.
   * @param operation - name of the operation that failed
   * @param result - optional value to return as the observable result
   */
  private handleError<T>(operation = 'operation', result?: T) {
    return (error: any): Observable<T> => {

      // TODO: send the error to remote logging infrastructure
      console.error(error); // log to console instead

      // TODO: better job of transforming error for user consumption
      this.log(`${operation} failed: ${error.message}`);

      // Let the app keep running by returning an empty result.
      return of(result as T);
    };
  }

  private log(message: string) {

  }
}
