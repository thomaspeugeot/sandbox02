// generated by genNgTable.go
import { Component, OnInit, OnChanges, Input, Output, EventEmitter } from '@angular/core';
import { MatTableDataSource } from '@angular/material/table';
import { MatButton } from '@angular/material/button'

import { Router, RouterState } from '@angular/router';
import { UmlscDB } from '../umlsc-db'
import { UmlscService } from '../umlsc.service'


// generated table component
@Component({
  selector: 'app-umlscs-table',
  templateUrl: './umlscs-table.component.html',
  styleUrls: ['./umlscs-table.component.css']
})
export class UmlscsTableComponent implements OnInit {

  // the data source for the table
  umlscs: UmlscDB[];

  @Input() ID : number; // ID of the caller when component called from struct in reverse relation
  @Input() struct : string; // struct with pointer to Umlsc
  @Input() field : string; // field to display

  displayedColumns: string[] = ['ID', 'Activestate', 'Name', 'Edit', 'Delete'];

  constructor(
    private umlscService: UmlscService,

    private router: Router,
  ) {
    // observable for changes in structs
    this.umlscService.UmlscServiceChanged.subscribe(
      message => {
        if (message == "post" || message == "update" || message == "delete") {
          this.getUmlscs()
        }
      }
    )
  }

  ngOnInit(): void {
    this.getUmlscs()
  }

  getUmlscs(): void {
    if (this.ID == null) {
      this.umlscService.getUmlscs().subscribe(
        Umlscs => {
          this.umlscs = Umlscs;
        }
      )
    }
  
  }

  // newUmlsc initiate a new umlsc
  // create a new Umlsc objet
  newUmlsc() {
  }

  deleteUmlsc(umlscID: number, umlsc: UmlscDB) {
    // la liste des umlscs est amputée du umlsc avant le delete afin
    // de mettre à jour l'IHM
    this.umlscs = this.umlscs.filter(h => h !== umlsc);

    this.umlscService.deleteUmlsc(umlscID).subscribe();
  }

  editUmlsc(umlscID: number, umlsc: UmlscDB) {

  }

  // display umlsc in router
  displayUmlscInRouter(umlscID: number) {
    this.router.navigate( ["umlsc-display", umlscID])
  }

  // set editor outlet
  setEditorRouterOutlet(umlscID: number) {
    this.router.navigate([{
      outlets: {
        editor: ["umlsc-detail", umlscID]
      }
    }]);
  }

  // set presentation outlet
  setPresentationRouterOutlet(umlscID: number) {
    this.router.navigate([{
      outlets: {
        presentation: ["umlsc-presentation", umlscID]
      }
    }]);
  }
}
