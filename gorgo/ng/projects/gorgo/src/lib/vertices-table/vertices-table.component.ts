// generated by genNgTable.go
import { Component, OnInit, OnChanges, Input, Output, EventEmitter } from '@angular/core';
import { MatTableDataSource } from '@angular/material/table';
import { MatButton } from '@angular/material/button'

import { Router, RouterState } from '@angular/router';
import { VerticeDB } from '../vertice-db'
import { VerticeService } from '../vertice.service'


// generated table component
@Component({
  selector: 'app-vertices-table',
  templateUrl: './vertices-table.component.html',
  styleUrls: ['./vertices-table.component.css']
})
export class VerticesTableComponent implements OnInit {

  // the data source for the table
  vertices: VerticeDB[];

  @Input() ID : number; // ID of the caller when component called from struct in reverse relation
  @Input() struct : string; // struct with pointer to Vertice
  @Input() field : string; // field to display

  displayedColumns: string[] = ['ID', 'Name', 'X', 'Y', 'Edit', 'Delete'];

  constructor(
    private verticeService: VerticeService,

    private router: Router,
  ) {
    // observable for changes in structs
    this.verticeService.VerticeServiceChanged.subscribe(
      message => {
        if (message == "post" || message == "update" || message == "delete") {
          this.getVertices()
        }
      }
    )
  }

  ngOnInit(): void {
    this.getVertices()
  }

  getVertices(): void {
    if (this.ID == null) {
      this.verticeService.getVertices().subscribe(
        Vertices => {
          this.vertices = Vertices;
        }
      )
    }
  
  }

  // newVertice initiate a new vertice
  // create a new Vertice objet
  newVertice() {
  }

  deleteVertice(verticeID: number, vertice: VerticeDB) {
    // la liste des vertices est amputée du vertice avant le delete afin
    // de mettre à jour l'IHM
    this.vertices = this.vertices.filter(h => h !== vertice);

    this.verticeService.deleteVertice(verticeID).subscribe();
  }

  editVertice(verticeID: number, vertice: VerticeDB) {

  }

  // display vertice in router
  displayVerticeInRouter(verticeID: number) {
    this.router.navigate( ["vertice-display", verticeID])
  }

  // set editor outlet
  setEditorRouterOutlet(verticeID: number) {
    this.router.navigate([{
      outlets: {
        editor: ["vertice-detail", verticeID]
      }
    }]);
  }

  // set presentation outlet
  setPresentationRouterOutlet(verticeID: number) {
    this.router.navigate([{
      outlets: {
        presentation: ["vertice-presentation", verticeID]
      }
    }]);
  }
}
