// generated by genController.go
package controllers

import (
	"net/http"

	"github.com/thomaspeugeot/metabaron/examples/laundromat/go/models"
	"github.com/thomaspeugeot/metabaron/examples/laundromat/go/orm"

	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"
)

// MachineSingloton is the type of the singloton of the controllers package
// this singloton allows for the attachment of callbacks to controllers function
type MachineSingloton struct {
	Callback MachineCallbackInterface
}

// MachineCallbackInterface is the interface that must be supported 
// by the Struct that is attached to the singloton
type MachineCallbackInterface interface {
	PostMachine(machine *models.Machine)
}

// MachineSinglotonID is the singloton variable
var MachineSinglotonID MachineSingloton

// An MachineID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getMachine updateMachine deleteMachine getMachineWashersViaMachine
type MachineID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// MachineInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postMachine updateMachine
type MachineInput struct {
	// The Machine to submit or modify
	// in: body
	Machine *orm.MachineAPI
}

// GetMachines
//
// swagger:route GET /machines machines getMachines
// 
// Get all machines
//
// Responses:
//    default: genericError
//        200: machineDBsResponse
func GetMachines(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	var machines []orm.MachineDB
	query := db.Find(&machines)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	c.JSON(http.StatusOK, machines)
}

// PostMachine
//
// swagger:route POST /machines machines postMachine
// 
// Creates a machine
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: machineDBResponse
func PostMachine(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Validate input
	var input orm.MachineAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create machine
	machineDB := orm.MachineDB{}
	machineDB.MachineAPI = input

	query := db.Create(&machineDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	if MachineSinglotonID.Callback != nil {
		MachineSinglotonID.Callback.PostMachine(&(machineDB.Machine))
	}

	c.JSON(http.StatusOK, machineDB)
}

// GetMachine
//
// swagger:route GET /machines/{ID} machines getMachine
//
// Gets the details for a machine.
//
// Responses:
//    default: genericError
//        200: machineDBResponse
func GetMachine(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get machine in DB
	var machine orm.MachineDB
	if err := db.First(&machine, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	c.JSON(http.StatusOK, machine)
}

// UpdateMachine
// 
// swagger:route PATCH /machines/{ID} machines updateMachine
//
// Update a machine
//
// Responses:
//    default: genericError
//        200: machineDBResponse
func UpdateMachine(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var machineDB orm.MachineDB

	// fetch the machine
	query := db.First(&machineDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.MachineAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update 
	query = db.Model(&machineDB).Updates(input)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}	

	// return status OK with the marshalling of the the machineDB
	c.JSON(http.StatusOK, machineDB)
}

// DeleteMachine
//
// swagger:route DELETE /machines/{ID} machines deleteMachine
//
// Delete a machine
//
// Responses:
//    default: genericError
func DeleteMachine(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var machineDB orm.MachineDB
	if err := db.First(&machineDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&machineDB)

	c.JSON(http.StatusOK, gin.H{"data": true})
}


// GetMachineWashersViaMachine swagger:route GET /machines/{ID}/washersviamachine machines getMachineWashersViaMachine
//
// Gets washers of machine via field Machine of Washer.
//
// Responses:
//    default: genericError
//        200: washerDBsResponse
func GetMachineWashersViaMachine(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get machine
	var machine orm.MachineDB
	if err := db.First(&machine, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get washers
	var washerDBs orm.WasherDBs
	columnName := gorm.ToColumnName("MachineID")
	query := db.Where( genQuery(columnName), machine.ID).Find(&washerDBs)

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	c.JSON(http.StatusOK, washerDBs)
}

