// generated by genController.go
package controllers

import (
	"net/http"

	"github.com/thomaspeugeot/sandbox02/laundromat/go/models"
	"github.com/thomaspeugeot/sandbox02/laundromat/go/orm"

	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"
)

// WasherSingloton is the type of the singloton of the controllers package
// this singloton allows for the attachment of callbacks to controllers function
type WasherSingloton struct {
	Callback WasherCallbackInterface
}

// WasherCallbackInterface is the interface that must be supported
// by the Struct that is attached to the singloton
type WasherCallbackInterface interface {
	PostWasher(washer *models.Washer)
}

// WasherSinglotonID is the singloton variable
var WasherSinglotonID WasherSingloton

// An WasherID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getWasher updateWasher deleteWasher getWasherMachine
type WasherID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// WasherInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postWasher updateWasher
type WasherInput struct {
	// The Washer to submit or modify
	// in: body
	Washer *orm.WasherAPI
}

// GetWashers
//
// swagger:route GET /washers washers getWashers
//
// Get all washers
//
// Responses:
//    default: genericError
//        200: washerDBsResponse
func GetWashers(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	var washers []orm.WasherDB
	query := db.Find(&washers)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	c.JSON(http.StatusOK, washers)
}

// PostWasher
//
// swagger:route POST /washers washers postWasher
//
// Creates a washer
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: washerDBResponse
func PostWasher(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Validate input
	var input orm.WasherAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create washer
	washerDB := orm.WasherDB{}
	washerDB.WasherAPI = input

	query := db.Create(&washerDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	if WasherSinglotonID.Callback != nil {
		WasherSinglotonID.Callback.PostWasher(&(washerDB.Washer))
	}

	c.JSON(http.StatusOK, washerDB)
}

// GetWasher
//
// swagger:route GET /washers/{ID} washers getWasher
//
// Gets the details for a washer.
//
// Responses:
//    default: genericError
//        200: washerDBResponse
func GetWasher(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get washer in DB
	var washer orm.WasherDB
	if err := db.First(&washer, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	c.JSON(http.StatusOK, washer)
}

// UpdateWasher
//
// swagger:route PATCH /washers/{ID} washers updateWasher
//
// Update a washer
//
// Responses:
//    default: genericError
//        200: washerDBResponse
func UpdateWasher(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var washerDB orm.WasherDB

	// fetch the washer
	query := db.First(&washerDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.WasherAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	query = db.Model(&washerDB).Updates(input)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// return status OK with the marshalling of the the washerDB
	c.JSON(http.StatusOK, washerDB)
}

// DeleteWasher
//
// swagger:route DELETE /washers/{ID} washers deleteWasher
//
// Delete a washer
//
// Responses:
//    default: genericError
func DeleteWasher(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var washerDB orm.WasherDB
	if err := db.First(&washerDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&washerDB)

	c.JSON(http.StatusOK, gin.H{"data": true})
}

// GetWasherMachine swagger:route GET /washers/{ID}/machine washers getWasherMachine
//
// Gets machine of a washer.
//
// Responses:
//    default: genericError
//        200: machineDBResponse
func GetWasherMachine(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get washer in DB
	var washer orm.WasherDB
	if err := db.First(&washer, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Get machine in DB
	var machineMachine orm.MachineDB
	if err := db.First(&machineMachine, *washer.MachineID).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	c.JSON(http.StatusOK, machineMachine)
}
