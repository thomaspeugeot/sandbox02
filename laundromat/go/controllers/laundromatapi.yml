consumes:
- application/json
definitions:
  AgentInterface:
    description: AgentInterface is the interface that must be followed by part of
      the simulation
    type: object
    x-go-package: github.com/thomaspeugeot/metabaron/libs/animah/go/models
  Classdiagram:
    description: |-
      Classdiagram diagram struct store a class diagram
      temporary here
    properties:
      Classshapes:
        description: |-
          this is the memory model (and not the "memory motel" of the Rolling Stones)
          it is not ignored by swagger because it is used by the angular model
        items:
          $ref: '#/definitions/Classshape'
        type: array
      Name:
        type: string
    type: object
    x-go-package: github.com/thomaspeugeot/metabaron/libs/gorgo/go/models
  Classshape:
    description: Classshape mirrors joint.shapes.uml.Class
    properties:
      Fields:
        description: models of the composition of Field
        items:
          $ref: '#/definitions/Field'
        type: array
      Links:
        description: models of the composition of Link
        items:
          $ref: '#/definitions/Link'
        type: array
      Name:
        description: for technical reasons
        type: string
      Structname:
        type: string
      Width:
        description: |-
          with and height of the shape when they are rendered on SVG or with jointjs
          They are optional fields. they can be computed when empty
        format: double
        type: number
        x-go-name: Heigth
    type: object
    x-go-package: github.com/thomaspeugeot/metabaron/libs/gorgo/go/models
  Duration:
    description: |-
      A Duration represents the elapsed time between two instants
      as an int64 nanosecond count. The representation limits the
      largest representable duration to approximately 290 years.
    format: int64
    type: integer
    x-go-package: time
  EngineSpecificInterface:
    description: |-
      EngineSpecificInterface is the callback support for
      events that happens on the generic engine
    type: object
    x-go-package: github.com/thomaspeugeot/metabaron/libs/animah/go/models
  EventInterface:
    title: EventInterface ...
  Field:
    description: Field represent the UML Field of a Class (a "struct" in go)
    properties:
      Fieldname:
        type: string
      Fieldtypename:
        type: string
      Name:
        type: string
      Structname:
        type: string
    type: object
    x-go-package: github.com/thomaspeugeot/metabaron/libs/gorgo/go/models
  Link:
    description: |-
      Link represent the UML Link in any diagram
      uni-directional https://en.wikipedia.org/wiki/Association_(object-oriented_programming)
      More specificaly It is a 0..1 ---> 0..1
    properties:
      Fieldname:
        type: string
      Fieldtypename:
        type: string
      Name:
        type: string
      Structname:
        type: string
    type: object
    x-go-package: github.com/thomaspeugeot/metabaron/libs/gorgo/go/models
  State:
    description: State mirrors joint.shapes.uml.State
    properties:
      Name:
        type: string
      X:
        format: double
        type: number
      "Y":
        format: double
        type: number
    type: object
    x-go-package: github.com/thomaspeugeot/metabaron/libs/gorgo/go/models
  Umlsc:
    description: |-
      Umlsc diagram struct store a class diagram
      temporary here
    properties:
      Activestate:
        description: |-
          in this version, only one state is active mong the states
          (with the embedded states version, that might change)
        type: string
      Name:
        type: string
      States:
        description: |-
          this is the memory model (and not the "memory motel" of the Rolling Stones)
          it is not ignored by swagger because it is used by the angular model
        items:
          $ref: '#/definitions/State'
        type: array
    type: object
    x-go-package: github.com/thomaspeugeot/metabaron/libs/gorgo/go/models
  actionAPI:
    description: |-
      for POST, API, one needs the fields of the model as well as the fields
      from associations ("Has One" and "Has Many") that are generated to
      fullfill the ORM requirements for associations
    properties:
      Name:
        type: string
    title: ActionAPI is the input in POST API
    type: object
    x-go-name: ActionAPI
    x-go-package: github.com/thomaspeugeot/metabaron/libs/animah/go/orm
  actionDB:
    description: 'It incorporates all fields : from the model, from the generated
      field for the API and the GORM ID'
    properties:
      CreatedAt:
        format: date-time
        type: string
      DeletedAt:
        format: date-time
        type: string
      ID:
        format: uint64
        type: integer
      Name:
        type: string
      UpdatedAt:
        format: date-time
        type: string
    title: ActionDB describes a action in the database
    type: object
    x-go-name: ActionDB
    x-go-package: github.com/thomaspeugeot/metabaron/libs/animah/go/orm
  agentAPI:
    description: |-
      for POST, API, one needs the fields of the model as well as the fields
      from associations ("Has One" and "Has Many") that are generated to
      fullfill the ORM requirements for associations
    properties:
      EngineID:
        description: |-
          field Engine is a pointer to another Struct (optional or 0..1)
          This field is generated into another field to enable a GORM `HAS ONE` association
        format: uint64
        type: integer
      EngineName:
        description: the associated Struct has a Name field, therefore it is generated
          to compute views with this relation
        type: string
      TechName:
        type: string
    title: AgentAPI is the input in POST API
    type: object
    x-go-name: AgentAPI
    x-go-package: github.com/thomaspeugeot/metabaron/libs/animah/go/orm
  agentDB:
    description: 'It incorporates all fields : from the model, from the generated
      field for the API and the GORM ID'
    properties:
      CreatedAt:
        format: date-time
        type: string
      DeletedAt:
        format: date-time
        type: string
      EngineID:
        description: |-
          field Engine is a pointer to another Struct (optional or 0..1)
          This field is generated into another field to enable a GORM `HAS ONE` association
        format: uint64
        type: integer
      EngineName:
        description: the associated Struct has a Name field, therefore it is generated
          to compute views with this relation
        type: string
      ID:
        format: uint64
        type: integer
      TechName:
        type: string
      UpdatedAt:
        format: date-time
        type: string
    title: AgentDB describes a agent in the database
    type: object
    x-go-name: AgentDB
    x-go-package: github.com/thomaspeugeot/metabaron/libs/animah/go/orm
  classdiagramAPI:
    description: |-
      for POST, API, one needs the fields of the model as well as the fields
      from associations ("Has One" and "Has Many") that are generated to
      fullfill the ORM requirements for associations
    properties:
      Classshapes:
        description: |-
          this is the memory model (and not the "memory motel" of the Rolling Stones)
          it is not ignored by swagger because it is used by the angular model
        items:
          $ref: '#/definitions/Classshape'
        type: array
      Name:
        type: string
      Pkgelt_ClassdiagramsDBID:
        description: ID generated for the implementation of the field Classdiagram{}.Classdiagrams
          []*Pkgelt
        format: uint64
        type: integer
    title: ClassdiagramAPI is the input in POST API
    type: object
    x-go-name: ClassdiagramAPI
    x-go-package: github.com/thomaspeugeot/metabaron/libs/gorgo/go/orm
  classdiagramDB:
    description: 'It incorporates all fields : from the model, from the generated
      field for the API and the GORM ID'
    properties:
      Classshapes:
        description: |-
          this is the memory model (and not the "memory motel" of the Rolling Stones)
          it is not ignored by swagger because it is used by the angular model
        items:
          $ref: '#/definitions/Classshape'
        type: array
      CreatedAt:
        format: date-time
        type: string
      DeletedAt:
        format: date-time
        type: string
      ID:
        format: uint64
        type: integer
      Name:
        type: string
      Pkgelt_ClassdiagramsDBID:
        description: ID generated for the implementation of the field Classdiagram{}.Classdiagrams
          []*Pkgelt
        format: uint64
        type: integer
      UpdatedAt:
        format: date-time
        type: string
    title: ClassdiagramDB describes a classdiagram in the database
    type: object
    x-go-name: ClassdiagramDB
    x-go-package: github.com/thomaspeugeot/metabaron/libs/gorgo/go/orm
  classshapeAPI:
    description: |-
      for POST, API, one needs the fields of the model as well as the fields
      from associations ("Has One" and "Has Many") that are generated to
      fullfill the ORM requirements for associations
    properties:
      Classdiagram_ClassshapesDBID:
        description: ID generated for the implementation of the field Classshape{}.Classshapes
          []*Classdiagram
        format: uint64
        type: integer
      Fields:
        description: models of the composition of Field
        items:
          $ref: '#/definitions/Field'
        type: array
      Links:
        description: models of the composition of Link
        items:
          $ref: '#/definitions/Link'
        type: array
      Name:
        description: for technical reasons
        type: string
      PositionID:
        description: |-
          field Position is a pointer to another Struct (optional or 0..1)
          This field is generated into another field to enable a GORM `HAS ONE` association
        format: uint64
        type: integer
      PositionName:
        description: the associated Struct has a Name field, therefore it is generated
          to compute views with this relation
        type: string
      Structname:
        type: string
      Width:
        description: |-
          with and height of the shape when they are rendered on SVG or with jointjs
          They are optional fields. they can be computed when empty
        format: double
        type: number
        x-go-name: Heigth
    title: ClassshapeAPI is the input in POST API
    type: object
    x-go-name: ClassshapeAPI
    x-go-package: github.com/thomaspeugeot/metabaron/libs/gorgo/go/orm
  classshapeDB:
    description: 'It incorporates all fields : from the model, from the generated
      field for the API and the GORM ID'
    properties:
      Classdiagram_ClassshapesDBID:
        description: ID generated for the implementation of the field Classshape{}.Classshapes
          []*Classdiagram
        format: uint64
        type: integer
      CreatedAt:
        format: date-time
        type: string
      DeletedAt:
        format: date-time
        type: string
      Fields:
        description: models of the composition of Field
        items:
          $ref: '#/definitions/Field'
        type: array
      ID:
        format: uint64
        type: integer
      Links:
        description: models of the composition of Link
        items:
          $ref: '#/definitions/Link'
        type: array
      Name:
        description: for technical reasons
        type: string
      PositionID:
        description: |-
          field Position is a pointer to another Struct (optional or 0..1)
          This field is generated into another field to enable a GORM `HAS ONE` association
        format: uint64
        type: integer
      PositionName:
        description: the associated Struct has a Name field, therefore it is generated
          to compute views with this relation
        type: string
      Structname:
        type: string
      UpdatedAt:
        format: date-time
        type: string
      Width:
        description: |-
          with and height of the shape when they are rendered on SVG or with jointjs
          They are optional fields. they can be computed when empty
        format: double
        type: number
        x-go-name: Heigth
    title: ClassshapeDB describes a classshape in the database
    type: object
    x-go-name: ClassshapeDB
    x-go-package: github.com/thomaspeugeot/metabaron/libs/gorgo/go/orm
  engineAPI:
    description: |-
      for POST, API, one needs the fields of the model as well as the fields
      from associations ("Has One" and "Has Many") that are generated to
      fullfill the ORM requirements for associations
    properties:
      ControlMode:
        description: control mode.
        enum:
        - Autonomous
        - ClientControl
        type: string
      CurrentTime:
        description: CurrentTime is the simulation current time
        format: date-time
        type: string
      EndTime:
        description: EndTime is the simulatio end date
        format: date-time
        type: string
      EngineSpecificInteface:
        $ref: '#/definitions/EngineSpecificInterface'
      Fired:
        description: Fired events
        format: int64
        type: integer
      LastEvent:
        $ref: '#/definitions/EventInterface'
      LastEventAgent:
        $ref: '#/definitions/AgentInterface'
      Name:
        description: Name of the engine "laundramat" for instance
        type: string
      Speed:
        description: Speed compared to realtime
        format: double
        type: number
      StartTime:
        description: StartTime is the simulation start date
        format: date-time
        type: string
      State:
        description: engine state
        enum:
        - RUNNING
        - PAUSED
        - OVER
        type: string
    title: EngineAPI is the input in POST API
    type: object
    x-go-name: EngineAPI
    x-go-package: github.com/thomaspeugeot/metabaron/libs/animah/go/orm
  engineDB:
    description: 'It incorporates all fields : from the model, from the generated
      field for the API and the GORM ID'
    properties:
      ControlMode:
        description: control mode.
        enum:
        - Autonomous
        - ClientControl
        type: string
      CreatedAt:
        format: date-time
        type: string
      CurrentTime:
        description: CurrentTime is the simulation current time
        format: date-time
        type: string
      DeletedAt:
        format: date-time
        type: string
      EndTime:
        description: EndTime is the simulatio end date
        format: date-time
        type: string
      EngineSpecificInteface:
        $ref: '#/definitions/EngineSpecificInterface'
      Fired:
        description: Fired events
        format: int64
        type: integer
      ID:
        format: uint64
        type: integer
      LastEvent:
        $ref: '#/definitions/EventInterface'
      LastEventAgent:
        $ref: '#/definitions/AgentInterface'
      Name:
        description: Name of the engine "laundramat" for instance
        type: string
      Speed:
        description: Speed compared to realtime
        format: double
        type: number
      StartTime:
        description: StartTime is the simulation start date
        format: date-time
        type: string
      State:
        description: engine state
        enum:
        - RUNNING
        - PAUSED
        - OVER
        type: string
      UpdatedAt:
        format: date-time
        type: string
    title: EngineDB describes a engine in the database
    type: object
    x-go-name: EngineDB
    x-go-package: github.com/thomaspeugeot/metabaron/libs/animah/go/orm
  fieldAPI:
    description: |-
      for POST, API, one needs the fields of the model as well as the fields
      from associations ("Has One" and "Has Many") that are generated to
      fullfill the ORM requirements for associations
    properties:
      Classshape_FieldsDBID:
        description: ID generated for the implementation of the field Field{}.Fields
          []*Classshape
        format: uint64
        type: integer
      Fieldname:
        type: string
      Fieldtypename:
        type: string
      Name:
        type: string
      Structname:
        type: string
    title: FieldAPI is the input in POST API
    type: object
    x-go-name: FieldAPI
    x-go-package: github.com/thomaspeugeot/metabaron/libs/gorgo/go/orm
  fieldDB:
    description: 'It incorporates all fields : from the model, from the generated
      field for the API and the GORM ID'
    properties:
      Classshape_FieldsDBID:
        description: ID generated for the implementation of the field Field{}.Fields
          []*Classshape
        format: uint64
        type: integer
      CreatedAt:
        format: date-time
        type: string
      DeletedAt:
        format: date-time
        type: string
      Fieldname:
        type: string
      Fieldtypename:
        type: string
      ID:
        format: uint64
        type: integer
      Name:
        type: string
      Structname:
        type: string
      UpdatedAt:
        format: date-time
        type: string
    title: FieldDB describes a field in the database
    type: object
    x-go-name: FieldDB
    x-go-package: github.com/thomaspeugeot/metabaron/libs/gorgo/go/orm
  gorgoactionAPI:
    description: |-
      for POST, API, one needs the fields of the model as well as the fields
      from associations ("Has One" and "Has Many") that are generated to
      fullfill the ORM requirements for associations
    properties:
      Name:
        description: The Name of the Action
        type: string
      Type:
        description: The type of the action
        enum:
        - UNMARSHALL_ALL_DIAGRAMS
        - MARSHALL_ALL_DIAGRAMS
        - PRINT_ALL_DOCUMENTS
        type: string
    title: GorgoactionAPI is the input in POST API
    type: object
    x-go-name: GorgoactionAPI
    x-go-package: github.com/thomaspeugeot/metabaron/libs/gorgo/go/orm
  gorgoactionDB:
    description: 'It incorporates all fields : from the model, from the generated
      field for the API and the GORM ID'
    properties:
      CreatedAt:
        format: date-time
        type: string
      DeletedAt:
        format: date-time
        type: string
      ID:
        format: uint64
        type: integer
      Name:
        description: The Name of the Action
        type: string
      Type:
        description: The type of the action
        enum:
        - UNMARSHALL_ALL_DIAGRAMS
        - MARSHALL_ALL_DIAGRAMS
        - PRINT_ALL_DOCUMENTS
        type: string
      UpdatedAt:
        format: date-time
        type: string
    title: GorgoactionDB describes a gorgoaction in the database
    type: object
    x-go-name: GorgoactionDB
    x-go-package: github.com/thomaspeugeot/metabaron/libs/gorgo/go/orm
  linkAPI:
    description: |-
      for POST, API, one needs the fields of the model as well as the fields
      from associations ("Has One" and "Has Many") that are generated to
      fullfill the ORM requirements for associations
    properties:
      Classshape_LinksDBID:
        description: ID generated for the implementation of the field Link{}.Links
          []*Classshape
        format: uint64
        type: integer
      Fieldname:
        type: string
      Fieldtypename:
        type: string
      MiddleverticeID:
        description: |-
          field Middlevertice is a pointer to another Struct (optional or 0..1)
          This field is generated into another field to enable a GORM `HAS ONE` association
        format: uint64
        type: integer
      MiddleverticeName:
        description: the associated Struct has a Name field, therefore it is generated
          to compute views with this relation
        type: string
      Name:
        type: string
      Structname:
        type: string
    title: LinkAPI is the input in POST API
    type: object
    x-go-name: LinkAPI
    x-go-package: github.com/thomaspeugeot/metabaron/libs/gorgo/go/orm
  linkDB:
    description: 'It incorporates all fields : from the model, from the generated
      field for the API and the GORM ID'
    properties:
      Classshape_LinksDBID:
        description: ID generated for the implementation of the field Link{}.Links
          []*Classshape
        format: uint64
        type: integer
      CreatedAt:
        format: date-time
        type: string
      DeletedAt:
        format: date-time
        type: string
      Fieldname:
        type: string
      Fieldtypename:
        type: string
      ID:
        format: uint64
        type: integer
      MiddleverticeID:
        description: |-
          field Middlevertice is a pointer to another Struct (optional or 0..1)
          This field is generated into another field to enable a GORM `HAS ONE` association
        format: uint64
        type: integer
      MiddleverticeName:
        description: the associated Struct has a Name field, therefore it is generated
          to compute views with this relation
        type: string
      Name:
        type: string
      Structname:
        type: string
      UpdatedAt:
        format: date-time
        type: string
    title: LinkDB describes a link in the database
    type: object
    x-go-name: LinkDB
    x-go-package: github.com/thomaspeugeot/metabaron/libs/gorgo/go/orm
  machineAPI:
    description: |-
      for POST, API, one needs the fields of the model as well as the fields
      from associations ("Has One" and "Has Many") that are generated to
      fullfill the ORM requirements for associations
    properties:
      Cleanedlaundry:
        description: Cleanedlaundry indicate wether the laundry in the drum is wet
          (it has been cleand)
        type: boolean
      DrumLoad:
        description: DrumLoad in kg
        format: double
        type: number
      Name:
        description: Name is a mandatory field with metab
        type: string
      RemainingTime:
        $ref: '#/definitions/Duration'
      RemainingTimeMinutes:
        format: int64
        type: integer
      State:
        description: State of the machine
        enum:
        - MACHINE_DOOR_OPEN
        - MACHINE_DOOR_CLOSED_RUNNING
        - MACHINE_DOOR_CLOSED_IDLE
        type: string
    title: MachineAPI is the input in POST API
    type: object
    x-go-name: MachineAPI
    x-go-package: github.com/thomaspeugeot/metabaron/examples/laundromat/go/orm
  machineDB:
    description: 'It incorporates all fields : from the model, from the generated
      field for the API and the GORM ID'
    properties:
      Cleanedlaundry:
        description: Cleanedlaundry indicate wether the laundry in the drum is wet
          (it has been cleand)
        type: boolean
      CreatedAt:
        format: date-time
        type: string
      DeletedAt:
        format: date-time
        type: string
      DrumLoad:
        description: DrumLoad in kg
        format: double
        type: number
      ID:
        format: uint64
        type: integer
      Name:
        description: Name is a mandatory field with metab
        type: string
      RemainingTime:
        $ref: '#/definitions/Duration'
      RemainingTimeMinutes:
        format: int64
        type: integer
      State:
        description: State of the machine
        enum:
        - MACHINE_DOOR_OPEN
        - MACHINE_DOOR_CLOSED_RUNNING
        - MACHINE_DOOR_CLOSED_IDLE
        type: string
      UpdatedAt:
        format: date-time
        type: string
    title: MachineDB describes a machine in the database
    type: object
    x-go-name: MachineDB
    x-go-package: github.com/thomaspeugeot/metabaron/examples/laundromat/go/orm
  pkgeltAPI:
    description: |-
      for POST, API, one needs the fields of the model as well as the fields
      from associations ("Has One" and "Has Many") that are generated to
      fullfill the ORM requirements for associations
    properties:
      Classdiagrams:
        items:
          $ref: '#/definitions/Classdiagram'
        type: array
      Name:
        description: for metabaron
        type: string
      Umlscs:
        items:
          $ref: '#/definitions/Umlsc'
        type: array
    title: PkgeltAPI is the input in POST API
    type: object
    x-go-name: PkgeltAPI
    x-go-package: github.com/thomaspeugeot/metabaron/libs/gorgo/go/orm
  pkgeltDB:
    description: 'It incorporates all fields : from the model, from the generated
      field for the API and the GORM ID'
    properties:
      Classdiagrams:
        items:
          $ref: '#/definitions/Classdiagram'
        type: array
      CreatedAt:
        format: date-time
        type: string
      DeletedAt:
        format: date-time
        type: string
      ID:
        format: uint64
        type: integer
      Name:
        description: for metabaron
        type: string
      Umlscs:
        items:
          $ref: '#/definitions/Umlsc'
        type: array
      UpdatedAt:
        format: date-time
        type: string
    title: PkgeltDB describes a pkgelt in the database
    type: object
    x-go-name: PkgeltDB
    x-go-package: github.com/thomaspeugeot/metabaron/libs/gorgo/go/orm
  positionAPI:
    description: |-
      for POST, API, one needs the fields of the model as well as the fields
      from associations ("Has One" and "Has Many") that are generated to
      fullfill the ORM requirements for associations
    properties:
      Name:
        type: string
      X:
        format: double
        type: number
      "Y":
        format: double
        type: number
    title: PositionAPI is the input in POST API
    type: object
    x-go-name: PositionAPI
    x-go-package: github.com/thomaspeugeot/metabaron/libs/gorgo/go/orm
  positionDB:
    description: 'It incorporates all fields : from the model, from the generated
      field for the API and the GORM ID'
    properties:
      CreatedAt:
        format: date-time
        type: string
      DeletedAt:
        format: date-time
        type: string
      ID:
        format: uint64
        type: integer
      Name:
        type: string
      UpdatedAt:
        format: date-time
        type: string
      X:
        format: double
        type: number
      "Y":
        format: double
        type: number
    title: PositionDB describes a position in the database
    type: object
    x-go-name: PositionDB
    x-go-package: github.com/thomaspeugeot/metabaron/libs/gorgo/go/orm
  stateAPI:
    description: |-
      for POST, API, one needs the fields of the model as well as the fields
      from associations ("Has One" and "Has Many") that are generated to
      fullfill the ORM requirements for associations
    properties:
      Name:
        type: string
      Umlsc_StatesDBID:
        description: ID generated for the implementation of the field State{}.States
          []*Umlsc
        format: uint64
        type: integer
      X:
        format: double
        type: number
      "Y":
        format: double
        type: number
    title: StateAPI is the input in POST API
    type: object
    x-go-name: StateAPI
    x-go-package: github.com/thomaspeugeot/metabaron/libs/gorgo/go/orm
  stateDB:
    description: 'It incorporates all fields : from the model, from the generated
      field for the API and the GORM ID'
    properties:
      CreatedAt:
        format: date-time
        type: string
      DeletedAt:
        format: date-time
        type: string
      ID:
        format: uint64
        type: integer
      Name:
        type: string
      Umlsc_StatesDBID:
        description: ID generated for the implementation of the field State{}.States
          []*Umlsc
        format: uint64
        type: integer
      UpdatedAt:
        format: date-time
        type: string
      X:
        format: double
        type: number
      "Y":
        format: double
        type: number
    title: StateDB describes a state in the database
    type: object
    x-go-name: StateDB
    x-go-package: github.com/thomaspeugeot/metabaron/libs/gorgo/go/orm
  umlscAPI:
    description: |-
      for POST, API, one needs the fields of the model as well as the fields
      from associations ("Has One" and "Has Many") that are generated to
      fullfill the ORM requirements for associations
    properties:
      Activestate:
        description: |-
          in this version, only one state is active mong the states
          (with the embedded states version, that might change)
        type: string
      Name:
        type: string
      Pkgelt_UmlscsDBID:
        description: ID generated for the implementation of the field Umlsc{}.Umlscs
          []*Pkgelt
        format: uint64
        type: integer
      States:
        description: |-
          this is the memory model (and not the "memory motel" of the Rolling Stones)
          it is not ignored by swagger because it is used by the angular model
        items:
          $ref: '#/definitions/State'
        type: array
    title: UmlscAPI is the input in POST API
    type: object
    x-go-name: UmlscAPI
    x-go-package: github.com/thomaspeugeot/metabaron/libs/gorgo/go/orm
  umlscDB:
    description: 'It incorporates all fields : from the model, from the generated
      field for the API and the GORM ID'
    properties:
      Activestate:
        description: |-
          in this version, only one state is active mong the states
          (with the embedded states version, that might change)
        type: string
      CreatedAt:
        format: date-time
        type: string
      DeletedAt:
        format: date-time
        type: string
      ID:
        format: uint64
        type: integer
      Name:
        type: string
      Pkgelt_UmlscsDBID:
        description: ID generated for the implementation of the field Umlsc{}.Umlscs
          []*Pkgelt
        format: uint64
        type: integer
      States:
        description: |-
          this is the memory model (and not the "memory motel" of the Rolling Stones)
          it is not ignored by swagger because it is used by the angular model
        items:
          $ref: '#/definitions/State'
        type: array
      UpdatedAt:
        format: date-time
        type: string
    title: UmlscDB describes a umlsc in the database
    type: object
    x-go-name: UmlscDB
    x-go-package: github.com/thomaspeugeot/metabaron/libs/gorgo/go/orm
  verticeAPI:
    description: |-
      for POST, API, one needs the fields of the model as well as the fields
      from associations ("Has One" and "Has Many") that are generated to
      fullfill the ORM requirements for associations
    properties:
      Name:
        type: string
      X:
        format: double
        type: number
      "Y":
        format: double
        type: number
    title: VerticeAPI is the input in POST API
    type: object
    x-go-name: VerticeAPI
    x-go-package: github.com/thomaspeugeot/metabaron/libs/gorgo/go/orm
  verticeDB:
    description: 'It incorporates all fields : from the model, from the generated
      field for the API and the GORM ID'
    properties:
      CreatedAt:
        format: date-time
        type: string
      DeletedAt:
        format: date-time
        type: string
      ID:
        format: uint64
        type: integer
      Name:
        type: string
      UpdatedAt:
        format: date-time
        type: string
      X:
        format: double
        type: number
      "Y":
        format: double
        type: number
    title: VerticeDB describes a vertice in the database
    type: object
    x-go-name: VerticeDB
    x-go-package: github.com/thomaspeugeot/metabaron/libs/gorgo/go/orm
  washerAPI:
    description: |-
      for POST, API, one needs the fields of the model as well as the fields
      from associations ("Has One" and "Has Many") that are generated to
      fullfill the ORM requirements for associations
    properties:
      CleanedLaundryWeight:
        description: |-
          CleanedLaundryWeight is the cumulative cleaned laundry
          the Washer. in kilo
        format: double
        type: number
      LaundryWeight:
        description: |-
          LaundryWeight is the drum fill level perceived by
          the Washer. in kilo
        format: double
        type: number
      MachineID:
        description: |-
          field Machine is a pointer to another Struct (optional or 0..1)
          This field is generated into another field to enable a GORM `HAS ONE` association
        format: uint64
        type: integer
      MachineName:
        description: the associated Struct has a Name field, therefore it is generated
          to compute views with this relation
        type: string
      Name:
        description: Name is a mandatory field with metab
        type: string
      State:
        description: State
        enum:
        - WASHER_IDLE
        - WASHER_LOAD_DRUM
        - WASHER_OPEN_DOOR
        - WASHER_WAIT_PROGRAM_END
        - WASHER_CLOSE_DOOR
        - WASHER_UNLOAD_DRUM
        - WASHER_START_PROGRAM
        type: string
      TechName:
        type: string
    title: WasherAPI is the input in POST API
    type: object
    x-go-name: WasherAPI
    x-go-package: github.com/thomaspeugeot/metabaron/examples/laundromat/go/orm
  washerDB:
    description: 'It incorporates all fields : from the model, from the generated
      field for the API and the GORM ID'
    properties:
      CleanedLaundryWeight:
        description: |-
          CleanedLaundryWeight is the cumulative cleaned laundry
          the Washer. in kilo
        format: double
        type: number
      CreatedAt:
        format: date-time
        type: string
      DeletedAt:
        format: date-time
        type: string
      ID:
        format: uint64
        type: integer
      LaundryWeight:
        description: |-
          LaundryWeight is the drum fill level perceived by
          the Washer. in kilo
        format: double
        type: number
      MachineID:
        description: |-
          field Machine is a pointer to another Struct (optional or 0..1)
          This field is generated into another field to enable a GORM `HAS ONE` association
        format: uint64
        type: integer
      MachineName:
        description: the associated Struct has a Name field, therefore it is generated
          to compute views with this relation
        type: string
      Name:
        description: Name is a mandatory field with metab
        type: string
      State:
        description: State
        enum:
        - WASHER_IDLE
        - WASHER_LOAD_DRUM
        - WASHER_OPEN_DOOR
        - WASHER_WAIT_PROGRAM_END
        - WASHER_CLOSE_DOOR
        - WASHER_UNLOAD_DRUM
        - WASHER_START_PROGRAM
        type: string
      TechName:
        type: string
      UpdatedAt:
        format: date-time
        type: string
    title: WasherDB describes a washer in the database
    type: object
    x-go-name: WasherDB
    x-go-package: github.com/thomaspeugeot/metabaron/examples/laundromat/go/orm
host: localhost:8080
info:
  description: laundromat exposes types of a package.
  title: |-
    generated by genGoDocs.go
    Package laundromat laundromat backend API
  version: "0.1"
paths:
  /actions:
    get:
      description: Get all actions
      operationId: getActions
      responses:
        "200":
          $ref: '#/responses/actionDBsResponse'
        default:
          $ref: '#/responses/genericError'
      tags:
      - actions
    post:
      consumes:
      - application/json
      description: Creates a action
      operationId: postAction
      parameters:
      - description: The Action to submit or modify
        in: body
        name: Action
        schema:
          $ref: '#/definitions/actionAPI'
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/actionDBResponse'
      tags:
      - actions
  /actions/{ID}:
    delete:
      description: Delete a action
      operationId: deleteAction
      parameters:
      - description: The ID of the order
        format: int64
        in: path
        name: ID
        required: true
        type: integer
      responses:
        default:
          $ref: '#/responses/genericError'
      tags:
      - actions
    get:
      operationId: getAction
      parameters:
      - description: The ID of the order
        format: int64
        in: path
        name: ID
        required: true
        type: integer
      responses:
        "200":
          $ref: '#/responses/actionDBResponse'
        default:
          $ref: '#/responses/genericError'
      summary: Gets the details for a action.
      tags:
      - actions
    patch:
      description: Update a action
      operationId: updateAction
      parameters:
      - description: The ID of the order
        format: int64
        in: path
        name: ID
        required: true
        type: integer
      - description: The Action to submit or modify
        in: body
        name: Action
        schema:
          $ref: '#/definitions/actionAPI'
      responses:
        "200":
          $ref: '#/responses/actionDBResponse'
        default:
          $ref: '#/responses/genericError'
      tags:
      - actions
  /agents:
    get:
      description: Get all agents
      operationId: getAgents
      responses:
        "200":
          $ref: '#/responses/agentDBsResponse'
        default:
          $ref: '#/responses/genericError'
      tags:
      - agents
    post:
      consumes:
      - application/json
      description: Creates a agent
      operationId: postAgent
      parameters:
      - description: The Agent to submit or modify
        in: body
        name: Agent
        schema:
          $ref: '#/definitions/agentAPI'
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/agentDBResponse'
      tags:
      - agents
  /agents/{ID}:
    delete:
      description: Delete a agent
      operationId: deleteAgent
      parameters:
      - description: The ID of the order
        format: int64
        in: path
        name: ID
        required: true
        type: integer
      responses:
        default:
          $ref: '#/responses/genericError'
      tags:
      - agents
    get:
      operationId: getAgent
      parameters:
      - description: The ID of the order
        format: int64
        in: path
        name: ID
        required: true
        type: integer
      responses:
        "200":
          $ref: '#/responses/agentDBResponse'
        default:
          $ref: '#/responses/genericError'
      summary: Gets the details for a agent.
      tags:
      - agents
    patch:
      description: Update a agent
      operationId: updateAgent
      parameters:
      - description: The ID of the order
        format: int64
        in: path
        name: ID
        required: true
        type: integer
      - description: The Agent to submit or modify
        in: body
        name: Agent
        schema:
          $ref: '#/definitions/agentAPI'
      responses:
        "200":
          $ref: '#/responses/agentDBResponse'
        default:
          $ref: '#/responses/genericError'
      tags:
      - agents
  /agents/{ID}/engine:
    get:
      operationId: getAgentEngine
      parameters:
      - description: The ID of the order
        format: int64
        in: path
        name: ID
        required: true
        type: integer
      responses:
        "200":
          $ref: '#/responses/engineDBResponse'
        default:
          $ref: '#/responses/genericError'
      summary: Gets engine of a agent.
      tags:
      - agents
  /classdiagrams:
    get:
      description: Get all classdiagrams
      operationId: getClassdiagrams
      responses:
        "200":
          $ref: '#/responses/classdiagramDBsResponse'
        default:
          $ref: '#/responses/genericError'
      tags:
      - classdiagrams
    post:
      consumes:
      - application/json
      description: Creates a classdiagram
      operationId: postClassdiagram
      parameters:
      - description: The Classdiagram to submit or modify
        in: body
        name: Classdiagram
        schema:
          $ref: '#/definitions/classdiagramAPI'
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/classdiagramDBResponse'
      tags:
      - classdiagrams
  /classdiagrams/{ID}:
    delete:
      description: Delete a classdiagram
      operationId: deleteClassdiagram
      parameters:
      - description: The ID of the order
        format: int64
        in: path
        name: ID
        required: true
        type: integer
      responses:
        default:
          $ref: '#/responses/genericError'
      tags:
      - classdiagrams
    get:
      operationId: getClassdiagram
      parameters:
      - description: The ID of the order
        format: int64
        in: path
        name: ID
        required: true
        type: integer
      responses:
        "200":
          $ref: '#/responses/classdiagramDBResponse'
        default:
          $ref: '#/responses/genericError'
      summary: Gets the details for a classdiagram.
      tags:
      - classdiagrams
    patch:
      description: Update a classdiagram
      operationId: updateClassdiagram
      parameters:
      - description: The ID of the order
        format: int64
        in: path
        name: ID
        required: true
        type: integer
      - description: The Classdiagram to submit or modify
        in: body
        name: Classdiagram
        schema:
          $ref: '#/definitions/classdiagramAPI'
      responses:
        "200":
          $ref: '#/responses/classdiagramDBResponse'
        default:
          $ref: '#/responses/genericError'
      tags:
      - classdiagrams
  /classdiagrams/{ID}/pkgeltsviaclassdiagrams:
    get:
      operationId: getClassdiagramPkgeltsViaClassdiagrams
      parameters:
      - description: The ID of the order
        format: int64
        in: path
        name: ID
        required: true
        type: integer
      responses:
        "200":
          $ref: '#/responses/pkgeltDBsResponse'
        default:
          $ref: '#/responses/genericError'
      summary: Gets pkgelts of classdiagram via field Classdiagrams of Pkgelt.
      tags:
      - classdiagrams
  /classshapes:
    get:
      description: Get all classshapes
      operationId: getClassshapes
      responses:
        "200":
          $ref: '#/responses/classshapeDBsResponse'
        default:
          $ref: '#/responses/genericError'
      tags:
      - classshapes
    post:
      consumes:
      - application/json
      description: Creates a classshape
      operationId: postClassshape
      parameters:
      - description: The Classshape to submit or modify
        in: body
        name: Classshape
        schema:
          $ref: '#/definitions/classshapeAPI'
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/classshapeDBResponse'
      tags:
      - classshapes
  /classshapes/{ID}:
    delete:
      description: Delete a classshape
      operationId: deleteClassshape
      parameters:
      - description: The ID of the order
        format: int64
        in: path
        name: ID
        required: true
        type: integer
      responses:
        default:
          $ref: '#/responses/genericError'
      tags:
      - classshapes
    get:
      operationId: getClassshape
      parameters:
      - description: The ID of the order
        format: int64
        in: path
        name: ID
        required: true
        type: integer
      responses:
        "200":
          $ref: '#/responses/classshapeDBResponse'
        default:
          $ref: '#/responses/genericError'
      summary: Gets the details for a classshape.
      tags:
      - classshapes
    patch:
      description: Update a classshape
      operationId: updateClassshape
      parameters:
      - description: The ID of the order
        format: int64
        in: path
        name: ID
        required: true
        type: integer
      - description: The Classshape to submit or modify
        in: body
        name: Classshape
        schema:
          $ref: '#/definitions/classshapeAPI'
      responses:
        "200":
          $ref: '#/responses/classshapeDBResponse'
        default:
          $ref: '#/responses/genericError'
      tags:
      - classshapes
  /classshapes/{ID}/classdiagramsviaclassshapes:
    get:
      operationId: getClassshapeClassdiagramsViaClassshapes
      parameters:
      - description: The ID of the order
        format: int64
        in: path
        name: ID
        required: true
        type: integer
      responses:
        "200":
          $ref: '#/responses/classdiagramDBsResponse'
        default:
          $ref: '#/responses/genericError'
      summary: Gets classdiagrams of classshape via field Classshapes of Classdiagram.
      tags:
      - classshapes
  /classshapes/{ID}/position:
    get:
      operationId: getClassshapePosition
      parameters:
      - description: The ID of the order
        format: int64
        in: path
        name: ID
        required: true
        type: integer
      responses:
        "200":
          $ref: '#/responses/positionDBResponse'
        default:
          $ref: '#/responses/genericError'
      summary: Gets position of a classshape.
      tags:
      - classshapes
  /engines:
    get:
      description: Get all engines
      operationId: getEngines
      responses:
        "200":
          $ref: '#/responses/engineDBsResponse'
        default:
          $ref: '#/responses/genericError'
      tags:
      - engines
    post:
      consumes:
      - application/json
      description: Creates a engine
      operationId: postEngine
      parameters:
      - description: The Engine to submit or modify
        in: body
        name: Engine
        schema:
          $ref: '#/definitions/engineAPI'
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/engineDBResponse'
      tags:
      - engines
  /engines/{ID}:
    delete:
      description: Delete a engine
      operationId: deleteEngine
      parameters:
      - description: The ID of the order
        format: int64
        in: path
        name: ID
        required: true
        type: integer
      responses:
        default:
          $ref: '#/responses/genericError'
      tags:
      - engines
    get:
      operationId: getEngine
      parameters:
      - description: The ID of the order
        format: int64
        in: path
        name: ID
        required: true
        type: integer
      responses:
        "200":
          $ref: '#/responses/engineDBResponse'
        default:
          $ref: '#/responses/genericError'
      summary: Gets the details for a engine.
      tags:
      - engines
    patch:
      description: Update a engine
      operationId: updateEngine
      parameters:
      - description: The ID of the order
        format: int64
        in: path
        name: ID
        required: true
        type: integer
      - description: The Engine to submit or modify
        in: body
        name: Engine
        schema:
          $ref: '#/definitions/engineAPI'
      responses:
        "200":
          $ref: '#/responses/engineDBResponse'
        default:
          $ref: '#/responses/genericError'
      tags:
      - engines
  /engines/{ID}/agentsviaengine:
    get:
      operationId: getEngineAgentsViaEngine
      parameters:
      - description: The ID of the order
        format: int64
        in: path
        name: ID
        required: true
        type: integer
      responses:
        "200":
          $ref: '#/responses/agentDBsResponse'
        default:
          $ref: '#/responses/genericError'
      summary: Gets agents of engine via field Engine of Agent.
      tags:
      - engines
  /fields:
    get:
      description: Get all fields
      operationId: getFields
      responses:
        "200":
          $ref: '#/responses/fieldDBsResponse'
        default:
          $ref: '#/responses/genericError'
      tags:
      - fields
    post:
      consumes:
      - application/json
      description: Creates a field
      operationId: postField
      parameters:
      - description: The Field to submit or modify
        in: body
        name: Field
        schema:
          $ref: '#/definitions/fieldAPI'
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/fieldDBResponse'
      tags:
      - fields
  /fields/{ID}:
    delete:
      description: Delete a field
      operationId: deleteField
      parameters:
      - description: The ID of the order
        format: int64
        in: path
        name: ID
        required: true
        type: integer
      responses:
        default:
          $ref: '#/responses/genericError'
      tags:
      - fields
    get:
      operationId: getField
      parameters:
      - description: The ID of the order
        format: int64
        in: path
        name: ID
        required: true
        type: integer
      responses:
        "200":
          $ref: '#/responses/fieldDBResponse'
        default:
          $ref: '#/responses/genericError'
      summary: Gets the details for a field.
      tags:
      - fields
    patch:
      description: Update a field
      operationId: updateField
      parameters:
      - description: The ID of the order
        format: int64
        in: path
        name: ID
        required: true
        type: integer
      - description: The Field to submit or modify
        in: body
        name: Field
        schema:
          $ref: '#/definitions/fieldAPI'
      responses:
        "200":
          $ref: '#/responses/fieldDBResponse'
        default:
          $ref: '#/responses/genericError'
      tags:
      - fields
  /fields/{ID}/classshapesviafields:
    get:
      operationId: getFieldClassshapesViaFields
      parameters:
      - description: The ID of the order
        format: int64
        in: path
        name: ID
        required: true
        type: integer
      responses:
        "200":
          $ref: '#/responses/classshapeDBsResponse'
        default:
          $ref: '#/responses/genericError'
      summary: Gets classshapes of field via field Fields of Classshape.
      tags:
      - fields
  /gorgoactions:
    get:
      description: Get all gorgoactions
      operationId: getGorgoactions
      responses:
        "200":
          $ref: '#/responses/gorgoactionDBsResponse'
        default:
          $ref: '#/responses/genericError'
      tags:
      - gorgoactions
    post:
      consumes:
      - application/json
      description: Creates a gorgoaction
      operationId: postGorgoaction
      parameters:
      - description: The Gorgoaction to submit or modify
        in: body
        name: Gorgoaction
        schema:
          $ref: '#/definitions/gorgoactionAPI'
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/gorgoactionDBResponse'
      tags:
      - gorgoactions
  /gorgoactions/{ID}:
    delete:
      description: Delete a gorgoaction
      operationId: deleteGorgoaction
      parameters:
      - description: The ID of the order
        format: int64
        in: path
        name: ID
        required: true
        type: integer
      responses:
        default:
          $ref: '#/responses/genericError'
      tags:
      - gorgoactions
    get:
      operationId: getGorgoaction
      parameters:
      - description: The ID of the order
        format: int64
        in: path
        name: ID
        required: true
        type: integer
      responses:
        "200":
          $ref: '#/responses/gorgoactionDBResponse'
        default:
          $ref: '#/responses/genericError'
      summary: Gets the details for a gorgoaction.
      tags:
      - gorgoactions
    patch:
      description: Update a gorgoaction
      operationId: updateGorgoaction
      parameters:
      - description: The ID of the order
        format: int64
        in: path
        name: ID
        required: true
        type: integer
      - description: The Gorgoaction to submit or modify
        in: body
        name: Gorgoaction
        schema:
          $ref: '#/definitions/gorgoactionAPI'
      responses:
        "200":
          $ref: '#/responses/gorgoactionDBResponse'
        default:
          $ref: '#/responses/genericError'
      tags:
      - gorgoactions
  /links:
    get:
      description: Get all links
      operationId: getLinks
      responses:
        "200":
          $ref: '#/responses/linkDBsResponse'
        default:
          $ref: '#/responses/genericError'
      tags:
      - links
    post:
      consumes:
      - application/json
      description: Creates a link
      operationId: postLink
      parameters:
      - description: The Link to submit or modify
        in: body
        name: Link
        schema:
          $ref: '#/definitions/linkAPI'
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/linkDBResponse'
      tags:
      - links
  /links/{ID}:
    delete:
      description: Delete a link
      operationId: deleteLink
      parameters:
      - description: The ID of the order
        format: int64
        in: path
        name: ID
        required: true
        type: integer
      responses:
        default:
          $ref: '#/responses/genericError'
      tags:
      - links
    get:
      operationId: getLink
      parameters:
      - description: The ID of the order
        format: int64
        in: path
        name: ID
        required: true
        type: integer
      responses:
        "200":
          $ref: '#/responses/linkDBResponse'
        default:
          $ref: '#/responses/genericError'
      summary: Gets the details for a link.
      tags:
      - links
    patch:
      description: Update a link
      operationId: updateLink
      parameters:
      - description: The ID of the order
        format: int64
        in: path
        name: ID
        required: true
        type: integer
      - description: The Link to submit or modify
        in: body
        name: Link
        schema:
          $ref: '#/definitions/linkAPI'
      responses:
        "200":
          $ref: '#/responses/linkDBResponse'
        default:
          $ref: '#/responses/genericError'
      tags:
      - links
  /links/{ID}/classshapesvialinks:
    get:
      operationId: getLinkClassshapesViaLinks
      parameters:
      - description: The ID of the order
        format: int64
        in: path
        name: ID
        required: true
        type: integer
      responses:
        "200":
          $ref: '#/responses/classshapeDBsResponse'
        default:
          $ref: '#/responses/genericError'
      summary: Gets classshapes of link via field Links of Classshape.
      tags:
      - links
  /links/{ID}/middlevertice:
    get:
      operationId: getLinkMiddlevertice
      parameters:
      - description: The ID of the order
        format: int64
        in: path
        name: ID
        required: true
        type: integer
      responses:
        "200":
          $ref: '#/responses/verticeDBResponse'
        default:
          $ref: '#/responses/genericError'
      summary: Gets middlevertice of a link.
      tags:
      - links
  /machines:
    get:
      description: Get all machines
      operationId: getMachines
      responses:
        "200":
          $ref: '#/responses/machineDBsResponse'
        default:
          $ref: '#/responses/genericError'
      tags:
      - machines
    post:
      consumes:
      - application/json
      description: Creates a machine
      operationId: postMachine
      parameters:
      - description: The Machine to submit or modify
        in: body
        name: Machine
        schema:
          $ref: '#/definitions/machineAPI'
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/machineDBResponse'
      tags:
      - machines
  /machines/{ID}:
    delete:
      description: Delete a machine
      operationId: deleteMachine
      parameters:
      - description: The ID of the order
        format: int64
        in: path
        name: ID
        required: true
        type: integer
      responses:
        default:
          $ref: '#/responses/genericError'
      tags:
      - machines
    get:
      operationId: getMachine
      parameters:
      - description: The ID of the order
        format: int64
        in: path
        name: ID
        required: true
        type: integer
      responses:
        "200":
          $ref: '#/responses/machineDBResponse'
        default:
          $ref: '#/responses/genericError'
      summary: Gets the details for a machine.
      tags:
      - machines
    patch:
      description: Update a machine
      operationId: updateMachine
      parameters:
      - description: The ID of the order
        format: int64
        in: path
        name: ID
        required: true
        type: integer
      - description: The Machine to submit or modify
        in: body
        name: Machine
        schema:
          $ref: '#/definitions/machineAPI'
      responses:
        "200":
          $ref: '#/responses/machineDBResponse'
        default:
          $ref: '#/responses/genericError'
      tags:
      - machines
  /machines/{ID}/washersviamachine:
    get:
      operationId: getMachineWashersViaMachine
      parameters:
      - description: The ID of the order
        format: int64
        in: path
        name: ID
        required: true
        type: integer
      responses:
        "200":
          $ref: '#/responses/washerDBsResponse'
        default:
          $ref: '#/responses/genericError'
      summary: Gets washers of machine via field Machine of Washer.
      tags:
      - machines
  /pkgelts:
    get:
      description: Get all pkgelts
      operationId: getPkgelts
      responses:
        "200":
          $ref: '#/responses/pkgeltDBsResponse'
        default:
          $ref: '#/responses/genericError'
      tags:
      - pkgelts
    post:
      consumes:
      - application/json
      description: Creates a pkgelt
      operationId: postPkgelt
      parameters:
      - description: The Pkgelt to submit or modify
        in: body
        name: Pkgelt
        schema:
          $ref: '#/definitions/pkgeltAPI'
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/pkgeltDBResponse'
      tags:
      - pkgelts
  /pkgelts/{ID}:
    delete:
      description: Delete a pkgelt
      operationId: deletePkgelt
      parameters:
      - description: The ID of the order
        format: int64
        in: path
        name: ID
        required: true
        type: integer
      responses:
        default:
          $ref: '#/responses/genericError'
      tags:
      - pkgelts
    get:
      operationId: getPkgelt
      parameters:
      - description: The ID of the order
        format: int64
        in: path
        name: ID
        required: true
        type: integer
      responses:
        "200":
          $ref: '#/responses/pkgeltDBResponse'
        default:
          $ref: '#/responses/genericError'
      summary: Gets the details for a pkgelt.
      tags:
      - pkgelts
    patch:
      description: Update a pkgelt
      operationId: updatePkgelt
      parameters:
      - description: The ID of the order
        format: int64
        in: path
        name: ID
        required: true
        type: integer
      - description: The Pkgelt to submit or modify
        in: body
        name: Pkgelt
        schema:
          $ref: '#/definitions/pkgeltAPI'
      responses:
        "200":
          $ref: '#/responses/pkgeltDBResponse'
        default:
          $ref: '#/responses/genericError'
      tags:
      - pkgelts
  /positions:
    get:
      description: Get all positions
      operationId: getPositions
      responses:
        "200":
          $ref: '#/responses/positionDBsResponse'
        default:
          $ref: '#/responses/genericError'
      tags:
      - positions
    post:
      consumes:
      - application/json
      description: Creates a position
      operationId: postPosition
      parameters:
      - description: The Position to submit or modify
        in: body
        name: Position
        schema:
          $ref: '#/definitions/positionAPI'
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/positionDBResponse'
      tags:
      - positions
  /positions/{ID}:
    delete:
      description: Delete a position
      operationId: deletePosition
      parameters:
      - description: The ID of the order
        format: int64
        in: path
        name: ID
        required: true
        type: integer
      responses:
        default:
          $ref: '#/responses/genericError'
      tags:
      - positions
    get:
      operationId: getPosition
      parameters:
      - description: The ID of the order
        format: int64
        in: path
        name: ID
        required: true
        type: integer
      responses:
        "200":
          $ref: '#/responses/positionDBResponse'
        default:
          $ref: '#/responses/genericError'
      summary: Gets the details for a position.
      tags:
      - positions
    patch:
      description: Update a position
      operationId: updatePosition
      parameters:
      - description: The ID of the order
        format: int64
        in: path
        name: ID
        required: true
        type: integer
      - description: The Position to submit or modify
        in: body
        name: Position
        schema:
          $ref: '#/definitions/positionAPI'
      responses:
        "200":
          $ref: '#/responses/positionDBResponse'
        default:
          $ref: '#/responses/genericError'
      tags:
      - positions
  /positions/{ID}/classshapesviaposition:
    get:
      operationId: getPositionClassshapesViaPosition
      parameters:
      - description: The ID of the order
        format: int64
        in: path
        name: ID
        required: true
        type: integer
      responses:
        "200":
          $ref: '#/responses/classshapeDBsResponse'
        default:
          $ref: '#/responses/genericError'
      summary: Gets classshapes of position via field Position of Classshape.
      tags:
      - positions
  /states:
    get:
      description: Get all states
      operationId: getStates
      responses:
        "200":
          $ref: '#/responses/stateDBsResponse'
        default:
          $ref: '#/responses/genericError'
      tags:
      - states
    post:
      consumes:
      - application/json
      description: Creates a state
      operationId: postState
      parameters:
      - description: The State to submit or modify
        in: body
        name: State
        schema:
          $ref: '#/definitions/stateAPI'
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/stateDBResponse'
      tags:
      - states
  /states/{ID}:
    delete:
      description: Delete a state
      operationId: deleteState
      parameters:
      - description: The ID of the order
        format: int64
        in: path
        name: ID
        required: true
        type: integer
      responses:
        default:
          $ref: '#/responses/genericError'
      tags:
      - states
    get:
      operationId: getState
      parameters:
      - description: The ID of the order
        format: int64
        in: path
        name: ID
        required: true
        type: integer
      responses:
        "200":
          $ref: '#/responses/stateDBResponse'
        default:
          $ref: '#/responses/genericError'
      summary: Gets the details for a state.
      tags:
      - states
    patch:
      description: Update a state
      operationId: updateState
      parameters:
      - description: The ID of the order
        format: int64
        in: path
        name: ID
        required: true
        type: integer
      - description: The State to submit or modify
        in: body
        name: State
        schema:
          $ref: '#/definitions/stateAPI'
      responses:
        "200":
          $ref: '#/responses/stateDBResponse'
        default:
          $ref: '#/responses/genericError'
      tags:
      - states
  /states/{ID}/umlscsviastates:
    get:
      operationId: getStateUmlscsViaStates
      parameters:
      - description: The ID of the order
        format: int64
        in: path
        name: ID
        required: true
        type: integer
      responses:
        "200":
          $ref: '#/responses/umlscDBsResponse'
        default:
          $ref: '#/responses/genericError'
      summary: Gets umlscs of state via field States of Umlsc.
      tags:
      - states
  /umlscs:
    get:
      description: Get all umlscs
      operationId: getUmlscs
      responses:
        "200":
          $ref: '#/responses/umlscDBsResponse'
        default:
          $ref: '#/responses/genericError'
      tags:
      - umlscs
    post:
      consumes:
      - application/json
      description: Creates a umlsc
      operationId: postUmlsc
      parameters:
      - description: The Umlsc to submit or modify
        in: body
        name: Umlsc
        schema:
          $ref: '#/definitions/umlscAPI'
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/umlscDBResponse'
      tags:
      - umlscs
  /umlscs/{ID}:
    delete:
      description: Delete a umlsc
      operationId: deleteUmlsc
      parameters:
      - description: The ID of the order
        format: int64
        in: path
        name: ID
        required: true
        type: integer
      responses:
        default:
          $ref: '#/responses/genericError'
      tags:
      - umlscs
    get:
      operationId: getUmlsc
      parameters:
      - description: The ID of the order
        format: int64
        in: path
        name: ID
        required: true
        type: integer
      responses:
        "200":
          $ref: '#/responses/umlscDBResponse'
        default:
          $ref: '#/responses/genericError'
      summary: Gets the details for a umlsc.
      tags:
      - umlscs
    patch:
      description: Update a umlsc
      operationId: updateUmlsc
      parameters:
      - description: The ID of the order
        format: int64
        in: path
        name: ID
        required: true
        type: integer
      - description: The Umlsc to submit or modify
        in: body
        name: Umlsc
        schema:
          $ref: '#/definitions/umlscAPI'
      responses:
        "200":
          $ref: '#/responses/umlscDBResponse'
        default:
          $ref: '#/responses/genericError'
      tags:
      - umlscs
  /umlscs/{ID}/pkgeltsviaumlscs:
    get:
      operationId: getUmlscPkgeltsViaUmlscs
      parameters:
      - description: The ID of the order
        format: int64
        in: path
        name: ID
        required: true
        type: integer
      responses:
        "200":
          $ref: '#/responses/pkgeltDBsResponse'
        default:
          $ref: '#/responses/genericError'
      summary: Gets pkgelts of umlsc via field Umlscs of Pkgelt.
      tags:
      - umlscs
  /vertices:
    get:
      description: Get all vertices
      operationId: getVertices
      responses:
        "200":
          $ref: '#/responses/verticeDBsResponse'
        default:
          $ref: '#/responses/genericError'
      tags:
      - vertices
    post:
      consumes:
      - application/json
      description: Creates a vertice
      operationId: postVertice
      parameters:
      - description: The Vertice to submit or modify
        in: body
        name: Vertice
        schema:
          $ref: '#/definitions/verticeAPI'
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/verticeDBResponse'
      tags:
      - vertices
  /vertices/{ID}:
    delete:
      description: Delete a vertice
      operationId: deleteVertice
      parameters:
      - description: The ID of the order
        format: int64
        in: path
        name: ID
        required: true
        type: integer
      responses:
        default:
          $ref: '#/responses/genericError'
      tags:
      - vertices
    get:
      operationId: getVertice
      parameters:
      - description: The ID of the order
        format: int64
        in: path
        name: ID
        required: true
        type: integer
      responses:
        "200":
          $ref: '#/responses/verticeDBResponse'
        default:
          $ref: '#/responses/genericError'
      summary: Gets the details for a vertice.
      tags:
      - vertices
    patch:
      description: Update a vertice
      operationId: updateVertice
      parameters:
      - description: The ID of the order
        format: int64
        in: path
        name: ID
        required: true
        type: integer
      - description: The Vertice to submit or modify
        in: body
        name: Vertice
        schema:
          $ref: '#/definitions/verticeAPI'
      responses:
        "200":
          $ref: '#/responses/verticeDBResponse'
        default:
          $ref: '#/responses/genericError'
      tags:
      - vertices
  /vertices/{ID}/linksviamiddlevertice:
    get:
      operationId: getVerticeLinksViaMiddlevertice
      parameters:
      - description: The ID of the order
        format: int64
        in: path
        name: ID
        required: true
        type: integer
      responses:
        "200":
          $ref: '#/responses/linkDBsResponse'
        default:
          $ref: '#/responses/genericError'
      summary: Gets links of vertice via field Middlevertice of Link.
      tags:
      - vertices
  /washers:
    get:
      description: Get all washers
      operationId: getWashers
      responses:
        "200":
          $ref: '#/responses/washerDBsResponse'
        default:
          $ref: '#/responses/genericError'
      tags:
      - washers
    post:
      consumes:
      - application/json
      description: Creates a washer
      operationId: postWasher
      parameters:
      - description: The Washer to submit or modify
        in: body
        name: Washer
        schema:
          $ref: '#/definitions/washerAPI'
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/washerDBResponse'
      tags:
      - washers
  /washers/{ID}:
    delete:
      description: Delete a washer
      operationId: deleteWasher
      parameters:
      - description: The ID of the order
        format: int64
        in: path
        name: ID
        required: true
        type: integer
      responses:
        default:
          $ref: '#/responses/genericError'
      tags:
      - washers
    get:
      operationId: getWasher
      parameters:
      - description: The ID of the order
        format: int64
        in: path
        name: ID
        required: true
        type: integer
      responses:
        "200":
          $ref: '#/responses/washerDBResponse'
        default:
          $ref: '#/responses/genericError'
      summary: Gets the details for a washer.
      tags:
      - washers
    patch:
      description: Update a washer
      operationId: updateWasher
      parameters:
      - description: The ID of the order
        format: int64
        in: path
        name: ID
        required: true
        type: integer
      - description: The Washer to submit or modify
        in: body
        name: Washer
        schema:
          $ref: '#/definitions/washerAPI'
      responses:
        "200":
          $ref: '#/responses/washerDBResponse'
        default:
          $ref: '#/responses/genericError'
      tags:
      - washers
  /washers/{ID}/machine:
    get:
      operationId: getWasherMachine
      parameters:
      - description: The ID of the order
        format: int64
        in: path
        name: ID
        required: true
        type: integer
      responses:
        "200":
          $ref: '#/responses/machineDBResponse'
        default:
          $ref: '#/responses/genericError'
      summary: Gets machine of a washer.
      tags:
      - washers
produces:
- application/json
responses:
  actionDBResponse:
    description: ActionDBResponse provides response
    headers:
      CreatedAt:
        format: date-time
        type: string
      DeletedAt:
        format: date-time
        type: string
      ID:
        format: uint64
        type: integer
      Name:
        type: string
      UpdatedAt:
        format: date-time
        type: string
  actionDBsResponse:
    description: ActionDBs arrays actionDBs
    schema:
      items:
        $ref: '#/definitions/actionDB'
      type: array
  agentDBResponse:
    description: AgentDBResponse provides response
    headers:
      CreatedAt:
        format: date-time
        type: string
      DeletedAt:
        format: date-time
        type: string
      EngineID:
        description: |-
          field Engine is a pointer to another Struct (optional or 0..1)
          This field is generated into another field to enable a GORM `HAS ONE` association
        format: uint64
        type: integer
      EngineName:
        description: the associated Struct has a Name field, therefore it is generated
          to compute views with this relation
        type: string
      ID:
        format: uint64
        type: integer
      TechName:
        type: string
      UpdatedAt:
        format: date-time
        type: string
  agentDBsResponse:
    description: AgentDBs arrays agentDBs
    schema:
      items:
        $ref: '#/definitions/agentDB'
      type: array
  classdiagramDBResponse:
    description: ClassdiagramDBResponse provides response
    headers:
      Classshapes:
        description: |-
          this is the memory model (and not the "memory motel" of the Rolling Stones)
          it is not ignored by swagger because it is used by the angular model
        items:
          $ref: '#/definitions/Classshape'
        type: array
      CreatedAt:
        format: date-time
        type: string
      DeletedAt:
        format: date-time
        type: string
      ID:
        format: uint64
        type: integer
      Name:
        type: string
      Pkgelt_ClassdiagramsDBID:
        description: ID generated for the implementation of the field Classdiagram{}.Classdiagrams
          []*Pkgelt
        format: uint64
        type: integer
      UpdatedAt:
        format: date-time
        type: string
  classdiagramDBsResponse:
    description: ClassdiagramDBs arrays classdiagramDBs
    schema:
      items:
        $ref: '#/definitions/classdiagramDB'
      type: array
  classshapeDBResponse:
    description: ClassshapeDBResponse provides response
    headers:
      Classdiagram_ClassshapesDBID:
        description: ID generated for the implementation of the field Classshape{}.Classshapes
          []*Classdiagram
        format: uint64
        type: integer
      CreatedAt:
        format: date-time
        type: string
      DeletedAt:
        format: date-time
        type: string
      Fields:
        description: models of the composition of Field
        items:
          $ref: '#/definitions/Field'
        type: array
      ID:
        format: uint64
        type: integer
      Links:
        description: models of the composition of Link
        items:
          $ref: '#/definitions/Link'
        type: array
      Name:
        description: for technical reasons
        type: string
      PositionID:
        description: |-
          field Position is a pointer to another Struct (optional or 0..1)
          This field is generated into another field to enable a GORM `HAS ONE` association
        format: uint64
        type: integer
      PositionName:
        description: the associated Struct has a Name field, therefore it is generated
          to compute views with this relation
        type: string
      Structname:
        type: string
      UpdatedAt:
        format: date-time
        type: string
      Width:
        description: |-
          with and height of the shape when they are rendered on SVG or with jointjs
          They are optional fields. they can be computed when empty
        format: double
        type: number
  classshapeDBsResponse:
    description: ClassshapeDBs arrays classshapeDBs
    schema:
      items:
        $ref: '#/definitions/classshapeDB'
      type: array
  engineDBResponse:
    description: EngineDBResponse provides response
    headers:
      ControlMode:
        description: control mode.
        enum:
        - - Autonomous
          - ClientControl
        type: string
      CreatedAt:
        format: date-time
        type: string
      CurrentTime:
        description: CurrentTime is the simulation current time
        format: date-time
        type: string
      DeletedAt:
        format: date-time
        type: string
      EndTime:
        description: EndTime is the simulatio end date
        format: date-time
        type: string
      EngineSpecificInteface:
        description: |-
          EngineSpecificInteface supportspecific callback
          on the engine events
      Fired:
        description: Fired events
        format: int64
        type: integer
      ID:
        format: uint64
        type: integer
      LastEvent:
        description: LastEvent ...
      LastEventAgent:
        description: LastEvent agent
      Name:
        description: Name of the engine "laundramat" for instance
        type: string
      Speed:
        description: Speed compared to realtime
        format: double
        type: number
      StartTime:
        description: StartTime is the simulation start date
        format: date-time
        type: string
      State:
        description: engine state
        enum:
        - - RUNNING
          - PAUSED
          - OVER
        type: string
      UpdatedAt:
        format: date-time
        type: string
      agents:
        description: list of engine agents
        items:
          $ref: '#/definitions/AgentInterface'
        type: array
    schema:
      $ref: '#/definitions/EngineSpecificInterface'
  engineDBsResponse:
    description: EngineDBs arrays engineDBs
    schema:
      items:
        $ref: '#/definitions/engineDB'
      type: array
  fieldDBResponse:
    description: FieldDBResponse provides response
    headers:
      Classshape_FieldsDBID:
        description: ID generated for the implementation of the field Field{}.Fields
          []*Classshape
        format: uint64
        type: integer
      CreatedAt:
        format: date-time
        type: string
      DeletedAt:
        format: date-time
        type: string
      Fieldname:
        type: string
      Fieldtypename:
        type: string
      ID:
        format: uint64
        type: integer
      Name:
        type: string
      Structname:
        type: string
      UpdatedAt:
        format: date-time
        type: string
  fieldDBsResponse:
    description: FieldDBs arrays fieldDBs
    schema:
      items:
        $ref: '#/definitions/fieldDB'
      type: array
  genericError:
    description: |-
      A GenericError is the default error message that is generated.
      For certain status codes there are more appropriate error structures.
    schema:
      properties:
        code:
          format: int32
          type: integer
          x-go-name: Code
        message:
          type: string
          x-go-name: Message
      type: object
  gorgoactionDBResponse:
    description: GorgoactionDBResponse provides response
    headers:
      CreatedAt:
        format: date-time
        type: string
      DeletedAt:
        format: date-time
        type: string
      ID:
        format: uint64
        type: integer
      Name:
        description: The Name of the Action
        type: string
      Type:
        description: The type of the action
        enum:
        - - UNMARSHALL_ALL_DIAGRAMS
          - MARSHALL_ALL_DIAGRAMS
          - PRINT_ALL_DOCUMENTS
        type: string
      UpdatedAt:
        format: date-time
        type: string
  gorgoactionDBsResponse:
    description: GorgoactionDBs arrays gorgoactionDBs
    schema:
      items:
        $ref: '#/definitions/gorgoactionDB'
      type: array
  linkDBResponse:
    description: LinkDBResponse provides response
    headers:
      Classshape_LinksDBID:
        description: ID generated for the implementation of the field Link{}.Links
          []*Classshape
        format: uint64
        type: integer
      CreatedAt:
        format: date-time
        type: string
      DeletedAt:
        format: date-time
        type: string
      Fieldname:
        type: string
      Fieldtypename:
        type: string
      ID:
        format: uint64
        type: integer
      MiddleverticeID:
        description: |-
          field Middlevertice is a pointer to another Struct (optional or 0..1)
          This field is generated into another field to enable a GORM `HAS ONE` association
        format: uint64
        type: integer
      MiddleverticeName:
        description: the associated Struct has a Name field, therefore it is generated
          to compute views with this relation
        type: string
      Name:
        type: string
      Structname:
        type: string
      UpdatedAt:
        format: date-time
        type: string
  linkDBsResponse:
    description: LinkDBs arrays linkDBs
    schema:
      items:
        $ref: '#/definitions/linkDB'
      type: array
  machineDBResponse:
    description: MachineDBResponse provides response
    headers:
      Cleanedlaundry:
        description: Cleanedlaundry indicate wether the laundry in the drum is wet
          (it has been cleand)
        type: boolean
      CreatedAt:
        format: date-time
        type: string
      DeletedAt:
        format: date-time
        type: string
      DrumLoad:
        description: DrumLoad in kg
        format: double
        type: number
      ID:
        format: uint64
        type: integer
      Name:
        description: Name is a mandatory field with metab
        type: string
      RemainingTime:
        description: Remaining Time
      RemainingTimeMinutes:
        format: int64
        type: integer
      State:
        description: State of the machine
        enum:
        - - MACHINE_DOOR_OPEN
          - MACHINE_DOOR_CLOSED_RUNNING
          - MACHINE_DOOR_CLOSED_IDLE
        type: string
      TechName:
        type: string
      UpdatedAt:
        format: date-time
        type: string
    schema:
      $ref: '#/definitions/Duration'
  machineDBsResponse:
    description: MachineDBs arrays machineDBs
    schema:
      items:
        $ref: '#/definitions/machineDB'
      type: array
  pkgeltDBResponse:
    description: PkgeltDBResponse provides response
    headers:
      Classdiagrams:
        items:
          $ref: '#/definitions/Classdiagram'
        type: array
      CreatedAt:
        format: date-time
        type: string
      DeletedAt:
        format: date-time
        type: string
      ID:
        format: uint64
        type: integer
      Name:
        description: for metabaron
        type: string
      Umlscs:
        items:
          $ref: '#/definitions/Umlsc'
        type: array
      UpdatedAt:
        format: date-time
        type: string
  pkgeltDBsResponse:
    description: PkgeltDBs arrays pkgeltDBs
    schema:
      items:
        $ref: '#/definitions/pkgeltDB'
      type: array
  positionDBResponse:
    description: PositionDBResponse provides response
    headers:
      CreatedAt:
        format: date-time
        type: string
      DeletedAt:
        format: date-time
        type: string
      ID:
        format: uint64
        type: integer
      Name:
        type: string
      UpdatedAt:
        format: date-time
        type: string
      X:
        format: double
        type: number
      "Y":
        format: double
        type: number
  positionDBsResponse:
    description: PositionDBs arrays positionDBs
    schema:
      items:
        $ref: '#/definitions/positionDB'
      type: array
  stateDBResponse:
    description: StateDBResponse provides response
    headers:
      CreatedAt:
        format: date-time
        type: string
      DeletedAt:
        format: date-time
        type: string
      ID:
        format: uint64
        type: integer
      Name:
        type: string
      Umlsc_StatesDBID:
        description: ID generated for the implementation of the field State{}.States
          []*Umlsc
        format: uint64
        type: integer
      UpdatedAt:
        format: date-time
        type: string
      X:
        format: double
        type: number
      "Y":
        format: double
        type: number
  stateDBsResponse:
    description: StateDBs arrays stateDBs
    schema:
      items:
        $ref: '#/definitions/stateDB'
      type: array
  umlscDBResponse:
    description: UmlscDBResponse provides response
    headers:
      Activestate:
        description: |-
          in this version, only one state is active mong the states
          (with the embedded states version, that might change)
        type: string
      CreatedAt:
        format: date-time
        type: string
      DeletedAt:
        format: date-time
        type: string
      ID:
        format: uint64
        type: integer
      Name:
        type: string
      Pkgelt_UmlscsDBID:
        description: ID generated for the implementation of the field Umlsc{}.Umlscs
          []*Pkgelt
        format: uint64
        type: integer
      States:
        description: |-
          this is the memory model (and not the "memory motel" of the Rolling Stones)
          it is not ignored by swagger because it is used by the angular model
        items:
          $ref: '#/definitions/State'
        type: array
      UpdatedAt:
        format: date-time
        type: string
  umlscDBsResponse:
    description: UmlscDBs arrays umlscDBs
    schema:
      items:
        $ref: '#/definitions/umlscDB'
      type: array
  validationError:
    description: |-
      A ValidationError is an that is generated for validation failures.
      It has the same fields as a generic error but adds a Field property.
    schema:
      properties:
        code:
          format: int32
          type: integer
          x-go-name: Code
        field:
          type: string
          x-go-name: Field
        message:
          type: string
          x-go-name: Message
      type: object
  verticeDBResponse:
    description: VerticeDBResponse provides response
    headers:
      CreatedAt:
        format: date-time
        type: string
      DeletedAt:
        format: date-time
        type: string
      ID:
        format: uint64
        type: integer
      Name:
        type: string
      UpdatedAt:
        format: date-time
        type: string
      X:
        format: double
        type: number
      "Y":
        format: double
        type: number
  verticeDBsResponse:
    description: VerticeDBs arrays verticeDBs
    schema:
      items:
        $ref: '#/definitions/verticeDB'
      type: array
  washerDBResponse:
    description: WasherDBResponse provides response
    headers:
      CleanedLaundryWeight:
        description: |-
          CleanedLaundryWeight is the cumulative cleaned laundry
          the Washer. in kilo
        format: double
        type: number
      CreatedAt:
        format: date-time
        type: string
      DeletedAt:
        format: date-time
        type: string
      ID:
        format: uint64
        type: integer
      LaundryWeight:
        description: |-
          LaundryWeight is the drum fill level perceived by
          the Washer. in kilo
        format: double
        type: number
      MachineID:
        description: |-
          field Machine is a pointer to another Struct (optional or 0..1)
          This field is generated into another field to enable a GORM `HAS ONE` association
        format: uint64
        type: integer
      MachineName:
        description: the associated Struct has a Name field, therefore it is generated
          to compute views with this relation
        type: string
      Name:
        description: Name is a mandatory field with metab
        type: string
      State:
        description: State
        enum:
        - - WASHER_IDLE
          - WASHER_LOAD_DRUM
          - WASHER_OPEN_DOOR
          - WASHER_WAIT_PROGRAM_END
          - WASHER_CLOSE_DOOR
          - WASHER_UNLOAD_DRUM
          - WASHER_START_PROGRAM
        type: string
      TechName:
        type: string
      UpdatedAt:
        format: date-time
        type: string
  washerDBsResponse:
    description: WasherDBs arrays washerDBs
    schema:
      items:
        $ref: '#/definitions/washerDB'
      type: array
schemes:
- http
securityDefinitions:
  basic:
    type: basic
swagger: "2.0"
