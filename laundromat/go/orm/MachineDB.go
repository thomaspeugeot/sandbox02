// generated by genORMModelDB.go
package orm

import (
	"errors"
	"fmt"

	"github.com/jinzhu/gorm"
	"github.com/thomaspeugeot/sandbox02/laundromat/go/models"
)

// MachineAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model machineAPI
type MachineAPI struct {
	models.Machine

	// association fields

}

// MachineDB describes a machine in the database
//
// It incorporates all fields : from the model, from the generated field for the API and the GORM ID
//
// swagger:model machineDB
type MachineDB struct {
	gorm.Model

	MachineAPI
}

// MachineDBs arrays machineDBs
// swagger:response machineDBsResponse
type MachineDBs []MachineDB

// MachineDBResponse provides response
// swagger:response machineDBResponse
type MachineDBResponse struct {
	MachineDB
}

// ModelToORMMachineTranslate is a translation function from models object to ORM objects
func ModelToORMMachineTranslate(
	translationImpact TranslationImpact,
	db *gorm.DB) (Error error) {

	if translationImpact == CreateMode {

		// check that machineStore is nil as well as machineDBs
		if map_MachineDBID_MachinePtr != nil {
			err := errors.New("In CreateMode translation, map_MachineDBID_MachinePtr should be nil")
			return err
		}

		if map_MachineDBID_MachineDB != nil {
			err := errors.New("In CreateMode translation, map_MachineDBID_MachineDB should be nil")
			return err
		}

		if map_MachinePtr_MachineDBID != nil {
			err := errors.New("In CreateMode translation, map_MachinePtr_MachineDBID should be nil")
			return err
		}

		tmp := make(map[uint]*models.Machine, 0)
		map_MachineDBID_MachinePtr = &tmp

		tmpDB := make(map[uint]*MachineDB, 0)
		map_MachineDBID_MachineDB = &tmpDB

		tmpID := make(map[*models.Machine]uint, 0)
		map_MachinePtr_MachineDBID = &tmpID

		for _, machine := range models.AllModelStore.Machines {

			// initiate machine
			var machineDB MachineDB
			machineDB.Machine = *machine

			query := db.Create(&machineDB)
			if query.Error != nil {
				return query.Error
			}

			// update stores
			(*map_MachinePtr_MachineDBID)[machine] = machineDB.ID
			(*map_MachineDBID_MachinePtr)[machineDB.ID] = machine
			(*map_MachineDBID_MachineDB)[machineDB.ID] = &machineDB
		}
	} else { // UpdateMode, update IDs of Pointer Fields of ORM object

		// check that machineStore is not nil
		if map_MachineDBID_MachinePtr == nil {
			err := errors.New("In UpdateMode translation, machineStore should not be nil")
			return err
		}

		if map_MachineDBID_MachineDB == nil {
			err := errors.New("In UpdateMode translation, machineStore should not be nil")
			return err
		}

		// update fields of machineDB with fields of machine
		for _, machine := range models.AllModelStore.Machines {
			machineDBID := (*map_MachinePtr_MachineDBID)[machine]
			machineDB := (*map_MachineDBID_MachineDB)[machineDBID]

			machineDB.Machine = *machine
		}

		// parse model objects ot update associations
		for idx, machine := range *map_MachineDBID_MachinePtr {

			// fetch matching machineDB
			if machineDB, ok := (*map_MachineDBID_MachineDB)[idx]; ok {
				// set {{Fieldname}}ID

				query := db.Save(&machineDB)
				if query.Error != nil {
					return query.Error
				}

			} else {
				err := errors.New(
					fmt.Sprintf("In UpdateMode translation, machineStore should not be nil %v %v",
						machineDB, machine))
				return err
			}
		}
	}
	return nil
}

// stores MachineDB according to their gorm ID
var map_MachineDBID_MachineDB *map[uint]*MachineDB

// stores MachineDB ID according to Machine address
var map_MachinePtr_MachineDBID *map[*models.Machine]uint

// stores Machine according to their gorm ID
var map_MachineDBID_MachinePtr *map[uint]*models.Machine

// ORMToModelMachineTranslate is a translation function from ORM object to models objects
// This function used the uint ID of the ORM object to create or update (according to translationImpact)
// maps of respectively ORM and models objects
//
// In create mode,
func ORMToModelMachineTranslate(
	translationImpact TranslationImpact,
	db *gorm.DB) (Error error) {

	if translationImpact == CreateMode {

		// check that machineStores are nil

		if map_MachineDBID_MachinePtr != nil {
			err := errors.New("In CreateMode translation, Parameters machineStore should be nil")
			return err
		}

		if map_MachineDBID_MachineDB != nil {
			err := errors.New("In CreateMode translation, parameters MachineDBStore should be nil")
			return err
		}

		// init stores
		tmp := make(map[uint]*models.Machine, 0)
		map_MachineDBID_MachinePtr = &tmp

		tmpDB := make(map[uint]*MachineDB, 0)
		map_MachineDBID_MachineDB = &tmpDB

		tmpID := make(map[*models.Machine]uint, 0)
		map_MachinePtr_MachineDBID = &tmpID

		models.AllModelStore.Machines = make([]*models.Machine, 0)

		machineDBArray := make([]MachineDB, 0)
		query := db.Find(&machineDBArray)
		if query.Error != nil {
			return query.Error
		}

		// copy orm objects to the two stores
		for _, machineDB := range machineDBArray {

			// create entries in the tree maps.
			machine := machineDB.Machine
			(*map_MachineDBID_MachinePtr)[machineDB.ID] = &machine

			(*map_MachinePtr_MachineDBID)[&machine] = machineDB.ID

			machineDBCopy := machineDB
			(*map_MachineDBID_MachineDB)[machineDB.ID] = &machineDBCopy

			// append model store with the new element
			models.AllModelStore.Machines = append(models.AllModelStore.Machines, &machine)
		}
	} else { // UpdateMode
		// for later, update of the data field

		// check that machineStore is not nil
		if map_MachineDBID_MachinePtr == nil {
			err := errors.New("In UpdateMode translation, machineStore should not be nil")
			return err
		}

		if map_MachineDBID_MachineDB == nil {
			err := errors.New("In UpdateMode translation, machineStore should not be nil")
			return err
		}

		// update fields of machineDB with fields of machine
		for _, machine := range models.AllModelStore.Machines {
			machineDBID := (*map_MachinePtr_MachineDBID)[machine]
			machineDB := (*map_MachineDBID_MachineDB)[machineDBID]

			*machine = machineDB.Machine
		}

		// parse all DB instance and update all pointer fields of the translated models instance
		for _, machineDB := range *map_MachineDBID_MachineDB {
			machine := (*map_MachineDBID_MachinePtr)[machineDB.ID]
			if machine == nil {
				err := errors.New("cannot find translated instance in models store")
				return err
			}

		}
	}

	return nil
}

func (allORMStoreStruct *AllORMStoreStruct) CreateORMMachine(machine *models.Machine) {

	CreateORMMachine(allORMStoreStruct.db, machine)
}

// CreateORMMachine creates ORM{{Strucname}} in DB from machine
func CreateORMMachine(
	db *gorm.DB,
	machine *models.Machine) (Error error) {

	// initiate machine
	var machineDB MachineDB
	machineDB.Machine = *machine

	query := db.Create(&machineDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*map_MachinePtr_MachineDBID)[machine] = machineDB.ID
	(*map_MachineDBID_MachinePtr)[machineDB.ID] = machine
	(*map_MachineDBID_MachineDB)[machineDB.ID] = &machineDB

	return
}

func (allORMStoreStruct *AllORMStoreStruct) DeleteORMMachine(machine *models.Machine) {

	DeleteORMMachine(allORMStoreStruct.db, machine)
}

func DeleteORMMachine(
	db *gorm.DB,
	machine *models.Machine) (Error error) {

	machineDBID := (*map_MachinePtr_MachineDBID)[machine]
	machineDB := (*map_MachineDBID_MachineDB)[machineDBID]

	query := db.Unscoped().Delete(&machineDB)
	if query.Error != nil {
		return query.Error
	}

	delete(*map_MachinePtr_MachineDBID, machine)
	delete(*map_MachineDBID_MachinePtr, machineDB.ID)
	delete(*map_MachineDBID_MachineDB, machineDBID)

	return
}
